################################################################################
# TorchSharp's PR validation build
################################################################################

resources:
  containers:
#   - container: CentosContainer
#     image: mcr.microsoft.com/dotnet-buildtools/prereqs:centos-7-mlnet-8bba86b-20190314145033
  
   - container: UbuntuContainer
     image: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-16.04-mlnet-20200515184230-2c829e8

jobs:
- template: /build/ci/job-template.yml
  parameters:
    name: Ubuntu_x64_NetCoreApp30
    prepScript: (wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -) && sudo apt-add-repository "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-6.0 main" && sudo apt-get -y update && sudo apt-get -y install clang-6.0 git cmake libunwind8 curl libssl1.0.0 libomp-dev
    buildScript: ./build.sh build /p:SkipCuda=true -c 
    testScript: ./build.sh test /p:SkipCuda=true -c 
    pool:
      vmImage: 'ubuntu-16.04'
    container: UbuntuContainer

- template: /build/ci/job-template.yml
  parameters:
    prepScript: brew update && brew install libomp && brew install mono-libgdiplus gettext && brew link gettext --force && brew link libomp --force
    name: MacOS_x64_NetCoreApp30
    buildScript: ./build.sh build /p:SkipCuda=true -c 
    testScript: ./build.sh test /p:SkipCuda=true -c 
    pool:
      vmImage: 'macOS-latest'

- template: /build/ci/job-template.yml
  parameters:
    prepScript: echo "no prep needed"
    name: Windows_x64_NetCoreApp30
    buildScript: build.cmd  build  /p:SkipCuda=true -c 
    testScript: build.cmd test /p:SkipCuda=true -c 
    pool:
      vmImage: 'windows-latest'

################################################################################
# {Build} --> combine --> package to build native bits on multiple OS's
################################################################################


################################################################################
- job: Linux_Build_For_Package
################################################################################
  variables:
    BuildConfig: Release
    OfficialBuildId: $(BUILD.BUILDNUMBER)
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    DOTNET_MULTILEVEL_LOOKUP: 0
    TORCHSHARP_MAKING_PACKAGE: 1
  pool:
    vmImage: 'ubuntu-16.04'
  container: UbuntuContainer
  steps:
  - script: wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
  - script: sudo apt-add-repository "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-6.0 main"
  - script: sudo apt-get -y update
  - script: sudo apt-get -y install clang-6.0 git cmake libunwind8 curl libssl1.0.0 libomp-dev
  - script: ./build.sh build -c $(BuildConfig) 
    displayName: Build

  - publish: $(Build.SourcesDirectory)/bin/obj/$(BuildConfig)/packages
    artifact: LinuxAssets

# ################################################################################
# - job: MacOS_Build_For_Package
# ################################################################################
#   variables:
#     BuildConfig: Release
#     OfficialBuildId: $(BUILD.BUILDNUMBER)
#     DOTNET_CLI_TELEMETRY_OPTOUT: 1
#     DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
#     DOTNET_MULTILEVEL_LOOKUP: 0
#     TORCHSHARP_MAKING_PACKAGE: 1
#   pool:
#     name: Hosted macOS
#   steps:
#   - script: brew update && brew install libomp && brew install llvm && brew install mono-libgdiplus gettext && brew link gettext --force && brew link libomp --force && brew link llvm --force
#     displayName: Install build dependencies (macOS)
#   - script: ls -Flas /usr/local/opt/llvm/bin/
#     displayName: Debug Stuff
#   - script: ./build.sh build -c $(BuildConfig)
#     displayName: Build

#   - task: PublishBuildArtifacts@1
#     displayName: Publish macOS package assets
#   - publish: $(Build.SourcesDirectory)/bin/obj/$(BuildConfig)/packages
#     artifact: MacAssets


################################################################################
- job: Package
################################################################################
  dependsOn:
  - Linux_Build_For_Package
  # - MacOS_Build_For_Package
  variables:
    BuildConfig: Release
    OfficialBuildId: $(BUILD.BUILDNUMBER)
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    DOTNET_MULTILEVEL_LOOKUP: 0
  pool:
    vmImage: 'windows-latest'
  steps:

    # Download all bits contributing to the packages from the Linux and Mac builds
  - download: current
    artifact: LinuxAssets

  - task: CopyFiles@2
    displayName: Copy package assets to correct folder where the bits contributing to the packages are assembled
    inputs:
      sourceFolder: $(Pipeline.Workspace)/LinuxAssets
      targetFolder: $(Build.SourcesDirectory)/../bin/obj/$(BuildConfig)/packages
  
  - script: rmdir /s /q  $(Pipeline.Workspace)/LinuxAssets
    displayName: Free up space

  # - task: CopyFiles@2
  #   displayName: Copy package assets to correct folder where the bits contributing to the packages are assembled
  #   inputs:
  #     sourceFolder: $(Pipeline.Workspace)/MacAssets
  #     targetFolder: $(Build.SourcesDirectory)/../bin/obj/$(BuildConfig)/packages

  # - script: rmdir /s /q  $(Pipeline.Workspace)/LinuxAssets
  #   displayName: Free up space

  # build the windows bits contributing to the packages and make the packages
  - script: build.cmd pack -c $(BuildConfig) 
    displayName: Build Windows and Create Packages

  - task: CopyFiles@2
    displayName: Copy packaged assets to staging folder
    inputs:
      sourceFolder: $(Build.SourcesDirectory)/bin/packages/$(BuildConfig)
      targetFolder: $(Build.ArtifactStagingDirectory)
 
  #  - script: |
  #      cp $(Build.SourcesDirectory)\bin\obj\packages\$(BuildConfig)\*.nupkg $BUILD_ARTIFACTSTAGINGDIRECTORY
  #    # rm $BUILD_ARTIFACTSTAGINGDIRECTORY/*.symbols.nupkg
  #    displayName: Copy Nugets in staging directory

  #  - script: |
  #      dotnet publish --configuration $(buildConfiguration) --output $BUILD_ARTIFACTSTAGINGDIRECTORY
  #    displayName: Dotnet Publish

  - task: PublishBuildArtifacts@1
    condition: and(succeeded(), ne(variables['system.pullrequest.isfork'], true))
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: packages
  
  # Terminate all dotnet build processes.
  - script: $(Build.SourcesDirectory)/Tools/dotnetcli/dotnet.exe build-server shutdown
    displayName: Dotnet Server Shutdown
