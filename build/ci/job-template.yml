parameters:
  name: ''
  architecture: x64
  buildScript: ''
  pool: {}
  container: ''
  customMatrixes: ''
  codeCoverage: false

jobs:
  - job: ${{ parameters.name }}
    variables:
      _buildScript: ${{ parameters.buildScript }}
      _jobName: ${{ parameters.name }}
      _arch: ${{ parameters.architecture }}
      _codeCoverage: ${{ parameters.codeCoverage }}
    pool:
      ${{ if eq(variables._codeCoverage, 'false') }}:
        timeoutInMinutes: 30
      ${{ if eq(variables._codeCoverage, 'true') }}:
        timeoutInMinutes: 60
      ${{ insert }}: ${{ parameters.pool }}
    ${{ if ne(parameters.container, '') }}:
      container: ${{ parameters.container }}
    strategy:
      maxParallel: 99
      matrix:
        ${{ if eq(parameters.customMatrixes, '') }}:
          Debug_Build:
            _configuration: Debug
            _config_short: D
            _includeBenchmarkData: false
          Release_Build:
            _configuration: Release
            _config_short: R
            _includeBenchmarkData: true
        ${{ if ne(parameters.customMatrixes, '') }}:
          ${{ insert }}: ${{ parameters.customMatrixes }}
    steps:
    - ${{ if eq(parameters.pool.name, 'Hosted macOS') }}:
      - script: brew update && brew install libomp && brew install llvm && brew install mono-libgdiplus gettext && brew link gettext --force && brew link libomp --force && brew link llvm --force
        displayName: Install build dependencies (macOS)
    - ${{ if eq(parameters.pool.name, 'Hosted Ubuntu 1604') }}:
      - script: wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
      - script: sudo apt-add-repository "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-6.0 main"
      - script: sudo apt-get -y update
      - script: sudo apt-get -y install clang-6.0 git cmake libunwind8 curl libssl1.0.0 libomp-dev
        displayName: Install build dependencies (ubuntu)
    - script: $(_buildScript) build -c $(_configuration) /p:SkipCude:true
      displayName: Build
    - script: $(_buildScript) test -c $(_configuration)  /p:SkipCude:true
      displayName: Run Tests
    # -coverage=$(_codeCoverage)
    # REVIEW: Code coverage should be reactivated.
    # - script: $(Build.SourcesDirectory)/Tools/dotnetcli/dotnet msbuild build/Codecoverage.proj /p:CodeCovToken=$(CODECOV_TOKEN)
    #   displayName: Upload coverage to codecov.io
    #   condition: and(succeeded(), eq(variables._codeCoverage, 'true'))
    - task: PublishTestResults@2
      displayName: Publish Test Results
      condition: succeededOrFailed()
      inputs:
        testRunner: 'vSTest'
        searchFolder: '$(System.DefaultWorkingDirectory)/bin'
        testResultsFiles: '**/*.trx'
        testRunTitle: Machinelearning_Tests_$(_jobName)_$(_configuration)_$(Build.BuildNumber)
        configuration: $(_configuration)
        mergeTestResults: true
    - task: CopyFiles@2
      displayName: Stage build logs
      condition: not(succeeded())
      inputs:
        sourceFolder: $(Build.SourcesDirectory)
        contents: '?(msbuild.*|binclash.log|init-tools.log)'
        targetFolder: $(Build.ArtifactStagingDirectory)
    - task: CopyFiles@2
      displayName: Stage test output
      condition: not(succeeded())
      inputs:
        sourceFolder: $(Build.SourcesDirectory)/bin
        contents: |
          **/TestOutput/**/*
          **/*.trx
        targetFolder: $(Build.ArtifactStagingDirectory)
    - task: PublishBuildArtifacts@1
      displayName: Publish build and test logs
      condition: not(succeeded())
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        artifactName: ${{ parameters.name }} $(_config_short)
        artifactType: container
