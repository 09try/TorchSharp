<Type Name="FloatTensor" FullName="TorchSharp.FloatTensor">
  <TypeSignature Language="C#" Value="public class FloatTensor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FloatTensor extends System.Object implements class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>TorchSharp</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
              Tensor of type Float.
            </summary>
    <remarks>
      <para>
                Use the default constructor to create an empty tensor, or invoke one of the
                constructors with one (1D), two (2D), three (3D), or four parameters (4D) to x
                create a tensor for the desired number of dimensions.
              </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FloatTensor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
               Creates an empty tensor.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FloatTensor (long size0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 size0) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="size0" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size0">Size for the first dimension.</param>
        <summary>
               Creates a 1D tensor of the specified size.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FloatTensor (long size0, long size1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 size0, int64 size1) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="size0" Type="System.Int64" />
        <Parameter Name="size1" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size0">Size for the first dimension.</param>
        <param name="size1">Size for the second dimension.</param>
        <summary>
               Creates a 2D tensor of the specified size.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FloatTensor (long size0, long size1, long size2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 size0, int64 size1, int64 size2) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="size0" Type="System.Int64" />
        <Parameter Name="size1" Type="System.Int64" />
        <Parameter Name="size2" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size0">Size for the first dimension.</param>
        <param name="size1">Size for the second dimension.</param>
        <param name="size2">Size for the third dimension.</param>
        <summary>
               Creates a 3D tensor of the specified size.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FloatTensor (long size0, long size1, long size2, long size3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 size0, int64 size1, int64 size2, int64 size3) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="size0" Type="System.Int64" />
        <Parameter Name="size1" Type="System.Int64" />
        <Parameter Name="size2" Type="System.Int64" />
        <Parameter Name="size3" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size0">Size for the first dimension.</param>
        <param name="size1">Size for the second dimension.</param>
        <param name="size2">Size for the third dimension.</param>
        <param name="size3">Size for the fourth dimension.</param>
        <summary>
               Creates a 4D tensor of the specified size.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Abs ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Abs() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Abs of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Abs (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Abs(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Abs of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Acos ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Acos() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Acos of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Acos (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Acos(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Acos of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Add (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Add(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
              Performs the Add operation on each element of the tensor with the
              <see paramref="value" /> and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>
              If you want to avoid the allocation of a new tensor, you can use the 
              alternative method <see cref="M:PytorchSharp.Add(PytorchSharp.FloatTensor, Float, PytorchSharp.Float)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static void Add (TorchSharp.FloatTensor source, float value, TorchSharp.FloatTensor result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Add(class TorchSharp.FloatTensor source, float32 value, class TorchSharp.FloatTensor result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.FloatTensor" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="result" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="source">Source tensor on which the operation will take place.</param>
        <param name="value">The scalar value that the operation uses.</param>
        <param name="result">The tensor where the result will be placed</param>
        <summary>
              Performs the Add operation on each element of the source with the
              provided scalar.   The result tensor specified as the last parameters
              is resized to match the source.
            </summary>
        <remarks>
               For each element in the <see paramref="source" /> performs the Add operation
               with <see paramref="value" />.   The result is stored in the <see paramref="result" />
               tensor.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddBMM">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor AddBMM (float beta, float alpha, TorchSharp.FloatTensor batch1, TorchSharp.FloatTensor batch2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor AddBMM(float32 beta, float32 alpha, class TorchSharp.FloatTensor batch1, class TorchSharp.FloatTensor batch2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beta" Type="System.Single" />
        <Parameter Name="alpha" Type="System.Single" />
        <Parameter Name="batch1" Type="TorchSharp.FloatTensor" />
        <Parameter Name="batch2" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="beta">Multiplier for this tensor (β).</param>
        <param name="alpha">Multiplier for batch1xbatch2 (α)</param>
        <param name="batch1">the first batch of matrices to be multiplied</param>
        <param name="batch2">the second batch of matrices to be multiplied</param>
        <summary>
              Performs AddBMM of the tensor with the provided 
              <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
            </summary>
        <returns>
              β mat+α (∑i=0bbatch1i@batch2i)
            </returns>
        <remarks>
            β mat+α (∑i=0bbatch1i@batch2i)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCDiv">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor AddCDiv (float value, TorchSharp.FloatTensor src1, TorchSharp.FloatTensor src2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor AddCDiv(float32 value, class TorchSharp.FloatTensor src1, class TorchSharp.FloatTensor src2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="src1" Type="TorchSharp.FloatTensor" />
        <Parameter Name="src2" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="value">
        </param>
        <param name="src1">
        </param>
        <param name="src2">
        </param>
        <summary>
              Performs AddCDiv of the tensor with the provided 
              <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCMul">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor AddCMul (float value, TorchSharp.FloatTensor src1, TorchSharp.FloatTensor src2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor AddCMul(float32 value, class TorchSharp.FloatTensor src1, class TorchSharp.FloatTensor src2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="src1" Type="TorchSharp.FloatTensor" />
        <Parameter Name="src2" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="value">
        </param>
        <param name="src1">
        </param>
        <param name="src2">
        </param>
        <summary>
              Performs AddCMul of the tensor with the provided 
              <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMM">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor AddMM (float beta, float alpha, TorchSharp.FloatTensor mat1, TorchSharp.FloatTensor mat2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor AddMM(float32 beta, float32 alpha, class TorchSharp.FloatTensor mat1, class TorchSharp.FloatTensor mat2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beta" Type="System.Single" />
        <Parameter Name="alpha" Type="System.Single" />
        <Parameter Name="mat1" Type="TorchSharp.FloatTensor" />
        <Parameter Name="mat2" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="beta">Multiplier for this tensor (β).</param>
        <param name="alpha">Multiplier for mat1xmat2 (α)</param>
        <param name="mat1">First matrix to  be multiplied</param>
        <param name="mat2">Second matrix to  be multiplied</param>
        <summary>
              Performs AddMM of the tensor with the provided 
              <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
            </summary>
        <returns>
              β mat+α (mat1i@mat2i)
            </returns>
        <remarks>
            β mat+α (mat1i@mat2i)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMV">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor AddMV (float beta, float alpha, TorchSharp.FloatTensor mat, TorchSharp.FloatTensor vec);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor AddMV(float32 beta, float32 alpha, class TorchSharp.FloatTensor mat, class TorchSharp.FloatTensor vec) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beta" Type="System.Single" />
        <Parameter Name="alpha" Type="System.Single" />
        <Parameter Name="mat" Type="TorchSharp.FloatTensor" />
        <Parameter Name="vec" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="beta">Multiplier for this tensor (β).</param>
        <param name="alpha">Multiplier for matxvec (α)</param>
        <param name="mat">Matrix to be multiplied</param>
        <param name="vec">Vector to be multiplied</param>
        <summary>
              Performs AddMV of the tensor with the provided 
              <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
            </summary>
        <returns>
              β tensor+α (mat@vec)
            </returns>
        <remarks>
            β tensor+α (mat@vec)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddR">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor AddR (float beta, float alpha, TorchSharp.FloatTensor vec1, TorchSharp.FloatTensor vec2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor AddR(float32 beta, float32 alpha, class TorchSharp.FloatTensor vec1, class TorchSharp.FloatTensor vec2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beta" Type="System.Single" />
        <Parameter Name="alpha" Type="System.Single" />
        <Parameter Name="vec1" Type="TorchSharp.FloatTensor" />
        <Parameter Name="vec2" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="beta">Multiplier for this tensor (β).</param>
        <param name="alpha">Multiplier for vec1xvec2 (α)</param>
        <param name="vec1">the first vector of the outer product</param>
        <param name="vec2">the second vector of the outer product</param>
        <summary>
              Performs AddR of the tensor with the provided 
              <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
            </summary>
        <returns>
              β mat+α (vec1⊗vec2)
            </returns>
        <remarks>
            β mat+α (vec1⊗vec2)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddScaled">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor AddScaled (float value1, float value2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor AddScaled(float32 value1, float32 value2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value1" Type="System.Single" />
        <Parameter Name="value2" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value1">
        </param>
        <param name="value2">
        </param>
        <summary>
              Performs an AddScaled of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ARange">
      <MemberSignature Language="C#" Value="public static TorchSharp.FloatTensor ARange (double xmin, double xmax, double step);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class TorchSharp.FloatTensor ARange(float64 xmin, float64 xmax, float64 step) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmin" Type="System.Double" />
        <Parameter Name="xmax" Type="System.Double" />
        <Parameter Name="step" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="xmin">The lower bound of the range.</param>
        <param name="xmax">The upper bound of the range.</param>
        <param name="step">The value step.</param>
        <summary>
              Create a range spanning from xmin to xmax, with 'step' between each value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Asin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Asin() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Asin of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Asin (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Asin(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Asin of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Atan ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Atan() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Atan of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Atan (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Atan(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Atan of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan2">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Atan2 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Atan2() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Atan2 of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan2">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Atan2 (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Atan2(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Atan2 of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BAddBMM">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor BAddBMM (float beta, float alpha, TorchSharp.FloatTensor batch1, TorchSharp.FloatTensor batch2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor BAddBMM(float32 beta, float32 alpha, class TorchSharp.FloatTensor batch1, class TorchSharp.FloatTensor batch2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beta" Type="System.Single" />
        <Parameter Name="alpha" Type="System.Single" />
        <Parameter Name="batch1" Type="TorchSharp.FloatTensor" />
        <Parameter Name="batch2" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="beta">Multiplier for this tensor (β).</param>
        <param name="alpha">Multiplier for batch1xbatch2 (α)</param>
        <param name="batch1">the first batch of matrices to be multiplied</param>
        <param name="batch2">the second batch of matrices to be multiplied</param>
        <summary>
              Performs BAddBMM of the tensor with the provided 
              <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
            </summary>
        <returns>
              β mati+α (batch1i@batch2i)
            </returns>
        <remarks>
            β mati+α (batch1i@batch2i)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BHistc">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor BHistc (long nbins, float minvalue, float maxvalue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor BHistc(int64 nbins, float32 minvalue, float32 maxvalue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nbins" Type="System.Int64" />
        <Parameter Name="minvalue" Type="System.Single" />
        <Parameter Name="maxvalue" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="nbins">The number of bins in the output histogram.</param>
        <param name="minvalue">Only consider values equal to or greater than this.</param>
        <param name="maxvalue">Only consider values equal to or less than this.</param>
        <summary>
              Create a histogram of all tensor elements. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitAnd">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor BitAnd (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor BitAnd(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
              Performs the BitAnd operation on each element of the tensor with the
              <see paramref="value" /> and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>
              If you want to avoid the allocation of a new tensor, you can use the 
              alternative method <see cref="M:PytorchSharp.BitAnd(PytorchSharp.FloatTensor, Float, PytorchSharp.Float)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitAnd">
      <MemberSignature Language="C#" Value="public static void BitAnd (TorchSharp.FloatTensor source, float value, TorchSharp.FloatTensor result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BitAnd(class TorchSharp.FloatTensor source, float32 value, class TorchSharp.FloatTensor result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.FloatTensor" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="result" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="source">Source tensor on which the operation will take place.</param>
        <param name="value">The scalar value that the operation uses.</param>
        <param name="result">The tensor where the result will be placed</param>
        <summary>
              Performs the BitAnd operation on each element of the source with the
              provided scalar.   The result tensor specified as the last parameters
              is resized to match the source.
            </summary>
        <remarks>
               For each element in the <see paramref="source" /> performs the BitAnd operation
               with <see paramref="value" />.   The result is stored in the <see paramref="result" />
               tensor.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CAdd">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor CAdd (float value, TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor CAdd(float32 value, class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="src">To be added.</param>
        <summary>
              Performs the CAdd operation on each element of the tensor with the
              <see paramref="value" /> and returns a new tensor with the result.
              where the result is t[idx] + value * src[idx]
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CappedRandom">
      <MemberSignature Language="C#" Value="public void CappedRandom (TorchSharp.RandomGenerator source, long max);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CappedRandom(class TorchSharp.RandomGenerator source, int64 max) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.RandomGenerator" />
        <Parameter Name="max" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="source">The random generator source</param>
        <param name="max">The upper limit for the values to be generated</param>
        <summary>
             Populates the tensor with random values from 0 to max, using the provided random source generator.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cauchy">
      <MemberSignature Language="C#" Value="public void Cauchy (TorchSharp.RandomGenerator source, double median, double sigma);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Cauchy(class TorchSharp.RandomGenerator source, float64 median, float64 sigma) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.RandomGenerator" />
        <Parameter Name="median" Type="System.Double" />
        <Parameter Name="sigma" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="source">The random generator source</param>
        <param name="median">
        </param>
        <param name="sigma">
        </param>
        <summary>
              Fills the tensor with values according to a Cauchy-Lorentz distribution.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CBitAnd">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor CBitAnd (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor CBitAnd(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an CBitAnd of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CBitOr">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor CBitOr (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor CBitOr(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an CBitOr of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CBitXor">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor CBitXor (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor CBitXor(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an CBitXor of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CDiv">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor CDiv (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor CDiv(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an CDiv of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceil">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Ceil ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Ceil() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Ceil of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceil">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Ceil (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Ceil(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Ceil of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CFMod">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor CFMod (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor CFMod(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an CFMod of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="cinv">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor cinv ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor cinv() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the cinv of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="cinv">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor cinv (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor cinv(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the cinv of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Clamp (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Clamp(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
              Performs the Clamp operation on each element of the tensor with the
              <see paramref="value" /> and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>
              If you want to avoid the allocation of a new tensor, you can use the 
              alternative method <see cref="M:PytorchSharp.Clamp(PytorchSharp.FloatTensor, Float, PytorchSharp.Float)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Clamp (float value1, float value2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Clamp(float32 value1, float32 value2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value1" Type="System.Single" />
        <Parameter Name="value2" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value1">
        </param>
        <param name="value2">
        </param>
        <summary>
              Performs an Clamp of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static void Clamp (TorchSharp.FloatTensor source, float value, TorchSharp.FloatTensor result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Clamp(class TorchSharp.FloatTensor source, float32 value, class TorchSharp.FloatTensor result) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.FloatTensor" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="result" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="source">Source tensor on which the operation will take place.</param>
        <param name="value">The scalar value that the operation uses.</param>
        <param name="result">The tensor where the result will be placed</param>
        <summary>
              Performs the Clamp operation on each element of the source with the
              provided scalar.   The result tensor specified as the last parameters
              is resized to match the source.
            </summary>
        <remarks>
               For each element in the <see paramref="source" /> performs the Clamp operation
               with <see paramref="value" />.   The result is stored in the <see paramref="result" />
               tensor.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClampedRandom">
      <MemberSignature Language="C#" Value="public void ClampedRandom (TorchSharp.RandomGenerator source, long min, long max);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClampedRandom(class TorchSharp.RandomGenerator source, int64 min, int64 max) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.RandomGenerator" />
        <Parameter Name="min" Type="System.Int64" />
        <Parameter Name="max" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="source">The random generator source</param>
        <param name="min">The lower limit for the values to be generated</param>
        <param name="max">The upper limit for the values to be generated</param>
        <summary>
             Populates the tensor with random values from min to max, using the provided random source generator.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a deep clone of the tensor
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CLShift">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor CLShift (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor CLShift(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an CLShift of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CMax">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor CMax (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor CMax(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an CMax of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CMaxValue">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor CMaxValue (float src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor CMaxValue(float32 src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an CMaxValue of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CMin">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor CMin (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor CMin(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an CMin of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CMinValue">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor CMinValue (float src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor CMinValue(float32 src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an CMinValue of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CMul">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor CMul (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor CMul(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an CMul of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Concatenate">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Concatenate (TorchSharp.FloatTensor other, int dimension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Concatenate(class TorchSharp.FloatTensor other, int32 dimension) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="TorchSharp.FloatTensor" />
        <Parameter Name="dimension" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="other">The second tensor.</param>
        <param name="dimension">The dimension along which to concatenate.</param>
        <summary>
              Concatenate tensors along the given dimesion.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public void Copy (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Copy(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">Tensor to copy the data from.</param>
        <summary>
              Copies the elements of a tensor into the original tensor. 
              The shape of the tensors must exactly match or an error will be thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyByte">
      <MemberSignature Language="C#" Value="public void CopyByte (TorchSharp.ByteTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyByte(class TorchSharp.ByteTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.ByteTensor" />
      </Parameters>
      <Docs>
        <param name="src">Tensor to copy the data from.</param>
        <summary>
              Copies the elements of a byte tensor into the original tensor. 
              The shape of the tensors must exactly match or an error will be thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyDouble">
      <MemberSignature Language="C#" Value="public void CopyDouble (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyDouble(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">Tensor to copy the data from.</param>
        <summary>
              Copies the elements of a double tensor into the original tensor. 
              The shape of the tensors must exactly match or an error will be thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyFloat">
      <MemberSignature Language="C#" Value="public void CopyFloat (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFloat(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">Tensor to copy the data from.</param>
        <summary>
              Copies the elements of a float tensor into the original tensor. 
              The shape of the tensors must exactly match or an error will be thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyInt">
      <MemberSignature Language="C#" Value="public void CopyInt (TorchSharp.IntTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyInt(class TorchSharp.IntTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.IntTensor" />
      </Parameters>
      <Docs>
        <param name="src">Tensor to copy the data from.</param>
        <summary>
              Copies the elements of a int tensor into the original tensor. 
              The shape of the tensors must exactly match or an error will be thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyLong">
      <MemberSignature Language="C#" Value="public void CopyLong (TorchSharp.LongTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyLong(class TorchSharp.LongTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.LongTensor" />
      </Parameters>
      <Docs>
        <param name="src">Tensor to copy the data from.</param>
        <summary>
              Copies the elements of a long tensor into the original tensor. 
              The shape of the tensors must exactly match or an error will be thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyShort">
      <MemberSignature Language="C#" Value="public void CopyShort (TorchSharp.ShortTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyShort(class TorchSharp.ShortTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.ShortTensor" />
      </Parameters>
      <Docs>
        <param name="src">Tensor to copy the data from.</param>
        <summary>
              Copies the elements of a short tensor into the original tensor. 
              The shape of the tensors must exactly match or an error will be thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cos">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Cos ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Cos() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Cos of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cos">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Cos (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Cos(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Cos of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Cosh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Cosh() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Cosh of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Cosh (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Cosh(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Cosh of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CPow">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor CPow (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor CPow(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an CPow of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CRemainder">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor CRemainder (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor CRemainder(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an CRemainder of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CrossProduct">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor CrossProduct (TorchSharp.FloatTensor other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor CrossProduct(class TorchSharp.FloatTensor other) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="other">The right-hand-side tensor.</param>
        <summary>
              Computes the cross product of two tensors. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CSub">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor CSub (float value, TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor CSub(float32 value, class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="src">To be added.</param>
        <summary>
              Performs the CSub operation on each element of the tensor with the
              <see paramref="value" /> and returns a new tensor with the result.
              where the result is t[idx] + value * src[idx]
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CumulativeProd">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor CumulativeProd (int dimension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor CumulativeProd(int32 dimension) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dimension">The dimension to process along.</param>
        <summary>
              Computes the cumulative product of all the elements of the tensor along the given dimension. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CumulativeSum">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor CumulativeSum (int dimension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor CumulativeSum(int32 dimension) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dimension">The dimension to process along.</param>
        <summary>
              Computes the cumulative sum of all the elements of the tensor along the given dimension. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public float* Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32* Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single*</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Returns a pointer to the unmanaged data managed by this tensor.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Diagonal">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Diagonal (int k);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Diagonal(int32 k) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="k" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="k">
        </param>
        <summary>
              Gets the diagonal of the tensor. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Digamma">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Digamma ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Digamma() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Digamma of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Digamma">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Digamma (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Digamma(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Digamma of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dimensions">
      <MemberSignature Language="C#" Value="public int Dimensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Dimensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Returns the number of dimensions for this tensor
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DirichletGrad">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor DirichletGrad (TorchSharp.FloatTensor alpha, TorchSharp.FloatTensor total);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor DirichletGrad(class TorchSharp.FloatTensor alpha, class TorchSharp.FloatTensor total) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alpha" Type="TorchSharp.FloatTensor" />
        <Parameter Name="total" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="alpha">
        </param>
        <param name="total">
        </param>
        <summary>
               DirichletGrad
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Releases the tensor and its associated data.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>
              Implements the .NET Dispose pattern.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dist">
      <MemberSignature Language="C#" Value="public double Dist (TorchSharp.FloatTensor other, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 Dist(class TorchSharp.FloatTensor other, float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="TorchSharp.FloatTensor" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="other">The other tensor.</param>
        <param name="value">
        </param>
        <summary>
              Compute the dist of all tensor elements along the given dimension. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Div">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Div (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Div(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
              Performs the Div operation on each element of the tensor with the
              <see paramref="value" /> and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>
              If you want to avoid the allocation of a new tensor, you can use the 
              alternative method <see cref="M:PytorchSharp.Div(PytorchSharp.FloatTensor, Float, PytorchSharp.Float)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Div">
      <MemberSignature Language="C#" Value="public static void Div (TorchSharp.FloatTensor source, float value, TorchSharp.FloatTensor result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Div(class TorchSharp.FloatTensor source, float32 value, class TorchSharp.FloatTensor result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.FloatTensor" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="result" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="source">Source tensor on which the operation will take place.</param>
        <param name="value">The scalar value that the operation uses.</param>
        <param name="result">The tensor where the result will be placed</param>
        <summary>
              Performs the Div operation on each element of the source with the
              provided scalar.   The result tensor specified as the last parameters
              is resized to match the source.
            </summary>
        <remarks>
               For each element in the <see paramref="source" /> performs the Div operation
               with <see paramref="value" />.   The result is stored in the <see paramref="result" />
               tensor.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dot">
      <MemberSignature Language="C#" Value="public double Dot (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 Dot(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Returns the tensor product between this tensor and the provided one
            </summary>
        <returns>
              The dot product
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqTensor">
      <MemberSignature Language="C#" Value="public TorchSharp.ByteTensor EqTensor (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.ByteTensor EqTensor(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.ByteTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an EqTensor of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqTensorT">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor EqTensorT (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor EqTensorT(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an EqTensorT of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equal">
      <MemberSignature Language="C#" Value="public bool Equal (TorchSharp.FloatTensor other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equal(class TorchSharp.FloatTensor other) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="other">The right-hand-side operand.</param>
        <summary>
              Compare the tensor with another for complete equality.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqValue">
      <MemberSignature Language="C#" Value="public TorchSharp.ByteTensor EqValue (float src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.ByteTensor EqValue(float32 src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.ByteTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an EqValue of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqValueT">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor EqValueT (float src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor EqValueT(float32 src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an EqValueT of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Erf">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Erf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Erf() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Erf of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Erf">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Erf (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Erf(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Erf of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Erfc">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Erfc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Erfc() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Erfc of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Erfc">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Erfc (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Erfc(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Erfc of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Erfinv">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Erfinv ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Erfinv() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Erfinv of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Erfinv">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Erfinv (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Erfinv(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Erfinv of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exp">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Exp ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Exp() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Exp of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exp">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Exp (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Exp(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Exp of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expm1">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Expm1 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Expm1() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Expm1 of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expm1">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Expm1 (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Expm1(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Expm1 of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exponential">
      <MemberSignature Language="C#" Value="public void Exponential (TorchSharp.RandomGenerator source, double lambda);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Exponential(class TorchSharp.RandomGenerator source, float64 lambda) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.RandomGenerator" />
        <Parameter Name="lambda" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="source">The random generator source</param>
        <param name="lambda">
        </param>
        <summary>
              Fills the tensor with values according to a exponential distribution.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Eye">
      <MemberSignature Language="C#" Value="public static TorchSharp.FloatTensor Eye (long m, long n);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class TorchSharp.FloatTensor Eye(int64 m, int64 n) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Int64" />
        <Parameter Name="n" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="m">
        </param>
        <param name="n">
        </param>
        <summary>
              Eye. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public void Fill (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Fill(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
             Fills the tensor with the specified value
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~FloatTensor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
             Finalizer for ~FloatTensor
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Floor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Floor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Floor of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Floor (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Floor(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Floor of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fmod">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Fmod (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Fmod(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
              Performs the Fmod operation on each element of the tensor with the
              <see paramref="value" /> and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>
              If you want to avoid the allocation of a new tensor, you can use the 
              alternative method <see cref="M:PytorchSharp.Fmod(PytorchSharp.FloatTensor, Float, PytorchSharp.Float)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fmod">
      <MemberSignature Language="C#" Value="public static void Fmod (TorchSharp.FloatTensor source, float value, TorchSharp.FloatTensor result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fmod(class TorchSharp.FloatTensor source, float32 value, class TorchSharp.FloatTensor result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.FloatTensor" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="result" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="source">Source tensor on which the operation will take place.</param>
        <param name="value">The scalar value that the operation uses.</param>
        <param name="result">The tensor where the result will be placed</param>
        <summary>
              Performs the Fmod operation on each element of the source with the
              provided scalar.   The result tensor specified as the last parameters
              is resized to match the source.
            </summary>
        <remarks>
               For each element in the <see paramref="source" /> performs the Fmod operation
               with <see paramref="value" />.   The result is stored in the <see paramref="result" />
               tensor.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Frac">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Frac ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Frac() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Frac of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Frac">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Frac (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Frac(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Frac of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gather">
      <MemberSignature Language="C#" Value="public void Gather (TorchSharp.FloatTensor src, int dim, TorchSharp.LongTensor index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Gather(class TorchSharp.FloatTensor src, int32 dim, class TorchSharp.LongTensor index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
        <Parameter Name="dim" Type="System.Int32" />
        <Parameter Name="index" Type="TorchSharp.LongTensor" />
      </Parameters>
      <Docs>
        <param name="src">
        </param>
        <param name="dim">
        </param>
        <param name="index">Indices of entries to copy.</param>
        <summary>
              Gather
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Geometric">
      <MemberSignature Language="C#" Value="public void Geometric (TorchSharp.RandomGenerator source, double p);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Geometric(class TorchSharp.RandomGenerator source, float64 p) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.RandomGenerator" />
        <Parameter Name="p" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="source">The random generator source</param>
        <param name="p">
        </param>
        <summary>
             Populates the tensor with random values from 0 to n, using the provided random source generator.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GeTensor">
      <MemberSignature Language="C#" Value="public TorchSharp.ByteTensor GeTensor (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.ByteTensor GeTensor(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.ByteTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an GeTensor of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GeTensorT">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor GeTensorT (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor GeTensorT(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an GeTensorT of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTensorDimension">
      <MemberSignature Language="C#" Value="public long GetTensorDimension (int dim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 GetTensorDimension(int32 dim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dim" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dim">To be added.</param>
        <summary>
             Retrieves the size of the specified dimension in the tensor.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTensorStride">
      <MemberSignature Language="C#" Value="public long GetTensorStride (int dim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 GetTensorStride(int32 dim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dim" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dim">To be added.</param>
        <summary>
             Retrieves the stride of the specified dimension in the tensor.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GeValue">
      <MemberSignature Language="C#" Value="public TorchSharp.ByteTensor GeValue (float src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.ByteTensor GeValue(float32 src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.ByteTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an GeValue of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GeValueT">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor GeValueT (float src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor GeValueT(float32 src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an GeValueT of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GtTensor">
      <MemberSignature Language="C#" Value="public TorchSharp.ByteTensor GtTensor (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.ByteTensor GtTensor(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.ByteTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an GtTensor of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GtTensorT">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor GtTensorT (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor GtTensorT(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an GtTensorT of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GtValue">
      <MemberSignature Language="C#" Value="public TorchSharp.ByteTensor GtValue (float src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.ByteTensor GtValue(float32 src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.ByteTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an GtValue of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GtValueT">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor GtValueT (float src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor GtValueT(float32 src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an GtValueT of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Histc">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Histc (long nbins, float minvalue, float maxvalue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Histc(int64 nbins, float32 minvalue, float32 maxvalue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nbins" Type="System.Int64" />
        <Parameter Name="minvalue" Type="System.Single" />
        <Parameter Name="maxvalue" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="nbins">The number of bins in the output histogram.</param>
        <param name="minvalue">Only consider values equal to or greater than this.</param>
        <param name="maxvalue">Only consider values equal to or less than this.</param>
        <summary>
              Create a histogram of all tensor elements. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexAdd">
      <MemberSignature Language="C#" Value="public void IndexAdd (int dim, TorchSharp.LongTensor index, TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IndexAdd(int32 dim, class TorchSharp.LongTensor index, class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dim" Type="System.Int32" />
        <Parameter Name="index" Type="TorchSharp.LongTensor" />
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="dim">Dimension to select for the add</param>
        <param name="index">Entries to copy</param>
        <param name="src">Tensor to copy the data from.</param>
        <summary>
              Adds the elements of tensor into the original tensor by selecting the indices in the order 
              given in index. The shape of tensor must exactly match the elements indexed or an error will be thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexCopy">
      <MemberSignature Language="C#" Value="public void IndexCopy (int dim, TorchSharp.LongTensor index, TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IndexCopy(int32 dim, class TorchSharp.LongTensor index, class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dim" Type="System.Int32" />
        <Parameter Name="index" Type="TorchSharp.LongTensor" />
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="dim">Dimension to select for the copy</param>
        <param name="index">Entries to copy</param>
        <param name="src">Tensor to copy the data from.</param>
        <summary>
              Copies the elements of tensor into the original tensor by selecting the indices in the order 
              given in index. The shape of tensor must exactly match the elements indexed or an error will be thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexFill">
      <MemberSignature Language="C#" Value="public void IndexFill (int dim, TorchSharp.LongTensor index, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IndexFill(int32 dim, class TorchSharp.LongTensor index, float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dim" Type="System.Int32" />
        <Parameter Name="index" Type="TorchSharp.LongTensor" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dim">Dimension to select for the fill</param>
        <param name="index">Entries to copy</param>
        <param name="value">The value to write.</param>
        <summary>
              Uses the given value to overwrite the original tensor by selecting the indices in the order 
              given in index. The shape of tensor must exactly match the elements indexed or an error will be thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexSelect">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor IndexSelect (int dim, TorchSharp.LongTensor index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor IndexSelect(int32 dim, class TorchSharp.LongTensor index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dim" Type="System.Int32" />
        <Parameter Name="index" Type="TorchSharp.LongTensor" />
      </Parameters>
      <Docs>
        <param name="dim">Dimension to select</param>
        <param name="index">Entries to extract</param>
        <summary>
              Returns a new Tensor which indexes the original Tensor along dimension dim
              using the entries in index.  The returned Tensor has the same number of dimensions as the 
              original Tensor. The returned Tensor does not use the same storage as the original Tensor.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public float this[long x0] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Item(int64)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x0" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="x0">Index to access.</param>
        <summary>
              Access to element at the specified position in the tensor
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public float this[long x0, long x1] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Item(int64, int64)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x0" Type="System.Int64" />
        <Parameter Name="x1" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="x0">Index in the first dimension to access.</param>
        <param name="x1">Index in the second dimension to access.</param>
        <summary>
              Access to element at the specified position in the tensor
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public float this[long x0, long x1, long x2] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Item(int64, int64, int64)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x0" Type="System.Int64" />
        <Parameter Name="x1" Type="System.Int64" />
        <Parameter Name="x2" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="x0">Index in the first dimension to access.</param>
        <param name="x1">Index in the second dimension to access.</param>
        <param name="x2">Index in the third dimension to access.</param>
        <summary>
              Access to element at the specified position in the tensor
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public float this[long x0, long x1, long x2, long x3] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Item(int64, int64, int64, int64)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x0" Type="System.Int64" />
        <Parameter Name="x1" Type="System.Int64" />
        <Parameter Name="x2" Type="System.Int64" />
        <Parameter Name="x3" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="x0">Index in the first dimension to access.</param>
        <param name="x1">Index in the second dimension to access.</param>
        <param name="x2">Index in the third dimension to access.</param>
        <param name="x3">Index in the fourth dimension to access.</param>
        <summary>
              Access to element at the specified position in the tensor
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KthValue">
      <MemberSignature Language="C#" Value="public Tuple&lt;TorchSharp.FloatTensor,TorchSharp.LongTensor&gt; KthValue (long k, int dimension, bool keepdim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Tuple`2&lt;class TorchSharp.FloatTensor, class TorchSharp.LongTensor&gt; KthValue(int64 k, int32 dimension, bool keepdim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;TorchSharp.FloatTensor,TorchSharp.LongTensor&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="k" Type="System.Int64" />
        <Parameter Name="dimension" Type="System.Int32" />
        <Parameter Name="keepdim" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="k">The value for 'k' in 'kth'.</param>
        <param name="dimension">The dimension to process along.</param>
        <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
        <summary>
              Computes the kth value of all the elements of the tensor along the given dimension. 
            </summary>
        <returns>A tuple containing the values and indices of the kth element of each dimension.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LERP">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor LERP (TorchSharp.FloatTensor other, float weight);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor LERP(class TorchSharp.FloatTensor other, float32 weight) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="TorchSharp.FloatTensor" />
        <Parameter Name="weight" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="other">The right-hand-side operand.</param>
        <param name="weight">
        </param>
        <summary>
              LERP
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeTensor">
      <MemberSignature Language="C#" Value="public TorchSharp.ByteTensor LeTensor (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.ByteTensor LeTensor(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.ByteTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an LeTensor of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeTensorT">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor LeTensorT (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor LeTensorT(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an LeTensorT of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeValue">
      <MemberSignature Language="C#" Value="public TorchSharp.ByteTensor LeValue (float src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.ByteTensor LeValue(float32 src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.ByteTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an LeValue of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeValueT">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor LeValueT (float src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor LeValueT(float32 src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an LeValueT of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lgamma">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Lgamma ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Lgamma() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Lgamma of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lgamma">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Lgamma (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Lgamma(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Lgamma of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Linspace">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Linspace (float a, float b, long n);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Linspace(float32 a, float32 b, int64 n) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Single" />
        <Parameter Name="b" Type="System.Single" />
        <Parameter Name="n" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="a">
        </param>
        <param name="b">
        </param>
        <param name="n">
        </param>
        <summary>
              Performs Linspace of the tensor with the provided 
              <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Log ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Log() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Log of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Log (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Log(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Log of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Log10 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Log10() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Log10 of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Log10 (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Log10(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Log10 of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log1p">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Log1p ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Log1p() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Log1p of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log1p">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Log1p (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Log1p(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Log1p of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log2">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Log2 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Log2() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Log2 of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log2">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Log2 (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Log2(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Log2 of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNormal">
      <MemberSignature Language="C#" Value="public void LogNormal (TorchSharp.RandomGenerator source, double mean, double stdv);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LogNormal(class TorchSharp.RandomGenerator source, float64 mean, float64 stdv) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.RandomGenerator" />
        <Parameter Name="mean" Type="System.Double" />
        <Parameter Name="stdv" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="source">The random generator source</param>
        <param name="mean">The mean of the distribution.</param>
        <param name="stdv">The standard deviation of the distribution.</param>
        <summary>
              Fills the tensor with values according to a log-normal distribution.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Logspace">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Logspace (float a, float b, long n);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Logspace(float32 a, float32 b, int64 n) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Single" />
        <Parameter Name="b" Type="System.Single" />
        <Parameter Name="n" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="a">
        </param>
        <param name="b">
        </param>
        <param name="n">
        </param>
        <summary>
              Performs Logspace of the tensor with the provided 
              <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LShift">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor LShift (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor LShift(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
              Performs the LShift operation on each element of the tensor with the
              <see paramref="value" /> and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>
              If you want to avoid the allocation of a new tensor, you can use the 
              alternative method <see cref="M:PytorchSharp.LShift(PytorchSharp.FloatTensor, Float, PytorchSharp.Float)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LShift">
      <MemberSignature Language="C#" Value="public static void LShift (TorchSharp.FloatTensor source, float value, TorchSharp.FloatTensor result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LShift(class TorchSharp.FloatTensor source, float32 value, class TorchSharp.FloatTensor result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.FloatTensor" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="result" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="source">Source tensor on which the operation will take place.</param>
        <param name="value">The scalar value that the operation uses.</param>
        <param name="result">The tensor where the result will be placed</param>
        <summary>
              Performs the LShift operation on each element of the source with the
              provided scalar.   The result tensor specified as the last parameters
              is resized to match the source.
            </summary>
        <remarks>
               For each element in the <see paramref="source" /> performs the LShift operation
               with <see paramref="value" />.   The result is stored in the <see paramref="result" />
               tensor.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LtTensor">
      <MemberSignature Language="C#" Value="public TorchSharp.ByteTensor LtTensor (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.ByteTensor LtTensor(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.ByteTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an LtTensor of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LtTensorT">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor LtTensorT (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor LtTensorT(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an LtTensorT of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LtValue">
      <MemberSignature Language="C#" Value="public TorchSharp.ByteTensor LtValue (float src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.ByteTensor LtValue(float32 src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.ByteTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an LtValue of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LtValueT">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor LtValueT (float src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor LtValueT(float32 src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an LtValueT of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaskedCopy">
      <MemberSignature Language="C#" Value="public void MaskedCopy (TorchSharp.ByteTensor mask, TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MaskedCopy(class TorchSharp.ByteTensor mask, class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mask" Type="TorchSharp.ByteTensor" />
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="mask">A byte tensor with values 0 or 1 indicating the locations where in the destination the value should be filled.</param>
        <param name="src">The source tensor.</param>
        <summary>
             Copies elements from the source tensor to the locations indicated by the mask.
            </summary>
        <remarks>
             There must be at least as many elements in the source tensor as there are 1s in the mask.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaskedFill">
      <MemberSignature Language="C#" Value="public void MaskedFill (TorchSharp.ByteTensor mask, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MaskedFill(class TorchSharp.ByteTensor mask, float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mask" Type="TorchSharp.ByteTensor" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="mask">A byte tensor with values 0 or 1 indicating the locations where the value should be filled.</param>
        <param name="value">The value to write at the indicated locations.</param>
        <summary>
             Fills the tensor with the specified value at the locations indicated by the mask.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaskedSelect">
      <MemberSignature Language="C#" Value="public void MaskedSelect (TorchSharp.ByteTensor mask, TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MaskedSelect(class TorchSharp.ByteTensor mask, class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mask" Type="TorchSharp.ByteTensor" />
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="mask">A byte tensor with values 0 or 1 indicating the locations where in the source the value should be fetched.</param>
        <param name="src">The source tensor.</param>
        <summary>
             Copies elements from the source tensor at the locations indicated by the mask.
            </summary>
        <remarks>
             There will be as many elements in the tensor as there are 1s in the mask.
             There must be at least as many elements in the source tensor as there are 1s in the mask.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Match (TorchSharp.FloatTensor m2, float gain);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Match(class TorchSharp.FloatTensor m2, float32 gain) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m2" Type="TorchSharp.FloatTensor" />
        <Parameter Name="gain" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="m2">
        </param>
        <param name="gain">
        </param>
        <summary>
              Match
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public Tuple&lt;TorchSharp.FloatTensor,TorchSharp.LongTensor&gt; Max (int dimension, bool keepdim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Tuple`2&lt;class TorchSharp.FloatTensor, class TorchSharp.LongTensor&gt; Max(int32 dimension, bool keepdim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;TorchSharp.FloatTensor,TorchSharp.LongTensor&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
        <Parameter Name="keepdim" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dimension">The dimension to process along.</param>
        <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
        <summary>
              Computes the max of all the elements of the tensor along the given dimension. 
            </summary>
        <returns>A tuple containing the values and indices of the resulting elements.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxAll">
      <MemberSignature Language="C#" Value="public float MaxAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 MaxAll() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns the maximum value of the elements in the tensor.
            </summary>
        <returns>
              The maximum value of the tensor.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Mean">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Mean (int dimension, bool keepdim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Mean(int32 dimension, bool keepdim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
        <Parameter Name="keepdim" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dimension">The dimension to process along.</param>
        <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
        <summary>
              Compute the mean of all tensor elements along the given dimension. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MeanAll">
      <MemberSignature Language="C#" Value="public double MeanAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 MeanAll() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Compute the mean of all tensor elements. 
            </summary>
        <returns>
              The mean of the tensor.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Median">
      <MemberSignature Language="C#" Value="public Tuple&lt;TorchSharp.FloatTensor,TorchSharp.LongTensor&gt; Median (int dimension, bool keepdim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Tuple`2&lt;class TorchSharp.FloatTensor, class TorchSharp.LongTensor&gt; Median(int32 dimension, bool keepdim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;TorchSharp.FloatTensor,TorchSharp.LongTensor&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
        <Parameter Name="keepdim" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dimension">The dimension to process along.</param>
        <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
        <summary>
              Computes the median of all the elements of the tensor along the given dimension. 
            </summary>
        <returns>A tuple containing the values and indices of the resulting elements.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MedianAll">
      <MemberSignature Language="C#" Value="public float MedianAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 MedianAll() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns the median of the elements in the tensor.
            </summary>
        <returns>
              The median of the tensor.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public Tuple&lt;TorchSharp.FloatTensor,TorchSharp.LongTensor&gt; Min (int dimension, bool keepdim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Tuple`2&lt;class TorchSharp.FloatTensor, class TorchSharp.LongTensor&gt; Min(int32 dimension, bool keepdim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;TorchSharp.FloatTensor,TorchSharp.LongTensor&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
        <Parameter Name="keepdim" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dimension">The dimension to process along.</param>
        <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
        <summary>
              Computes the min of all the elements of the tensor along the given dimension. 
            </summary>
        <returns>A tuple containing the values and indices of the resulting elements.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinAll">
      <MemberSignature Language="C#" Value="public float MinAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 MinAll() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns the minimum value of the elements in the tensor.
            </summary>
        <returns>
              The minimum value of the tensor.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public Tuple&lt;TorchSharp.FloatTensor,TorchSharp.LongTensor&gt; Mode (int dimension, bool keepdim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Tuple`2&lt;class TorchSharp.FloatTensor, class TorchSharp.LongTensor&gt; Mode(int32 dimension, bool keepdim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;TorchSharp.FloatTensor,TorchSharp.LongTensor&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
        <Parameter Name="keepdim" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dimension">The dimension to process along.</param>
        <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
        <summary>
              Computes the mode of all the elements of the tensor along the given dimension. 
            </summary>
        <returns>A tuple containing the values and indices of the resulting elements.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Mul (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Mul(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
              Performs the Mul operation on each element of the tensor with the
              <see paramref="value" /> and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>
              If you want to avoid the allocation of a new tensor, you can use the 
              alternative method <see cref="M:PytorchSharp.Mul(PytorchSharp.FloatTensor, Float, PytorchSharp.Float)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul">
      <MemberSignature Language="C#" Value="public static void Mul (TorchSharp.FloatTensor source, float value, TorchSharp.FloatTensor result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Mul(class TorchSharp.FloatTensor source, float32 value, class TorchSharp.FloatTensor result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.FloatTensor" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="result" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="source">Source tensor on which the operation will take place.</param>
        <param name="value">The scalar value that the operation uses.</param>
        <param name="result">The tensor where the result will be placed</param>
        <summary>
              Performs the Mul operation on each element of the source with the
              provided scalar.   The result tensor specified as the last parameters
              is resized to match the source.
            </summary>
        <remarks>
               For each element in the <see paramref="source" /> performs the Mul operation
               with <see paramref="value" />.   The result is stored in the <see paramref="result" />
               tensor.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Multinomial">
      <MemberSignature Language="C#" Value="public void Multinomial (TorchSharp.RandomGenerator source, TorchSharp.FloatTensor prob_dist, int n_sample, int with_replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Multinomial(class TorchSharp.RandomGenerator source, class TorchSharp.FloatTensor prob_dist, int32 n_sample, int32 with_replacement) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.RandomGenerator" />
        <Parameter Name="prob_dist" Type="TorchSharp.FloatTensor" />
        <Parameter Name="n_sample" Type="System.Int32" />
        <Parameter Name="with_replacement" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">The random generator source</param>
        <param name="prob_dist">The probability for each bucket.</param>
        <param name="n_sample">The number of samples to generate.</param>
        <param name="with_replacement">
        </param>
        <summary>
              Fills the tensor with values according to a multinomial distribution.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Narrow">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Narrow (int dim, long firstIndex, long size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Narrow(int32 dim, int64 firstIndex, int64 size) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dim" Type="System.Int32" />
        <Parameter Name="firstIndex" Type="System.Int64" />
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dim">The dimension to narrow</param>
        <param name="firstIndex">Initial index to narrow</param>
        <param name="size">Number of elements</param>
        <summary>
            Returns a new Tensor which is a narrowed version of the current one: the dimension dim is narrowed from firstIndexto firstIndex+size-1.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="neg">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor neg ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor neg() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the neg of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="neg">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor neg (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor neg(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the neg of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NeTensor">
      <MemberSignature Language="C#" Value="public TorchSharp.ByteTensor NeTensor (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.ByteTensor NeTensor(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.ByteTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an NeTensor of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NeTensorT">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor NeTensorT (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor NeTensorT(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an NeTensorT of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NeValue">
      <MemberSignature Language="C#" Value="public TorchSharp.ByteTensor NeValue (float src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.ByteTensor NeValue(float32 src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.ByteTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an NeValue of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NeValueT">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor NeValueT (float src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor NeValueT(float32 src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an NeValueT of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewWithStorage1d">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor NewWithStorage1d (IntPtr offset, long size, long stride);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor NewWithStorage1d(native int offset, int64 size, int64 stride) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.IntPtr" />
        <Parameter Name="size" Type="System.Int64" />
        <Parameter Name="stride" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param>
        <param name="size">Size of the first dimension.</param>
        <param name="stride">Stride of the first dimension.</param>
        <summary>
              Access to element at the specified position in the tensor
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewWithStorage2d">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor NewWithStorage2d (IntPtr offset, long size0, long stride0, long size1, long stride1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor NewWithStorage2d(native int offset, int64 size0, int64 stride0, int64 size1, int64 stride1) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.IntPtr" />
        <Parameter Name="size0" Type="System.Int64" />
        <Parameter Name="stride0" Type="System.Int64" />
        <Parameter Name="size1" Type="System.Int64" />
        <Parameter Name="stride1" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param>
        <param name="size0">Size of the first dimension.</param>
        <param name="stride0">Stride of the first dimension.</param>
        <param name="size1">Size of the second dimension.</param>
        <param name="stride1">Stride of the second dimension.</param>
        <summary>
              Access to element at the specified position in the tensor
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewWithStorage3d">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor NewWithStorage3d (IntPtr offset, long size0, long stride0, long size1, long stride1, long size2, long stride2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor NewWithStorage3d(native int offset, int64 size0, int64 stride0, int64 size1, int64 stride1, int64 size2, int64 stride2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.IntPtr" />
        <Parameter Name="size0" Type="System.Int64" />
        <Parameter Name="stride0" Type="System.Int64" />
        <Parameter Name="size1" Type="System.Int64" />
        <Parameter Name="stride1" Type="System.Int64" />
        <Parameter Name="size2" Type="System.Int64" />
        <Parameter Name="stride2" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param>
        <param name="size0">Size of the first dimension.</param>
        <param name="stride0">Stride of the first dimension.</param>
        <param name="size1">Size of the second dimension.</param>
        <param name="stride1">Stride of the second dimension.</param>
        <param name="size2">Size of the third dimension.</param>
        <param name="stride2">Stride of the third dimension.</param>
        <summary>
              Access to element at the specified position in the tensor
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewWithStorage4d">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor NewWithStorage4d (IntPtr offset, long size0, long stride0, long size1, long stride1, long size2, long stride2, long size3, long stride3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor NewWithStorage4d(native int offset, int64 size0, int64 stride0, int64 size1, int64 stride1, int64 size2, int64 stride2, int64 size3, int64 stride3) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.IntPtr" />
        <Parameter Name="size0" Type="System.Int64" />
        <Parameter Name="stride0" Type="System.Int64" />
        <Parameter Name="size1" Type="System.Int64" />
        <Parameter Name="stride1" Type="System.Int64" />
        <Parameter Name="size2" Type="System.Int64" />
        <Parameter Name="stride2" Type="System.Int64" />
        <Parameter Name="size3" Type="System.Int64" />
        <Parameter Name="stride3" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param>
        <param name="size0">Size of the first dimension.</param>
        <param name="stride0">Stride of the first dimension.</param>
        <param name="size1">Size of the second dimension.</param>
        <param name="stride1">Stride of the second dimension.</param>
        <param name="size2">Size of the third dimension.</param>
        <param name="stride2">Stride of the third dimension.</param>
        <param name="size3">Size of the fourth dimension.</param>
        <param name="stride3">Stride of the fourth dimension.</param>
        <summary>
              Access to element at the specified position in the tensor
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NonZero">
      <MemberSignature Language="C#" Value="public TorchSharp.LongTensor NonZero ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.LongTensor NonZero() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.LongTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
             Finds the indices of all non-zero elements.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Norm (float value, int dimension, bool keepdim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Norm(float32 value, int32 dimension, bool keepdim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="dimension" Type="System.Int32" />
        <Parameter Name="keepdim" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
        </param>
        <param name="dimension">The dimension to process along.</param>
        <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
        <summary>
              Compute the norm of all tensor elements along the given dimension. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Normal">
      <MemberSignature Language="C#" Value="public void Normal (TorchSharp.RandomGenerator source, double mean, double stdv);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Normal(class TorchSharp.RandomGenerator source, float64 mean, float64 stdv) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.RandomGenerator" />
        <Parameter Name="mean" Type="System.Double" />
        <Parameter Name="stdv" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="source">The random generator source</param>
        <param name="mean">The mean of the distribution.</param>
        <param name="stdv">The standard deviation of the distribution.</param>
        <summary>
              Fills the tensor with values according to a normal distribution.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NormAll">
      <MemberSignature Language="C#" Value="public double NormAll (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 NormAll(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">
        </param>
        <summary>
              Compute the norm of all tensor elements. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NormalMeans">
      <MemberSignature Language="C#" Value="public void NormalMeans (TorchSharp.RandomGenerator source, TorchSharp.FloatTensor means, double stdv);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void NormalMeans(class TorchSharp.RandomGenerator source, class TorchSharp.FloatTensor means, float64 stdv) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.RandomGenerator" />
        <Parameter Name="means" Type="TorchSharp.FloatTensor" />
        <Parameter Name="stdv" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="source">The random generator source</param>
        <param name="means">The means of the distribution.</param>
        <param name="stdv">The standard deviation of the distribution.</param>
        <summary>
              Fills the tensor with values according to a normal distribution. This version uses multiple means.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NormalMeansStdvs">
      <MemberSignature Language="C#" Value="public void NormalMeansStdvs (TorchSharp.RandomGenerator source, TorchSharp.FloatTensor means, TorchSharp.FloatTensor stdvs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void NormalMeansStdvs(class TorchSharp.RandomGenerator source, class TorchSharp.FloatTensor means, class TorchSharp.FloatTensor stdvs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.RandomGenerator" />
        <Parameter Name="means" Type="TorchSharp.FloatTensor" />
        <Parameter Name="stdvs" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="source">The random generator source</param>
        <param name="means">The means of the distribution.</param>
        <param name="stdvs">The standards deviation of the distribution.</param>
        <summary>
              Fills the tensor with values according to a normal distribution. This version uses multiple means and standard deviations.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NormalStdvs">
      <MemberSignature Language="C#" Value="public void NormalStdvs (TorchSharp.RandomGenerator source, double mean, TorchSharp.FloatTensor stdvs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void NormalStdvs(class TorchSharp.RandomGenerator source, float64 mean, class TorchSharp.FloatTensor stdvs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.RandomGenerator" />
        <Parameter Name="mean" Type="System.Double" />
        <Parameter Name="stdvs" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="source">The random generator source</param>
        <param name="mean">The mean of the distribution.</param>
        <param name="stdvs">The standard deviations of the distribution.</param>
        <summary>
              Fills the tensor with values according to a normal distribution. This version uses multiple standard deviations.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumElements">
      <MemberSignature Language="C#" Value="public long NumElements ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 NumElements() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
             Get the number of elements in the tensor.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnesLike">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor OnesLike ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor OnesLike() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the OnesLike of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Polygamma">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Polygamma ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Polygamma() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Polygamma of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Polygamma">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Polygamma (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Polygamma(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Polygamma of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pow">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Pow (float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Pow(float32 y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="y">The exponent.</param>
        <summary>
              Returns a new tensor with <see paramref="this" /> raised to the power of <see paramref="y" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prod">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Prod (int dimension, bool keepdim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Prod(int32 dimension, bool keepdim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
        <Parameter Name="keepdim" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dimension">The dimension to process along.</param>
        <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
        <summary>
              Computes the product of all the elements of the tensor along the given dimension. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProdAll">
      <MemberSignature Language="C#" Value="public double ProdAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 ProdAll() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns the product of the elements in the tensor.
            </summary>
        <returns>
              The product of the tensor.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Put">
      <MemberSignature Language="C#" Value="public void Put (TorchSharp.LongTensor index, TorchSharp.FloatTensor src, bool accumulate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Put(class TorchSharp.LongTensor index, class TorchSharp.FloatTensor src, bool accumulate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="TorchSharp.LongTensor" />
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
        <Parameter Name="accumulate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="index">Indices of entries to copy.</param>
        <param name="src">
        </param>
        <param name="accumulate">
        </param>
        <summary>
              Put
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Random">
      <MemberSignature Language="C#" Value="public void Random (long n);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Random(int64 n) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="n">The upper limit for the values to be generated</param>
        <summary>
             Populates the tensor with random values from 0 to n, using a newly initialized Random number geneator.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Random">
      <MemberSignature Language="C#" Value="public void Random (TorchSharp.RandomGenerator source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Random(class TorchSharp.RandomGenerator source) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.RandomGenerator" />
      </Parameters>
      <Docs>
        <param name="source">The random generator source</param>
        <summary>
             Populates the tensor with random values using the provided random source generator.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Random">
      <MemberSignature Language="C#" Value="public void Random (TorchSharp.RandomGenerator source, long n);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Random(class TorchSharp.RandomGenerator source, int64 n) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.RandomGenerator" />
        <Parameter Name="n" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="source">The random generator source</param>
        <param name="n">The upper limit for the values to be generated</param>
        <summary>
             Populates the tensor with random values from 0 to n, using the provided random source generator.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RandPerm">
      <MemberSignature Language="C#" Value="public void RandPerm (TorchSharp.RandomGenerator source, long max);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RandPerm(class TorchSharp.RandomGenerator source, int64 max) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.RandomGenerator" />
        <Parameter Name="max" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="source">The random generator source</param>
        <param name="max">The upper limit for the values to be generated</param>
        <summary>
             Populates the tensor with random values from 0 to n, using the provided random source generator.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Range">
      <MemberSignature Language="C#" Value="public static TorchSharp.FloatTensor Range (double xmin, double xmax, double step);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class TorchSharp.FloatTensor Range(float64 xmin, float64 xmax, float64 step) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmin" Type="System.Double" />
        <Parameter Name="xmax" Type="System.Double" />
        <Parameter Name="step" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="xmin">The lower bound of the range.</param>
        <param name="xmax">The upper bound of the range.</param>
        <param name="step">The value step.</param>
        <summary>
              Create a range spanning from xmin to xmax, with 'step' between each value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remainder">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Remainder (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Remainder(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
              Performs the Remainder operation on each element of the tensor with the
              <see paramref="value" /> and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>
              If you want to avoid the allocation of a new tensor, you can use the 
              alternative method <see cref="M:PytorchSharp.Remainder(PytorchSharp.FloatTensor, Float, PytorchSharp.Float)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remainder">
      <MemberSignature Language="C#" Value="public static void Remainder (TorchSharp.FloatTensor source, float value, TorchSharp.FloatTensor result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Remainder(class TorchSharp.FloatTensor source, float32 value, class TorchSharp.FloatTensor result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.FloatTensor" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="result" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="source">Source tensor on which the operation will take place.</param>
        <param name="value">The scalar value that the operation uses.</param>
        <param name="result">The tensor where the result will be placed</param>
        <summary>
              Performs the Remainder operation on each element of the source with the
              provided scalar.   The result tensor specified as the last parameters
              is resized to match the source.
            </summary>
        <remarks>
               For each element in the <see paramref="source" /> performs the Remainder operation
               with <see paramref="value" />.   The result is stored in the <see paramref="result" />
               tensor.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Renorm">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Renorm (float value, int dimension, float maxnorm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Renorm(float32 value, int32 dimension, float32 maxnorm) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="dimension" Type="System.Int32" />
        <Parameter Name="maxnorm" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">
        </param>
        <param name="dimension">The dimension to process along.</param>
        <param name="maxnorm">
        </param>
        <summary>
              Compute the renorm of all tensor elements along the given dimension. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resize1d">
      <MemberSignature Language="C#" Value="public void Resize1d (long size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resize1d(int64 size) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size">The desired new size for the first dimension of the tensor.</param>
        <summary>
              Resizes the tensor to be one dimensional with the specified size, the contents of the tensor after this are undetermined.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resize2d">
      <MemberSignature Language="C#" Value="public void Resize2d (long size0, long size1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resize2d(int64 size0, int64 size1) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size0" Type="System.Int64" />
        <Parameter Name="size1" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size0">The desired new size for the first dimension of the tensor.</param>
        <param name="size1">The desired new size for the second dimension of the tensor.</param>
        <summary>
              Resizes the tensor to be two dimensional with the specified size, the contents of the tensor after this are undetermined.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resize3d">
      <MemberSignature Language="C#" Value="public void Resize3d (long size0, long size1, long size2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resize3d(int64 size0, int64 size1, int64 size2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size0" Type="System.Int64" />
        <Parameter Name="size1" Type="System.Int64" />
        <Parameter Name="size2" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size0">The desired new size for the first dimension of the tensor.</param>
        <param name="size1">The desired new size for the second dimension of the tensor.</param>
        <param name="size2">The desired new size for the third dimension of the tensor.</param>
        <summary>
              Resizes the tensor to be three dimensional with the specified size, the contents of the tensor after this are undetermined.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resize4d">
      <MemberSignature Language="C#" Value="public void Resize4d (long size0, long size1, long size2, long size3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resize4d(int64 size0, int64 size1, int64 size2, int64 size3) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size0" Type="System.Int64" />
        <Parameter Name="size1" Type="System.Int64" />
        <Parameter Name="size2" Type="System.Int64" />
        <Parameter Name="size3" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size0">The desired new size for the first dimension of the tensor.</param>
        <param name="size1">The desired new size for the second dimension of the tensor.</param>
        <param name="size2">The desired new size for the third dimension of the tensor.</param>
        <param name="size3">The desired new size for the fourth dimension of the tensor.</param>
        <summary>
              Resizes the tensor to be four dimensional with the specified size, the contents of the tensor after this are undetermined.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resize5d">
      <MemberSignature Language="C#" Value="public void Resize5d (long size0, long size1, long size2, long size3, long size4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resize5d(int64 size0, int64 size1, int64 size2, int64 size3, int64 size4) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size0" Type="System.Int64" />
        <Parameter Name="size1" Type="System.Int64" />
        <Parameter Name="size2" Type="System.Int64" />
        <Parameter Name="size3" Type="System.Int64" />
        <Parameter Name="size4" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size0">The desired new size for the first dimension of the tensor.</param>
        <param name="size1">The desired new size for the second dimension of the tensor.</param>
        <param name="size2">The desired new size for the third dimension of the tensor.</param>
        <param name="size3">The desired new size for the fourth dimension of the tensor.</param>
        <param name="size4">The desired new size for the fifth dimension of the tensor.</param>
        <summary>
              Resizes the tensor to be five dimensional with the specified size, the contents of the tensor after this are undetermined.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResizeAs">
      <MemberSignature Language="C#" Value="public void ResizeAs (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResizeAs(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">The source tensor whose shape will be mirrored by this tensor.</param>
        <summary>
              Resizes the tensor to match the dimensions of the specified src tensor, the contents of the tensor after this are undetermined.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Round ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Round() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Round of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Round (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Round(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Round of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RShift">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor RShift (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor RShift(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
              Performs the RShift operation on each element of the tensor with the
              <see paramref="value" /> and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>
              If you want to avoid the allocation of a new tensor, you can use the 
              alternative method <see cref="M:PytorchSharp.RShift(PytorchSharp.FloatTensor, Float, PytorchSharp.Float)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RShift">
      <MemberSignature Language="C#" Value="public static void RShift (TorchSharp.FloatTensor source, float value, TorchSharp.FloatTensor result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RShift(class TorchSharp.FloatTensor source, float32 value, class TorchSharp.FloatTensor result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.FloatTensor" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="result" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="source">Source tensor on which the operation will take place.</param>
        <param name="value">The scalar value that the operation uses.</param>
        <param name="result">The tensor where the result will be placed</param>
        <summary>
              Performs the RShift operation on each element of the source with the
              provided scalar.   The result tensor specified as the last parameters
              is resized to match the source.
            </summary>
        <remarks>
               For each element in the <see paramref="source" /> performs the RShift operation
               with <see paramref="value" />.   The result is stored in the <see paramref="result" />
               tensor.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rsqrt">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Rsqrt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Rsqrt() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Rsqrt of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rsqrt">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Rsqrt (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Rsqrt(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Rsqrt of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scatter">
      <MemberSignature Language="C#" Value="public void Scatter (int dim, TorchSharp.LongTensor index, TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scatter(int32 dim, class TorchSharp.LongTensor index, class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dim" Type="System.Int32" />
        <Parameter Name="index" Type="TorchSharp.LongTensor" />
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="dim">
        </param>
        <param name="index">Indices of entries to copy.</param>
        <param name="src">
        </param>
        <summary>
              Scatter
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScatterAdd">
      <MemberSignature Language="C#" Value="public void ScatterAdd (int dim, TorchSharp.LongTensor index, TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScatterAdd(int32 dim, class TorchSharp.LongTensor index, class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dim" Type="System.Int32" />
        <Parameter Name="index" Type="TorchSharp.LongTensor" />
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="dim">
        </param>
        <param name="index">Indices of entries to copy.</param>
        <param name="src">
        </param>
        <summary>
              ScatterAdd
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScatterFill">
      <MemberSignature Language="C#" Value="public void ScatterFill (int dim, TorchSharp.LongTensor index, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScatterFill(int32 dim, class TorchSharp.LongTensor index, float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dim" Type="System.Int32" />
        <Parameter Name="index" Type="TorchSharp.LongTensor" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dim">
        </param>
        <param name="index">Indices of entries to copy.</param>
        <param name="value">
        </param>
        <summary>
              ScatterAdd
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Select (int dim, long slideIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Select(int32 dim, int64 slideIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dim" Type="System.Int32" />
        <Parameter Name="slideIndex" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dim">Dimension to select</param>
        <param name="slideIndex">Beginning of the tensor slice</param>
        <summary>
              Returns a new Tensor which is a tensor slice at the given index in the dimension dim. 
            </summary>
        <returns>To be added.</returns>
        <remarks>
              The returned tensor has one less dimension: the dimension dim is removed. As a result, it is not possible to select() on a 1D tensor.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public void Set (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Set(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">The source tensor which contains the data..</param>
        <summary>
              The tensor will use the same storage as the provided source, so any changes to that tensor are visible on this one.   
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Shape">
      <MemberSignature Language="C#" Value="public long[] Shape { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64[] Shape" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns the tensor shape, this is an array whose size determines the number of dimensions on the tensor, and each element is the size of the dimension
            </summary>
        <value>To be added.</value>
        <remarks>
                An array of size 0 is used for constants, an array of size 1 is used
                for single-dimension arrays, where the dimension is the value of the
                first element.   And so on.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sigmoid">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Sigmoid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Sigmoid() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Sigmoid of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sigmoid">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Sigmoid (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Sigmoid(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Sigmoid of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Sign ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Sign() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Computes the sign of the tensor. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sin">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Sin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Sin() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Sin of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sin">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Sin (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Sin(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Sin of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Sinh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Sinh() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Sinh of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Sinh (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Sinh(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Sinh of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public Tuple&lt;TorchSharp.FloatTensor,TorchSharp.LongTensor&gt; Sort (int dimension, bool descending);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Tuple`2&lt;class TorchSharp.FloatTensor, class TorchSharp.LongTensor&gt; Sort(int32 dimension, bool descending) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;TorchSharp.FloatTensor,TorchSharp.LongTensor&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
        <Parameter Name="descending" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dimension">The dimension to sort along.</param>
        <param name="descending">0 if ascending, 1 if descending.</param>
        <summary>
              Sorts the elements of the tensor along the given dimension. 
            </summary>
        <returns>A tuple containing the values and indices of the sorted elements.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sqrt">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Sqrt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Sqrt() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Sqrt of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sqrt">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Sqrt (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Sqrt(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Sqrt of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Squeeze">
      <MemberSignature Language="C#" Value="public void Squeeze ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Squeeze() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Squeeze the tensor, i.e. remove all 1-sized dimensions.   
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Squeeze1d">
      <MemberSignature Language="C#" Value="public void Squeeze1d (TorchSharp.FloatTensor src, int dimension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Squeeze1d(class TorchSharp.FloatTensor src, int32 dimension) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
        <Parameter Name="dimension" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="src">The source tensor which contains the data.</param>
        <param name="dimension">The dimension to remove.</param>
        <summary>
              Squeeze the tensor, by removing the specified dimension.   
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Std">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Std (int dimension, bool biased, bool keepdim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Std(int32 dimension, bool biased, bool keepdim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
        <Parameter Name="biased" Type="System.Boolean" />
        <Parameter Name="keepdim" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dimension">The dimension to process along.</param>
        <param name="biased">
        </param>
        <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
        <summary>
              Compute the standard deviation of all tensor elements along the given dimension. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StdAll">
      <MemberSignature Language="C#" Value="public double StdAll (bool biased);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 StdAll(bool biased) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="biased" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="biased">
        </param>
        <summary>
              Compute the standard deviation of all tensor elements. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Storage">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor.FloatStorage Storage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class TorchSharp.FloatTensor/FloatStorage Storage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor+FloatStorage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Returns the associated storage for this tensor
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Sub (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Sub(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
              Performs the Sub operation on each element of the tensor with the
              <see paramref="value" /> and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>
              If you want to avoid the allocation of a new tensor, you can use the 
              alternative method <see cref="M:PytorchSharp.Sub(PytorchSharp.FloatTensor, Float, PytorchSharp.Float)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub">
      <MemberSignature Language="C#" Value="public static void Sub (TorchSharp.FloatTensor source, float value, TorchSharp.FloatTensor result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sub(class TorchSharp.FloatTensor source, float32 value, class TorchSharp.FloatTensor result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.FloatTensor" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="result" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="source">Source tensor on which the operation will take place.</param>
        <param name="value">The scalar value that the operation uses.</param>
        <param name="result">The tensor where the result will be placed</param>
        <summary>
              Performs the Sub operation on each element of the source with the
              provided scalar.   The result tensor specified as the last parameters
              is resized to match the source.
            </summary>
        <remarks>
               For each element in the <see paramref="source" /> performs the Sub operation
               with <see paramref="value" />.   The result is stored in the <see paramref="result" />
               tensor.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubScaled">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor SubScaled (float value1, float value2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor SubScaled(float32 value1, float32 value2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value1" Type="System.Single" />
        <Parameter Name="value2" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value1">
        </param>
        <param name="value2">
        </param>
        <summary>
              Performs an SubScaled of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Sum (int dimension, bool keepdim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Sum(int32 dimension, bool keepdim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
        <Parameter Name="keepdim" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dimension">The dimension to process along.</param>
        <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
        <summary>
              Computes the sum of all the elements of the tensor along the given dimension. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SumAll">
      <MemberSignature Language="C#" Value="public double SumAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 SumAll() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns the sum of the elements in the tensor.
            </summary>
        <returns>
              The sum of the tensor.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Take">
      <MemberSignature Language="C#" Value="public void Take (TorchSharp.FloatTensor src, TorchSharp.LongTensor index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Take(class TorchSharp.FloatTensor src, class TorchSharp.LongTensor index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
        <Parameter Name="index" Type="TorchSharp.LongTensor" />
      </Parameters>
      <Docs>
        <param name="src">
        </param>
        <param name="index">Indices of entries to copy.</param>
        <summary>
              Take
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tan">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Tan ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Tan() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Tan of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tan">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Tan (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Tan(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Tan of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Tanh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Tanh() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Tanh of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Tanh (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Tanh(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Tanh of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TopK">
      <MemberSignature Language="C#" Value="public Tuple&lt;TorchSharp.FloatTensor,TorchSharp.LongTensor&gt; TopK (long k, int dim, int dir, bool sorted);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Tuple`2&lt;class TorchSharp.FloatTensor, class TorchSharp.LongTensor&gt; TopK(int64 k, int32 dim, int32 dir, bool sorted) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;TorchSharp.FloatTensor,TorchSharp.LongTensor&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="k" Type="System.Int64" />
        <Parameter Name="dim" Type="System.Int32" />
        <Parameter Name="dir" Type="System.Int32" />
        <Parameter Name="sorted" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="k">The number of elements to fetch.</param>
        <param name="dim">The dimension along which to sort and find k elements.</param>
        <param name="dir">0 if ascending, 1 if descending.</param>
        <param name="sorted">1 if the result should be sorted, 0 if they should keep their original order.</param>
        <summary>
              Finds the top k of all the elements of the tensor along the given dimension. 
            </summary>
        <returns>A tuple containing the values and indices of the top 'k' elements.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Get a string representation of the tensor.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TPow">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor TPow (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor TPow(float32 x) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">The base.</param>
        <summary>
              Returns a new tensor with <see paramref="x" /> raised to the power of <see paramref="this" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trace">
      <MemberSignature Language="C#" Value="public double Trace ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 Trace() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Computes the trace of the tensor. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Transpose">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Transpose (int dim1, int dim2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Transpose(int32 dim1, int32 dim2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dim1" Type="System.Int32" />
        <Parameter Name="dim2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dim1">First dimension</param>
        <param name="dim2">Second dimension</param>
        <summary>
            Returns a tensor where dimensions dim1 and dim2 have been swapped. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trigamma">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Trigamma ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Trigamma() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Trigamma of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trigamma">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Trigamma (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Trigamma(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Trigamma of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TriL">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor TriL (long k);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor TriL(int64 k) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="k" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="k">
        </param>
        <summary>
              Lower triangle. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TriU">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor TriU (long k);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor TriU(int64 k) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="k" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="k">
        </param>
        <summary>
              Upper triangle. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trunc">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Trunc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Trunc() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Trunc of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trunc">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Trunc (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Trunc(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Trunc of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unfold">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Unfold (int dim, long size, long step);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Unfold(int32 dim, int64 size, int64 step) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dim" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int64" />
        <Parameter Name="step" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dim">
        </param>
        <param name="size">
        </param>
        <param name="step">
        </param>
        <summary>
              Returns a tensor which contains all slices of size size in the dimension dim. Step between two slices is given by step.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Uniform">
      <MemberSignature Language="C#" Value="public void Uniform (TorchSharp.RandomGenerator source, double min, double max);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Uniform(class TorchSharp.RandomGenerator source, float64 min, float64 max) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.RandomGenerator" />
        <Parameter Name="min" Type="System.Double" />
        <Parameter Name="max" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="source">The random generator source</param>
        <param name="min">The lower bound for the random number range.</param>
        <param name="max">The upper bound for the random number range.</param>
        <summary>
              Fills the tensor with values according to a Bernoulli distribution.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unsqueeze1d">
      <MemberSignature Language="C#" Value="public void Unsqueeze1d (TorchSharp.FloatTensor src, int dimension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unsqueeze1d(class TorchSharp.FloatTensor src, int32 dimension) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
        <Parameter Name="dimension" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="src">The source tensor which contains the data.</param>
        <param name="dimension">The dimension to insert.</param>
        <summary>
              Unsqueeze the tensor, by inserting the specified dimension of size 1.   
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Var">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor Var (int dimension, bool biased, bool keepdim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor Var(int32 dimension, bool biased, bool keepdim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
        <Parameter Name="biased" Type="System.Boolean" />
        <Parameter Name="keepdim" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dimension">The dimension to process along.</param>
        <param name="biased">
        </param>
        <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
        <summary>
              Compute the variance of all tensor elements along the given dimension. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VarAll">
      <MemberSignature Language="C#" Value="public double VarAll (bool biased);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 VarAll(bool biased) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="biased" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="biased">
        </param>
        <summary>
              Compute the variance of all tensor elements. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZeroFill">
      <MemberSignature Language="C#" Value="public void ZeroFill ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ZeroFill() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
             Fills the tensor with zeros
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZerosLike">
      <MemberSignature Language="C#" Value="public TorchSharp.FloatTensor ZerosLike ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.FloatTensor ZerosLike() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.FloatTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the ZerosLike of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
