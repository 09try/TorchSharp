### YamlMime:ManagedReference
items:
- uid: TorchSharp.DoubleTensor
  id: DoubleTensor
  children:
  - TorchSharp.DoubleTensor.#ctor
  - TorchSharp.DoubleTensor.#ctor(System.Int64)
  - TorchSharp.DoubleTensor.#ctor(System.Int64,System.Int64)
  - TorchSharp.DoubleTensor.#ctor(System.Int64,System.Int64,System.Int64)
  - TorchSharp.DoubleTensor.#ctor(System.Int64,System.Int64,System.Int64,System.Int64)
  - TorchSharp.DoubleTensor.Abs
  - TorchSharp.DoubleTensor.Abs(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Acos
  - TorchSharp.DoubleTensor.Acos(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Add(System.Double)
  - TorchSharp.DoubleTensor.Add(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.AddBMM(System.Double,System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.AddCDiv(System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.AddCMul(System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.AddMM(System.Double,System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.AddMV(System.Double,System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.AddR(System.Double,System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.AddScaled(System.Double,System.Double)
  - TorchSharp.DoubleTensor.ARange(System.Double,System.Double,System.Double)
  - TorchSharp.DoubleTensor.Asin
  - TorchSharp.DoubleTensor.Asin(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Atan
  - TorchSharp.DoubleTensor.Atan(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Atan2
  - TorchSharp.DoubleTensor.Atan2(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.BAddBMM(System.Double,System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.BHistc(System.Int64,System.Double,System.Double)
  - TorchSharp.DoubleTensor.BitAnd(System.Double)
  - TorchSharp.DoubleTensor.BitAnd(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.CAdd(System.Double,TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.CappedRandom(TorchSharp.RandomGenerator,System.Int64)
  - TorchSharp.DoubleTensor.Cauchy(TorchSharp.RandomGenerator,System.Double,System.Double)
  - TorchSharp.DoubleTensor.CBitAnd(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.CBitOr(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.CBitXor(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.CDiv(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Ceil
  - TorchSharp.DoubleTensor.Ceil(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.CFMod(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.cinv
  - TorchSharp.DoubleTensor.cinv(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Clamp(System.Double)
  - TorchSharp.DoubleTensor.Clamp(System.Double,System.Double)
  - TorchSharp.DoubleTensor.Clamp(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.ClampedRandom(TorchSharp.RandomGenerator,System.Int64,System.Int64)
  - TorchSharp.DoubleTensor.Clone
  - TorchSharp.DoubleTensor.CLShift(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.CMax(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.CMaxValue(System.Double)
  - TorchSharp.DoubleTensor.CMin(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.CMinValue(System.Double)
  - TorchSharp.DoubleTensor.CMul(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Concatenate(TorchSharp.DoubleTensor,System.Int32)
  - TorchSharp.DoubleTensor.Copy(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.CopyByte(TorchSharp.ByteTensor)
  - TorchSharp.DoubleTensor.CopyDouble(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.CopyFloat(TorchSharp.FloatTensor)
  - TorchSharp.DoubleTensor.CopyInt(TorchSharp.IntTensor)
  - TorchSharp.DoubleTensor.CopyLong(TorchSharp.LongTensor)
  - TorchSharp.DoubleTensor.CopyShort(TorchSharp.ShortTensor)
  - TorchSharp.DoubleTensor.Cos
  - TorchSharp.DoubleTensor.Cos(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Cosh
  - TorchSharp.DoubleTensor.Cosh(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.CPow(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.CRemainder(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.CrossProduct(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.CSub(System.Double,TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.CumulativeProd(System.Int32)
  - TorchSharp.DoubleTensor.CumulativeSum(System.Int32)
  - TorchSharp.DoubleTensor.Data
  - TorchSharp.DoubleTensor.Diagonal(System.Int32)
  - TorchSharp.DoubleTensor.Digamma
  - TorchSharp.DoubleTensor.Digamma(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Dimensions
  - TorchSharp.DoubleTensor.DirichletGrad(TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Dispose
  - TorchSharp.DoubleTensor.Dispose(System.Boolean)
  - TorchSharp.DoubleTensor.Dist(TorchSharp.DoubleTensor,System.Double)
  - TorchSharp.DoubleTensor.Div(System.Double)
  - TorchSharp.DoubleTensor.Div(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Dot(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.EqTensor(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.EqTensorT(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Equal(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.EqValue(System.Double)
  - TorchSharp.DoubleTensor.EqValueT(System.Double)
  - TorchSharp.DoubleTensor.Erf
  - TorchSharp.DoubleTensor.Erf(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Erfc
  - TorchSharp.DoubleTensor.Erfc(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Erfinv
  - TorchSharp.DoubleTensor.Erfinv(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Exp
  - TorchSharp.DoubleTensor.Exp(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Expm1
  - TorchSharp.DoubleTensor.Expm1(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Exponential(TorchSharp.RandomGenerator,System.Double)
  - TorchSharp.DoubleTensor.Eye(System.Int64,System.Int64)
  - TorchSharp.DoubleTensor.Fill(System.Double)
  - TorchSharp.DoubleTensor.Finalize
  - TorchSharp.DoubleTensor.Floor
  - TorchSharp.DoubleTensor.Floor(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Fmod(System.Double)
  - TorchSharp.DoubleTensor.Fmod(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Frac
  - TorchSharp.DoubleTensor.Frac(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Gather(TorchSharp.DoubleTensor,System.Int32,TorchSharp.LongTensor)
  - TorchSharp.DoubleTensor.Geometric(TorchSharp.RandomGenerator,System.Double)
  - TorchSharp.DoubleTensor.GeTensor(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.GeTensorT(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.GetTensorDimension(System.Int32)
  - TorchSharp.DoubleTensor.GetTensorStride(System.Int32)
  - TorchSharp.DoubleTensor.GeValue(System.Double)
  - TorchSharp.DoubleTensor.GeValueT(System.Double)
  - TorchSharp.DoubleTensor.GtTensor(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.GtTensorT(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.GtValue(System.Double)
  - TorchSharp.DoubleTensor.GtValueT(System.Double)
  - TorchSharp.DoubleTensor.Histc(System.Int64,System.Double,System.Double)
  - TorchSharp.DoubleTensor.IndexAdd(System.Int32,TorchSharp.LongTensor,TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.IndexCopy(System.Int32,TorchSharp.LongTensor,TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.IndexFill(System.Int32,TorchSharp.LongTensor,System.Double)
  - TorchSharp.DoubleTensor.IndexSelect(System.Int32,TorchSharp.LongTensor)
  - TorchSharp.DoubleTensor.Item(System.Int64)
  - TorchSharp.DoubleTensor.Item(System.Int64,System.Int64)
  - TorchSharp.DoubleTensor.Item(System.Int64,System.Int64,System.Int64)
  - TorchSharp.DoubleTensor.Item(System.Int64,System.Int64,System.Int64,System.Int64)
  - TorchSharp.DoubleTensor.KthValue(System.Int64,System.Int32,System.Boolean)
  - TorchSharp.DoubleTensor.LERP(TorchSharp.DoubleTensor,System.Double)
  - TorchSharp.DoubleTensor.LeTensor(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.LeTensorT(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.LeValue(System.Double)
  - TorchSharp.DoubleTensor.LeValueT(System.Double)
  - TorchSharp.DoubleTensor.Lgamma
  - TorchSharp.DoubleTensor.Lgamma(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Linspace(System.Double,System.Double,System.Int64)
  - TorchSharp.DoubleTensor.Log
  - TorchSharp.DoubleTensor.Log(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Log10
  - TorchSharp.DoubleTensor.Log10(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Log1p
  - TorchSharp.DoubleTensor.Log1p(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Log2
  - TorchSharp.DoubleTensor.Log2(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.LogNormal(TorchSharp.RandomGenerator,System.Double,System.Double)
  - TorchSharp.DoubleTensor.Logspace(System.Double,System.Double,System.Int64)
  - TorchSharp.DoubleTensor.LShift(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.LShift(System.Double)
  - TorchSharp.DoubleTensor.LtTensor(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.LtTensorT(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.LtValue(System.Double)
  - TorchSharp.DoubleTensor.LtValueT(System.Double)
  - TorchSharp.DoubleTensor.MaskedCopy(TorchSharp.ByteTensor,TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.MaskedFill(TorchSharp.ByteTensor,System.Double)
  - TorchSharp.DoubleTensor.MaskedSelect(TorchSharp.ByteTensor,TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Match(TorchSharp.DoubleTensor,System.Double)
  - TorchSharp.DoubleTensor.Max(System.Int32,System.Boolean)
  - TorchSharp.DoubleTensor.MaxAll
  - TorchSharp.DoubleTensor.Mean(System.Int32,System.Boolean)
  - TorchSharp.DoubleTensor.MeanAll
  - TorchSharp.DoubleTensor.Median(System.Int32,System.Boolean)
  - TorchSharp.DoubleTensor.MedianAll
  - TorchSharp.DoubleTensor.Min(System.Int32,System.Boolean)
  - TorchSharp.DoubleTensor.MinAll
  - TorchSharp.DoubleTensor.Mode(System.Int32,System.Boolean)
  - TorchSharp.DoubleTensor.Mul(System.Double)
  - TorchSharp.DoubleTensor.Mul(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Multinomial(TorchSharp.RandomGenerator,TorchSharp.DoubleTensor,System.Int32,System.Int32)
  - TorchSharp.DoubleTensor.Narrow(System.Int32,System.Int64,System.Int64)
  - TorchSharp.DoubleTensor.neg
  - TorchSharp.DoubleTensor.neg(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.NeTensor(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.NeTensorT(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.NeValue(System.Double)
  - TorchSharp.DoubleTensor.NeValueT(System.Double)
  - TorchSharp.DoubleTensor.NewWithStorage1d(System.IntPtr,System.Int64,System.Int64)
  - TorchSharp.DoubleTensor.NewWithStorage2d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64)
  - TorchSharp.DoubleTensor.NewWithStorage3d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
  - TorchSharp.DoubleTensor.NewWithStorage4d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
  - TorchSharp.DoubleTensor.NonZero
  - TorchSharp.DoubleTensor.Norm(System.Double,System.Int32,System.Boolean)
  - TorchSharp.DoubleTensor.Normal(TorchSharp.RandomGenerator,System.Double,System.Double)
  - TorchSharp.DoubleTensor.NormAll(System.Double)
  - TorchSharp.DoubleTensor.NormalMeans(TorchSharp.RandomGenerator,TorchSharp.DoubleTensor,System.Double)
  - TorchSharp.DoubleTensor.NormalMeansStdvs(TorchSharp.RandomGenerator,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.NormalStdvs(TorchSharp.RandomGenerator,System.Double,TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.NumElements
  - TorchSharp.DoubleTensor.OnesLike
  - TorchSharp.DoubleTensor.Polygamma
  - TorchSharp.DoubleTensor.Polygamma(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Pow(System.Double)
  - TorchSharp.DoubleTensor.Prod(System.Int32,System.Boolean)
  - TorchSharp.DoubleTensor.ProdAll
  - TorchSharp.DoubleTensor.Put(TorchSharp.LongTensor,TorchSharp.DoubleTensor,System.Boolean)
  - TorchSharp.DoubleTensor.Random(TorchSharp.RandomGenerator)
  - TorchSharp.DoubleTensor.Random(TorchSharp.RandomGenerator,System.Int64)
  - TorchSharp.DoubleTensor.Random(System.Int64)
  - TorchSharp.DoubleTensor.RandPerm(TorchSharp.RandomGenerator,System.Int64)
  - TorchSharp.DoubleTensor.Range(System.Double,System.Double,System.Double)
  - TorchSharp.DoubleTensor.Remainder(System.Double)
  - TorchSharp.DoubleTensor.Remainder(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Renorm(System.Double,System.Int32,System.Double)
  - TorchSharp.DoubleTensor.Resize1d(System.Int64)
  - TorchSharp.DoubleTensor.Resize2d(System.Int64,System.Int64)
  - TorchSharp.DoubleTensor.Resize3d(System.Int64,System.Int64,System.Int64)
  - TorchSharp.DoubleTensor.Resize4d(System.Int64,System.Int64,System.Int64,System.Int64)
  - TorchSharp.DoubleTensor.Resize5d(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
  - TorchSharp.DoubleTensor.ResizeAs(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Round
  - TorchSharp.DoubleTensor.Round(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.RShift(System.Double)
  - TorchSharp.DoubleTensor.RShift(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Rsqrt(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Rsqrt
  - TorchSharp.DoubleTensor.Scatter(System.Int32,TorchSharp.LongTensor,TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.ScatterAdd(System.Int32,TorchSharp.LongTensor,TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.ScatterFill(System.Int32,TorchSharp.LongTensor,System.Double)
  - TorchSharp.DoubleTensor.Select(System.Int32,System.Int64)
  - TorchSharp.DoubleTensor.Set(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Shape
  - TorchSharp.DoubleTensor.Sigmoid
  - TorchSharp.DoubleTensor.Sigmoid(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Sign
  - TorchSharp.DoubleTensor.Sin
  - TorchSharp.DoubleTensor.Sin(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Sinh
  - TorchSharp.DoubleTensor.Sinh(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Sort(System.Int32,System.Boolean)
  - TorchSharp.DoubleTensor.Sqrt(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Sqrt
  - TorchSharp.DoubleTensor.Squeeze
  - TorchSharp.DoubleTensor.Squeeze1d(TorchSharp.DoubleTensor,System.Int32)
  - TorchSharp.DoubleTensor.Std(System.Int32,System.Boolean,System.Boolean)
  - TorchSharp.DoubleTensor.StdAll(System.Boolean)
  - TorchSharp.DoubleTensor.Storage
  - TorchSharp.DoubleTensor.Sub(System.Double)
  - TorchSharp.DoubleTensor.Sub(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.SubScaled(System.Double,System.Double)
  - TorchSharp.DoubleTensor.Sum(System.Int32,System.Boolean)
  - TorchSharp.DoubleTensor.SumAll
  - TorchSharp.DoubleTensor.Take(TorchSharp.DoubleTensor,TorchSharp.LongTensor)
  - TorchSharp.DoubleTensor.Tan
  - TorchSharp.DoubleTensor.Tan(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Tanh
  - TorchSharp.DoubleTensor.Tanh(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.TopK(System.Int64,System.Int32,System.Int32,System.Boolean)
  - TorchSharp.DoubleTensor.ToString
  - TorchSharp.DoubleTensor.TPow(System.Double)
  - TorchSharp.DoubleTensor.Trace
  - TorchSharp.DoubleTensor.Transpose(System.Int32,System.Int32)
  - TorchSharp.DoubleTensor.Trigamma
  - TorchSharp.DoubleTensor.Trigamma(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.TriL(System.Int64)
  - TorchSharp.DoubleTensor.TriU(System.Int64)
  - TorchSharp.DoubleTensor.Trunc
  - TorchSharp.DoubleTensor.Trunc(TorchSharp.DoubleTensor)
  - TorchSharp.DoubleTensor.Unfold(System.Int32,System.Int64,System.Int64)
  - TorchSharp.DoubleTensor.Uniform(TorchSharp.RandomGenerator,System.Double,System.Double)
  - TorchSharp.DoubleTensor.Unsqueeze1d(TorchSharp.DoubleTensor,System.Int32)
  - TorchSharp.DoubleTensor.Var(System.Int32,System.Boolean,System.Boolean)
  - TorchSharp.DoubleTensor.VarAll(System.Boolean)
  - TorchSharp.DoubleTensor.ZeroFill
  - TorchSharp.DoubleTensor.ZerosLike
  langs:
  - csharp
  name: DoubleTensor
  nameWithType: DoubleTensor
  fullName: TorchSharp.DoubleTensor
  type: Class
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Tensor of type Double.
  remarks: >-
    <p>
                    Use the default constructor to create an empty tensor, or invoke one of the
                    constructors with one (1D), two (2D), three (3D), or four parameters (4D) to x
                    create a tensor for the desired number of dimensions.
                  </p>
  syntax:
    content: 'public class DoubleTensor : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
- uid: TorchSharp.DoubleTensor.#ctor
  id: '#ctor'
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: DoubleTensor()
  nameWithType: DoubleTensor.DoubleTensor()
  fullName: DoubleTensor.DoubleTensor()
  type: Constructor
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Creates an empty tensor.
  syntax:
    content: public DoubleTensor ();
    parameters: []
  overload: TorchSharp.DoubleTensor.#ctor*
  exceptions: []
- uid: TorchSharp.DoubleTensor.#ctor(System.Int64)
  id: '#ctor(System.Int64)'
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: DoubleTensor(Int64)
  nameWithType: DoubleTensor.DoubleTensor(Int64)
  fullName: DoubleTensor.DoubleTensor(Int64)
  type: Constructor
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Creates a 1D tensor of the specified size.
  syntax:
    content: public DoubleTensor (long size0);
    parameters:
    - id: size0
      type: System.Int64
      description: Size for the first dimension.
  overload: TorchSharp.DoubleTensor.#ctor*
  exceptions: []
- uid: TorchSharp.DoubleTensor.#ctor(System.Int64,System.Int64)
  id: '#ctor(System.Int64,System.Int64)'
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: DoubleTensor(Int64, Int64)
  nameWithType: DoubleTensor.DoubleTensor(Int64, Int64)
  fullName: DoubleTensor.DoubleTensor(Int64, Int64)
  type: Constructor
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Creates a 2D tensor of the specified size.
  syntax:
    content: public DoubleTensor (long size0, long size1);
    parameters:
    - id: size0
      type: System.Int64
      description: Size for the first dimension.
    - id: size1
      type: System.Int64
      description: Size for the second dimension.
  overload: TorchSharp.DoubleTensor.#ctor*
  exceptions: []
- uid: TorchSharp.DoubleTensor.#ctor(System.Int64,System.Int64,System.Int64)
  id: '#ctor(System.Int64,System.Int64,System.Int64)'
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: DoubleTensor(Int64, Int64, Int64)
  nameWithType: DoubleTensor.DoubleTensor(Int64, Int64, Int64)
  fullName: DoubleTensor.DoubleTensor(Int64, Int64, Int64)
  type: Constructor
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Creates a 3D tensor of the specified size.
  syntax:
    content: public DoubleTensor (long size0, long size1, long size2);
    parameters:
    - id: size0
      type: System.Int64
      description: Size for the first dimension.
    - id: size1
      type: System.Int64
      description: Size for the second dimension.
    - id: size2
      type: System.Int64
      description: Size for the third dimension.
  overload: TorchSharp.DoubleTensor.#ctor*
  exceptions: []
- uid: TorchSharp.DoubleTensor.#ctor(System.Int64,System.Int64,System.Int64,System.Int64)
  id: '#ctor(System.Int64,System.Int64,System.Int64,System.Int64)'
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: DoubleTensor(Int64, Int64, Int64, Int64)
  nameWithType: DoubleTensor.DoubleTensor(Int64, Int64, Int64, Int64)
  fullName: DoubleTensor.DoubleTensor(Int64, Int64, Int64, Int64)
  type: Constructor
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Creates a 4D tensor of the specified size.
  syntax:
    content: public DoubleTensor (long size0, long size1, long size2, long size3);
    parameters:
    - id: size0
      type: System.Int64
      description: Size for the first dimension.
    - id: size1
      type: System.Int64
      description: Size for the second dimension.
    - id: size2
      type: System.Int64
      description: Size for the third dimension.
    - id: size3
      type: System.Int64
      description: Size for the fourth dimension.
  overload: TorchSharp.DoubleTensor.#ctor*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Abs
  id: Abs
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Abs()
  nameWithType: DoubleTensor.Abs()
  fullName: DoubleTensor.Abs()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the Abs of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Abs ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Abs*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Abs(TorchSharp.DoubleTensor)
  id: Abs(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Abs(DoubleTensor)
  nameWithType: DoubleTensor.Abs(DoubleTensor)
  fullName: DoubleTensor.Abs(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the Abs of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Abs (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Abs*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Acos
  id: Acos
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Acos()
  nameWithType: DoubleTensor.Acos()
  fullName: DoubleTensor.Acos()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the Acos of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Acos ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Acos*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Acos(TorchSharp.DoubleTensor)
  id: Acos(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Acos(DoubleTensor)
  nameWithType: DoubleTensor.Acos(DoubleTensor)
  fullName: DoubleTensor.Acos(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the Acos of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Acos (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Acos*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Add(System.Double)
  id: Add(System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Add(Double)
  nameWithType: DoubleTensor.Add(Double)
  fullName: DoubleTensor.Add(Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the Add operation on each element of the tensor with the
                  <see paramref="value"></see> and returns a new tensor with the result.
  remarks: "If you want to avoid the allocation of a new tensor, you can use the \n              alternative method <xref href=\"PytorchSharp.Add(PytorchSharp.DoubleTensor, Double, PytorchSharp.Double)\"></xref>."
  syntax:
    content: public TorchSharp.DoubleTensor Add (double value);
    parameters:
    - id: value
      type: System.Double
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Add*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Add(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  id: Add(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Add(DoubleTensor, Double, DoubleTensor)
  nameWithType: DoubleTensor.Add(DoubleTensor, Double, DoubleTensor)
  fullName: DoubleTensor.Add(DoubleTensor, Double, DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the Add operation on each element of the source with the
                  provided scalar.   The result tensor specified as the last parameters
                  is resized to match the source.
  remarks: >-
    For each element in the <see paramref="source"></see> performs the Add operation
                   with <see paramref="value"></see>.   The result is stored in the <see paramref="result"></see>
                   tensor.
  syntax:
    content: public static void Add (TorchSharp.DoubleTensor source, double value, TorchSharp.DoubleTensor result);
    parameters:
    - id: source
      type: TorchSharp.DoubleTensor
      description: Source tensor on which the operation will take place.
    - id: value
      type: System.Double
      description: The scalar value that the operation uses.
    - id: result
      type: TorchSharp.DoubleTensor
      description: The tensor where the result will be placed
  overload: TorchSharp.DoubleTensor.Add*
  exceptions: []
- uid: TorchSharp.DoubleTensor.AddBMM(System.Double,System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  id: AddBMM(System.Double,System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: AddBMM(Double, Double, DoubleTensor, DoubleTensor)
  nameWithType: DoubleTensor.AddBMM(Double, Double, DoubleTensor, DoubleTensor)
  fullName: DoubleTensor.AddBMM(Double, Double, DoubleTensor, DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs AddBMM of the tensor with the provided \n              <see paramref=\"src1\"></see> and <see paramref=\"src1\"></see> tensors and returns a new tensor with the result."
  remarks: β mat+α (∑i=0bbatch1i@batch2i)
  syntax:
    content: public TorchSharp.DoubleTensor AddBMM (double beta, double alpha, TorchSharp.DoubleTensor batch1, TorchSharp.DoubleTensor batch2);
    parameters:
    - id: beta
      type: System.Double
      description: Multiplier for this tensor (β).
    - id: alpha
      type: System.Double
      description: Multiplier for batch1xbatch2 (α)
    - id: batch1
      type: TorchSharp.DoubleTensor
      description: the first batch of matrices to be multiplied
    - id: batch2
      type: TorchSharp.DoubleTensor
      description: the second batch of matrices to be multiplied
    return:
      type: TorchSharp.DoubleTensor
      description: β mat+α (∑i=0bbatch1i@batch2i)
  overload: TorchSharp.DoubleTensor.AddBMM*
  exceptions: []
- uid: TorchSharp.DoubleTensor.AddCDiv(System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  id: AddCDiv(System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: AddCDiv(Double, DoubleTensor, DoubleTensor)
  nameWithType: DoubleTensor.AddCDiv(Double, DoubleTensor, DoubleTensor)
  fullName: DoubleTensor.AddCDiv(Double, DoubleTensor, DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs AddCDiv of the tensor with the provided \n              <see paramref=\"src1\"></see> and <see paramref=\"src1\"></see> tensors and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.DoubleTensor AddCDiv (double value, TorchSharp.DoubleTensor src1, TorchSharp.DoubleTensor src2);
    parameters:
    - id: value
      type: System.Double
      description: To be added.
    - id: src1
      type: TorchSharp.DoubleTensor
      description: To be added.
    - id: src2
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.AddCDiv*
  exceptions: []
- uid: TorchSharp.DoubleTensor.AddCMul(System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  id: AddCMul(System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: AddCMul(Double, DoubleTensor, DoubleTensor)
  nameWithType: DoubleTensor.AddCMul(Double, DoubleTensor, DoubleTensor)
  fullName: DoubleTensor.AddCMul(Double, DoubleTensor, DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs AddCMul of the tensor with the provided \n              <see paramref=\"src1\"></see> and <see paramref=\"src1\"></see> tensors and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.DoubleTensor AddCMul (double value, TorchSharp.DoubleTensor src1, TorchSharp.DoubleTensor src2);
    parameters:
    - id: value
      type: System.Double
      description: To be added.
    - id: src1
      type: TorchSharp.DoubleTensor
      description: To be added.
    - id: src2
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.AddCMul*
  exceptions: []
- uid: TorchSharp.DoubleTensor.AddMM(System.Double,System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  id: AddMM(System.Double,System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: AddMM(Double, Double, DoubleTensor, DoubleTensor)
  nameWithType: DoubleTensor.AddMM(Double, Double, DoubleTensor, DoubleTensor)
  fullName: DoubleTensor.AddMM(Double, Double, DoubleTensor, DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs AddMM of the tensor with the provided \n              <see paramref=\"src1\"></see> and <see paramref=\"src1\"></see> tensors and returns a new tensor with the result."
  remarks: β mat+α (mat1i@mat2i)
  syntax:
    content: public TorchSharp.DoubleTensor AddMM (double beta, double alpha, TorchSharp.DoubleTensor mat1, TorchSharp.DoubleTensor mat2);
    parameters:
    - id: beta
      type: System.Double
      description: Multiplier for this tensor (β).
    - id: alpha
      type: System.Double
      description: Multiplier for mat1xmat2 (α)
    - id: mat1
      type: TorchSharp.DoubleTensor
      description: First matrix to  be multiplied
    - id: mat2
      type: TorchSharp.DoubleTensor
      description: Second matrix to  be multiplied
    return:
      type: TorchSharp.DoubleTensor
      description: β mat+α (mat1i@mat2i)
  overload: TorchSharp.DoubleTensor.AddMM*
  exceptions: []
- uid: TorchSharp.DoubleTensor.AddMV(System.Double,System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  id: AddMV(System.Double,System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: AddMV(Double, Double, DoubleTensor, DoubleTensor)
  nameWithType: DoubleTensor.AddMV(Double, Double, DoubleTensor, DoubleTensor)
  fullName: DoubleTensor.AddMV(Double, Double, DoubleTensor, DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs AddMV of the tensor with the provided \n              <see paramref=\"src1\"></see> and <see paramref=\"src1\"></see> tensors and returns a new tensor with the result."
  remarks: β tensor+α (mat@vec)
  syntax:
    content: public TorchSharp.DoubleTensor AddMV (double beta, double alpha, TorchSharp.DoubleTensor mat, TorchSharp.DoubleTensor vec);
    parameters:
    - id: beta
      type: System.Double
      description: Multiplier for this tensor (β).
    - id: alpha
      type: System.Double
      description: Multiplier for matxvec (α)
    - id: mat
      type: TorchSharp.DoubleTensor
      description: Matrix to be multiplied
    - id: vec
      type: TorchSharp.DoubleTensor
      description: Vector to be multiplied
    return:
      type: TorchSharp.DoubleTensor
      description: β tensor+α (mat@vec)
  overload: TorchSharp.DoubleTensor.AddMV*
  exceptions: []
- uid: TorchSharp.DoubleTensor.AddR(System.Double,System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  id: AddR(System.Double,System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: AddR(Double, Double, DoubleTensor, DoubleTensor)
  nameWithType: DoubleTensor.AddR(Double, Double, DoubleTensor, DoubleTensor)
  fullName: DoubleTensor.AddR(Double, Double, DoubleTensor, DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs AddR of the tensor with the provided \n              <see paramref=\"src1\"></see> and <see paramref=\"src1\"></see> tensors and returns a new tensor with the result."
  remarks: β mat+α (vec1⊗vec2)
  syntax:
    content: public TorchSharp.DoubleTensor AddR (double beta, double alpha, TorchSharp.DoubleTensor vec1, TorchSharp.DoubleTensor vec2);
    parameters:
    - id: beta
      type: System.Double
      description: Multiplier for this tensor (β).
    - id: alpha
      type: System.Double
      description: Multiplier for vec1xvec2 (α)
    - id: vec1
      type: TorchSharp.DoubleTensor
      description: the first vector of the outer product
    - id: vec2
      type: TorchSharp.DoubleTensor
      description: the second vector of the outer product
    return:
      type: TorchSharp.DoubleTensor
      description: β mat+α (vec1⊗vec2)
  overload: TorchSharp.DoubleTensor.AddR*
  exceptions: []
- uid: TorchSharp.DoubleTensor.AddScaled(System.Double,System.Double)
  id: AddScaled(System.Double,System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: AddScaled(Double, Double)
  nameWithType: DoubleTensor.AddScaled(Double, Double)
  fullName: DoubleTensor.AddScaled(Double, Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an AddScaled of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.DoubleTensor AddScaled (double value1, double value2);
    parameters:
    - id: value1
      type: System.Double
      description: To be added.
    - id: value2
      type: System.Double
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.AddScaled*
  exceptions: []
- uid: TorchSharp.DoubleTensor.ARange(System.Double,System.Double,System.Double)
  id: ARange(System.Double,System.Double,System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: ARange(Double, Double, Double)
  nameWithType: DoubleTensor.ARange(Double, Double, Double)
  fullName: DoubleTensor.ARange(Double, Double, Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Create a range spanning from xmin to xmax, with 'step' between each value.
  syntax:
    content: public static TorchSharp.DoubleTensor ARange (double xmin, double xmax, double step);
    parameters:
    - id: xmin
      type: System.Double
      description: The lower bound of the range.
    - id: xmax
      type: System.Double
      description: The upper bound of the range.
    - id: step
      type: System.Double
      description: The value step.
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.ARange*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Asin
  id: Asin
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Asin()
  nameWithType: DoubleTensor.Asin()
  fullName: DoubleTensor.Asin()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the Asin of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Asin ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Asin*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Asin(TorchSharp.DoubleTensor)
  id: Asin(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Asin(DoubleTensor)
  nameWithType: DoubleTensor.Asin(DoubleTensor)
  fullName: DoubleTensor.Asin(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the Asin of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Asin (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Asin*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Atan
  id: Atan
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Atan()
  nameWithType: DoubleTensor.Atan()
  fullName: DoubleTensor.Atan()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the Atan of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Atan ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Atan*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Atan(TorchSharp.DoubleTensor)
  id: Atan(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Atan(DoubleTensor)
  nameWithType: DoubleTensor.Atan(DoubleTensor)
  fullName: DoubleTensor.Atan(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the Atan of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Atan (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Atan*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Atan2
  id: Atan2
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Atan2()
  nameWithType: DoubleTensor.Atan2()
  fullName: DoubleTensor.Atan2()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the Atan2 of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Atan2 ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Atan2*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Atan2(TorchSharp.DoubleTensor)
  id: Atan2(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Atan2(DoubleTensor)
  nameWithType: DoubleTensor.Atan2(DoubleTensor)
  fullName: DoubleTensor.Atan2(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the Atan2 of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Atan2 (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Atan2*
  exceptions: []
- uid: TorchSharp.DoubleTensor.BAddBMM(System.Double,System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  id: BAddBMM(System.Double,System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: BAddBMM(Double, Double, DoubleTensor, DoubleTensor)
  nameWithType: DoubleTensor.BAddBMM(Double, Double, DoubleTensor, DoubleTensor)
  fullName: DoubleTensor.BAddBMM(Double, Double, DoubleTensor, DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs BAddBMM of the tensor with the provided \n              <see paramref=\"src1\"></see> and <see paramref=\"src1\"></see> tensors and returns a new tensor with the result."
  remarks: β mati+α (batch1i@batch2i)
  syntax:
    content: public TorchSharp.DoubleTensor BAddBMM (double beta, double alpha, TorchSharp.DoubleTensor batch1, TorchSharp.DoubleTensor batch2);
    parameters:
    - id: beta
      type: System.Double
      description: Multiplier for this tensor (β).
    - id: alpha
      type: System.Double
      description: Multiplier for batch1xbatch2 (α)
    - id: batch1
      type: TorchSharp.DoubleTensor
      description: the first batch of matrices to be multiplied
    - id: batch2
      type: TorchSharp.DoubleTensor
      description: the second batch of matrices to be multiplied
    return:
      type: TorchSharp.DoubleTensor
      description: β mati+α (batch1i@batch2i)
  overload: TorchSharp.DoubleTensor.BAddBMM*
  exceptions: []
- uid: TorchSharp.DoubleTensor.BHistc(System.Int64,System.Double,System.Double)
  id: BHistc(System.Int64,System.Double,System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: BHistc(Int64, Double, Double)
  nameWithType: DoubleTensor.BHistc(Int64, Double, Double)
  fullName: DoubleTensor.BHistc(Int64, Double, Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Create a histogram of all tensor elements.
  syntax:
    content: public TorchSharp.DoubleTensor BHistc (long nbins, double minvalue, double maxvalue);
    parameters:
    - id: nbins
      type: System.Int64
      description: The number of bins in the output histogram.
    - id: minvalue
      type: System.Double
      description: Only consider values equal to or greater than this.
    - id: maxvalue
      type: System.Double
      description: Only consider values equal to or less than this.
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.BHistc*
  exceptions: []
- uid: TorchSharp.DoubleTensor.BitAnd(System.Double)
  id: BitAnd(System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: BitAnd(Double)
  nameWithType: DoubleTensor.BitAnd(Double)
  fullName: DoubleTensor.BitAnd(Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the BitAnd operation on each element of the tensor with the
                  <see paramref="value"></see> and returns a new tensor with the result.
  remarks: "If you want to avoid the allocation of a new tensor, you can use the \n              alternative method <xref href=\"PytorchSharp.BitAnd(PytorchSharp.DoubleTensor, Double, PytorchSharp.Double)\"></xref>."
  syntax:
    content: public TorchSharp.DoubleTensor BitAnd (double value);
    parameters:
    - id: value
      type: System.Double
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.BitAnd*
  exceptions: []
- uid: TorchSharp.DoubleTensor.BitAnd(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  id: BitAnd(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: BitAnd(DoubleTensor, Double, DoubleTensor)
  nameWithType: DoubleTensor.BitAnd(DoubleTensor, Double, DoubleTensor)
  fullName: DoubleTensor.BitAnd(DoubleTensor, Double, DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the BitAnd operation on each element of the source with the
                  provided scalar.   The result tensor specified as the last parameters
                  is resized to match the source.
  remarks: >-
    For each element in the <see paramref="source"></see> performs the BitAnd operation
                   with <see paramref="value"></see>.   The result is stored in the <see paramref="result"></see>
                   tensor.
  syntax:
    content: public static void BitAnd (TorchSharp.DoubleTensor source, double value, TorchSharp.DoubleTensor result);
    parameters:
    - id: source
      type: TorchSharp.DoubleTensor
      description: Source tensor on which the operation will take place.
    - id: value
      type: System.Double
      description: The scalar value that the operation uses.
    - id: result
      type: TorchSharp.DoubleTensor
      description: The tensor where the result will be placed
  overload: TorchSharp.DoubleTensor.BitAnd*
  exceptions: []
- uid: TorchSharp.DoubleTensor.CAdd(System.Double,TorchSharp.DoubleTensor)
  id: CAdd(System.Double,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: CAdd(Double, DoubleTensor)
  nameWithType: DoubleTensor.CAdd(Double, DoubleTensor)
  fullName: DoubleTensor.CAdd(Double, DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the CAdd operation on each element of the tensor with the
                  <see paramref="value"></see> and returns a new tensor with the result.
                  where the result is t[idx] + value * src[idx]
  syntax:
    content: public TorchSharp.DoubleTensor CAdd (double value, TorchSharp.DoubleTensor src);
    parameters:
    - id: value
      type: System.Double
      description: To be added.
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.CAdd*
  exceptions: []
- uid: TorchSharp.DoubleTensor.CappedRandom(TorchSharp.RandomGenerator,System.Int64)
  id: CappedRandom(TorchSharp.RandomGenerator,System.Int64)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: CappedRandom(RandomGenerator, Int64)
  nameWithType: DoubleTensor.CappedRandom(RandomGenerator, Int64)
  fullName: DoubleTensor.CappedRandom(RandomGenerator, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Populates the tensor with random values from 0 to max, using the provided random source generator.
  syntax:
    content: public void CappedRandom (TorchSharp.RandomGenerator source, long max);
    parameters:
    - id: source
      type: TorchSharp.RandomGenerator
      description: The random generator source
    - id: max
      type: System.Int64
      description: The upper limit for the values to be generated
  overload: TorchSharp.DoubleTensor.CappedRandom*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Cauchy(TorchSharp.RandomGenerator,System.Double,System.Double)
  id: Cauchy(TorchSharp.RandomGenerator,System.Double,System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Cauchy(RandomGenerator, Double, Double)
  nameWithType: DoubleTensor.Cauchy(RandomGenerator, Double, Double)
  fullName: DoubleTensor.Cauchy(RandomGenerator, Double, Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Fills the tensor with values according to a Cauchy-Lorentz distribution.
  syntax:
    content: public void Cauchy (TorchSharp.RandomGenerator source, double median, double sigma);
    parameters:
    - id: source
      type: TorchSharp.RandomGenerator
      description: The random generator source
    - id: median
      type: System.Double
      description: To be added.
    - id: sigma
      type: System.Double
      description: To be added.
  overload: TorchSharp.DoubleTensor.Cauchy*
  exceptions: []
- uid: TorchSharp.DoubleTensor.CBitAnd(TorchSharp.DoubleTensor)
  id: CBitAnd(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: CBitAnd(DoubleTensor)
  nameWithType: DoubleTensor.CBitAnd(DoubleTensor)
  fullName: DoubleTensor.CBitAnd(DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an CBitAnd of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.DoubleTensor CBitAnd (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.CBitAnd*
  exceptions: []
- uid: TorchSharp.DoubleTensor.CBitOr(TorchSharp.DoubleTensor)
  id: CBitOr(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: CBitOr(DoubleTensor)
  nameWithType: DoubleTensor.CBitOr(DoubleTensor)
  fullName: DoubleTensor.CBitOr(DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an CBitOr of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.DoubleTensor CBitOr (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.CBitOr*
  exceptions: []
- uid: TorchSharp.DoubleTensor.CBitXor(TorchSharp.DoubleTensor)
  id: CBitXor(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: CBitXor(DoubleTensor)
  nameWithType: DoubleTensor.CBitXor(DoubleTensor)
  fullName: DoubleTensor.CBitXor(DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an CBitXor of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.DoubleTensor CBitXor (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.CBitXor*
  exceptions: []
- uid: TorchSharp.DoubleTensor.CDiv(TorchSharp.DoubleTensor)
  id: CDiv(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: CDiv(DoubleTensor)
  nameWithType: DoubleTensor.CDiv(DoubleTensor)
  fullName: DoubleTensor.CDiv(DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an CDiv of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.DoubleTensor CDiv (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.CDiv*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Ceil
  id: Ceil
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Ceil()
  nameWithType: DoubleTensor.Ceil()
  fullName: DoubleTensor.Ceil()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the Ceil of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Ceil ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Ceil*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Ceil(TorchSharp.DoubleTensor)
  id: Ceil(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Ceil(DoubleTensor)
  nameWithType: DoubleTensor.Ceil(DoubleTensor)
  fullName: DoubleTensor.Ceil(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the Ceil of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Ceil (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Ceil*
  exceptions: []
- uid: TorchSharp.DoubleTensor.CFMod(TorchSharp.DoubleTensor)
  id: CFMod(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: CFMod(DoubleTensor)
  nameWithType: DoubleTensor.CFMod(DoubleTensor)
  fullName: DoubleTensor.CFMod(DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an CFMod of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.DoubleTensor CFMod (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.CFMod*
  exceptions: []
- uid: TorchSharp.DoubleTensor.cinv
  id: cinv
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: cinv()
  nameWithType: DoubleTensor.cinv()
  fullName: DoubleTensor.cinv()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the cinv of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor cinv ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.cinv*
  exceptions: []
- uid: TorchSharp.DoubleTensor.cinv(TorchSharp.DoubleTensor)
  id: cinv(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: cinv(DoubleTensor)
  nameWithType: DoubleTensor.cinv(DoubleTensor)
  fullName: DoubleTensor.cinv(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the cinv of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor cinv (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.cinv*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Clamp(System.Double)
  id: Clamp(System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Clamp(Double)
  nameWithType: DoubleTensor.Clamp(Double)
  fullName: DoubleTensor.Clamp(Double)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: >-
    Performs the Clamp operation on each element of the tensor with the
                  <see paramref="value"></see> and returns a new tensor with the result.
  remarks: "If you want to avoid the allocation of a new tensor, you can use the \n              alternative method <xref href=\"PytorchSharp.Clamp(PytorchSharp.DoubleTensor, Double, PytorchSharp.Double)\"></xref>."
  syntax:
    content: public TorchSharp.DoubleTensor Clamp (double value);
    parameters:
    - id: value
      type: System.Double
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Clamp*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Clamp(System.Double,System.Double)
  id: Clamp(System.Double,System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Clamp(Double, Double)
  nameWithType: DoubleTensor.Clamp(Double, Double)
  fullName: DoubleTensor.Clamp(Double, Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an Clamp of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.DoubleTensor Clamp (double value1, double value2);
    parameters:
    - id: value1
      type: System.Double
      description: To be added.
    - id: value2
      type: System.Double
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Clamp*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Clamp(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  id: Clamp(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Clamp(DoubleTensor, Double, DoubleTensor)
  nameWithType: DoubleTensor.Clamp(DoubleTensor, Double, DoubleTensor)
  fullName: DoubleTensor.Clamp(DoubleTensor, Double, DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: >-
    Performs the Clamp operation on each element of the source with the
                  provided scalar.   The result tensor specified as the last parameters
                  is resized to match the source.
  remarks: >-
    For each element in the <see paramref="source"></see> performs the Clamp operation
                   with <see paramref="value"></see>.   The result is stored in the <see paramref="result"></see>
                   tensor.
  syntax:
    content: public static void Clamp (TorchSharp.DoubleTensor source, double value, TorchSharp.DoubleTensor result);
    parameters:
    - id: source
      type: TorchSharp.DoubleTensor
      description: Source tensor on which the operation will take place.
    - id: value
      type: System.Double
      description: The scalar value that the operation uses.
    - id: result
      type: TorchSharp.DoubleTensor
      description: The tensor where the result will be placed
  overload: TorchSharp.DoubleTensor.Clamp*
  exceptions: []
- uid: TorchSharp.DoubleTensor.ClampedRandom(TorchSharp.RandomGenerator,System.Int64,System.Int64)
  id: ClampedRandom(TorchSharp.RandomGenerator,System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: ClampedRandom(RandomGenerator, Int64, Int64)
  nameWithType: DoubleTensor.ClampedRandom(RandomGenerator, Int64, Int64)
  fullName: DoubleTensor.ClampedRandom(RandomGenerator, Int64, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Populates the tensor with random values from min to max, using the provided random source generator.
  syntax:
    content: public void ClampedRandom (TorchSharp.RandomGenerator source, long min, long max);
    parameters:
    - id: source
      type: TorchSharp.RandomGenerator
      description: The random generator source
    - id: min
      type: System.Int64
      description: The lower limit for the values to be generated
    - id: max
      type: System.Int64
      description: The upper limit for the values to be generated
  overload: TorchSharp.DoubleTensor.ClampedRandom*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Clone
  id: Clone
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Clone()
  nameWithType: DoubleTensor.Clone()
  fullName: DoubleTensor.Clone()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a deep clone of the tensor
  syntax:
    content: public TorchSharp.DoubleTensor Clone ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.Clone*
  exceptions: []
- uid: TorchSharp.DoubleTensor.CLShift(TorchSharp.DoubleTensor)
  id: CLShift(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: CLShift(DoubleTensor)
  nameWithType: DoubleTensor.CLShift(DoubleTensor)
  fullName: DoubleTensor.CLShift(DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an CLShift of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.DoubleTensor CLShift (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.CLShift*
  exceptions: []
- uid: TorchSharp.DoubleTensor.CMax(TorchSharp.DoubleTensor)
  id: CMax(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: CMax(DoubleTensor)
  nameWithType: DoubleTensor.CMax(DoubleTensor)
  fullName: DoubleTensor.CMax(DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an CMax of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.DoubleTensor CMax (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.CMax*
  exceptions: []
- uid: TorchSharp.DoubleTensor.CMaxValue(System.Double)
  id: CMaxValue(System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: CMaxValue(Double)
  nameWithType: DoubleTensor.CMaxValue(Double)
  fullName: DoubleTensor.CMaxValue(Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an CMaxValue of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.DoubleTensor CMaxValue (double src);
    parameters:
    - id: src
      type: System.Double
      description: The right-hand-side operand.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.CMaxValue*
  exceptions: []
- uid: TorchSharp.DoubleTensor.CMin(TorchSharp.DoubleTensor)
  id: CMin(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: CMin(DoubleTensor)
  nameWithType: DoubleTensor.CMin(DoubleTensor)
  fullName: DoubleTensor.CMin(DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an CMin of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.DoubleTensor CMin (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.CMin*
  exceptions: []
- uid: TorchSharp.DoubleTensor.CMinValue(System.Double)
  id: CMinValue(System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: CMinValue(Double)
  nameWithType: DoubleTensor.CMinValue(Double)
  fullName: DoubleTensor.CMinValue(Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an CMinValue of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.DoubleTensor CMinValue (double src);
    parameters:
    - id: src
      type: System.Double
      description: The right-hand-side operand.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.CMinValue*
  exceptions: []
- uid: TorchSharp.DoubleTensor.CMul(TorchSharp.DoubleTensor)
  id: CMul(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: CMul(DoubleTensor)
  nameWithType: DoubleTensor.CMul(DoubleTensor)
  fullName: DoubleTensor.CMul(DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an CMul of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.DoubleTensor CMul (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.CMul*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Concatenate(TorchSharp.DoubleTensor,System.Int32)
  id: Concatenate(TorchSharp.DoubleTensor,System.Int32)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Concatenate(DoubleTensor, Int32)
  nameWithType: DoubleTensor.Concatenate(DoubleTensor, Int32)
  fullName: DoubleTensor.Concatenate(DoubleTensor, Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Concatenate tensors along the given dimesion.
  syntax:
    content: public TorchSharp.DoubleTensor Concatenate (TorchSharp.DoubleTensor other, int dimension);
    parameters:
    - id: other
      type: TorchSharp.DoubleTensor
      description: The second tensor.
    - id: dimension
      type: System.Int32
      description: The dimension along which to concatenate.
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.Concatenate*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Copy(TorchSharp.DoubleTensor)
  id: Copy(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Copy(DoubleTensor)
  nameWithType: DoubleTensor.Copy(DoubleTensor)
  fullName: DoubleTensor.Copy(DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Copies the elements of a tensor into the original tensor. \n              The shape of the tensors must exactly match or an error will be thrown."
  syntax:
    content: public void Copy (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: Tensor to copy the data from.
  overload: TorchSharp.DoubleTensor.Copy*
  exceptions: []
- uid: TorchSharp.DoubleTensor.CopyByte(TorchSharp.ByteTensor)
  id: CopyByte(TorchSharp.ByteTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: CopyByte(ByteTensor)
  nameWithType: DoubleTensor.CopyByte(ByteTensor)
  fullName: DoubleTensor.CopyByte(ByteTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Copies the elements of a byte tensor into the original tensor. \n              The shape of the tensors must exactly match or an error will be thrown."
  syntax:
    content: public void CopyByte (TorchSharp.ByteTensor src);
    parameters:
    - id: src
      type: TorchSharp.ByteTensor
      description: Tensor to copy the data from.
  overload: TorchSharp.DoubleTensor.CopyByte*
  exceptions: []
- uid: TorchSharp.DoubleTensor.CopyDouble(TorchSharp.DoubleTensor)
  id: CopyDouble(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: CopyDouble(DoubleTensor)
  nameWithType: DoubleTensor.CopyDouble(DoubleTensor)
  fullName: DoubleTensor.CopyDouble(DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Copies the elements of a double tensor into the original tensor. \n              The shape of the tensors must exactly match or an error will be thrown."
  syntax:
    content: public void CopyDouble (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: Tensor to copy the data from.
  overload: TorchSharp.DoubleTensor.CopyDouble*
  exceptions: []
- uid: TorchSharp.DoubleTensor.CopyFloat(TorchSharp.FloatTensor)
  id: CopyFloat(TorchSharp.FloatTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: CopyFloat(FloatTensor)
  nameWithType: DoubleTensor.CopyFloat(FloatTensor)
  fullName: DoubleTensor.CopyFloat(FloatTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Copies the elements of a float tensor into the original tensor. \n              The shape of the tensors must exactly match or an error will be thrown."
  syntax:
    content: public void CopyFloat (TorchSharp.FloatTensor src);
    parameters:
    - id: src
      type: TorchSharp.FloatTensor
      description: Tensor to copy the data from.
  overload: TorchSharp.DoubleTensor.CopyFloat*
  exceptions: []
- uid: TorchSharp.DoubleTensor.CopyInt(TorchSharp.IntTensor)
  id: CopyInt(TorchSharp.IntTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: CopyInt(IntTensor)
  nameWithType: DoubleTensor.CopyInt(IntTensor)
  fullName: DoubleTensor.CopyInt(IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Copies the elements of a int tensor into the original tensor. \n              The shape of the tensors must exactly match or an error will be thrown."
  syntax:
    content: public void CopyInt (TorchSharp.IntTensor src);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: Tensor to copy the data from.
  overload: TorchSharp.DoubleTensor.CopyInt*
  exceptions: []
- uid: TorchSharp.DoubleTensor.CopyLong(TorchSharp.LongTensor)
  id: CopyLong(TorchSharp.LongTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: CopyLong(LongTensor)
  nameWithType: DoubleTensor.CopyLong(LongTensor)
  fullName: DoubleTensor.CopyLong(LongTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Copies the elements of a long tensor into the original tensor. \n              The shape of the tensors must exactly match or an error will be thrown."
  syntax:
    content: public void CopyLong (TorchSharp.LongTensor src);
    parameters:
    - id: src
      type: TorchSharp.LongTensor
      description: Tensor to copy the data from.
  overload: TorchSharp.DoubleTensor.CopyLong*
  exceptions: []
- uid: TorchSharp.DoubleTensor.CopyShort(TorchSharp.ShortTensor)
  id: CopyShort(TorchSharp.ShortTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: CopyShort(ShortTensor)
  nameWithType: DoubleTensor.CopyShort(ShortTensor)
  fullName: DoubleTensor.CopyShort(ShortTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Copies the elements of a short tensor into the original tensor. \n              The shape of the tensors must exactly match or an error will be thrown."
  syntax:
    content: public void CopyShort (TorchSharp.ShortTensor src);
    parameters:
    - id: src
      type: TorchSharp.ShortTensor
      description: Tensor to copy the data from.
  overload: TorchSharp.DoubleTensor.CopyShort*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Cos
  id: Cos
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Cos()
  nameWithType: DoubleTensor.Cos()
  fullName: DoubleTensor.Cos()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the Cos of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Cos ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Cos*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Cos(TorchSharp.DoubleTensor)
  id: Cos(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Cos(DoubleTensor)
  nameWithType: DoubleTensor.Cos(DoubleTensor)
  fullName: DoubleTensor.Cos(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the Cos of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Cos (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Cos*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Cosh
  id: Cosh
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Cosh()
  nameWithType: DoubleTensor.Cosh()
  fullName: DoubleTensor.Cosh()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the Cosh of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Cosh ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Cosh*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Cosh(TorchSharp.DoubleTensor)
  id: Cosh(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Cosh(DoubleTensor)
  nameWithType: DoubleTensor.Cosh(DoubleTensor)
  fullName: DoubleTensor.Cosh(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the Cosh of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Cosh (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Cosh*
  exceptions: []
- uid: TorchSharp.DoubleTensor.CPow(TorchSharp.DoubleTensor)
  id: CPow(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: CPow(DoubleTensor)
  nameWithType: DoubleTensor.CPow(DoubleTensor)
  fullName: DoubleTensor.CPow(DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an CPow of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.DoubleTensor CPow (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.CPow*
  exceptions: []
- uid: TorchSharp.DoubleTensor.CRemainder(TorchSharp.DoubleTensor)
  id: CRemainder(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: CRemainder(DoubleTensor)
  nameWithType: DoubleTensor.CRemainder(DoubleTensor)
  fullName: DoubleTensor.CRemainder(DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an CRemainder of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.DoubleTensor CRemainder (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.CRemainder*
  exceptions: []
- uid: TorchSharp.DoubleTensor.CrossProduct(TorchSharp.DoubleTensor)
  id: CrossProduct(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: CrossProduct(DoubleTensor)
  nameWithType: DoubleTensor.CrossProduct(DoubleTensor)
  fullName: DoubleTensor.CrossProduct(DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Computes the cross product of two tensors.
  syntax:
    content: public TorchSharp.DoubleTensor CrossProduct (TorchSharp.DoubleTensor other);
    parameters:
    - id: other
      type: TorchSharp.DoubleTensor
      description: The right-hand-side tensor.
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.CrossProduct*
  exceptions: []
- uid: TorchSharp.DoubleTensor.CSub(System.Double,TorchSharp.DoubleTensor)
  id: CSub(System.Double,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: CSub(Double, DoubleTensor)
  nameWithType: DoubleTensor.CSub(Double, DoubleTensor)
  fullName: DoubleTensor.CSub(Double, DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the CSub operation on each element of the tensor with the
                  <see paramref="value"></see> and returns a new tensor with the result.
                  where the result is t[idx] + value * src[idx]
  syntax:
    content: public TorchSharp.DoubleTensor CSub (double value, TorchSharp.DoubleTensor src);
    parameters:
    - id: value
      type: System.Double
      description: To be added.
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.CSub*
  exceptions: []
- uid: TorchSharp.DoubleTensor.CumulativeProd(System.Int32)
  id: CumulativeProd(System.Int32)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: CumulativeProd(Int32)
  nameWithType: DoubleTensor.CumulativeProd(Int32)
  fullName: DoubleTensor.CumulativeProd(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Computes the cumulative product of all the elements of the tensor along the given dimension.
  syntax:
    content: public TorchSharp.DoubleTensor CumulativeProd (int dimension);
    parameters:
    - id: dimension
      type: System.Int32
      description: The dimension to process along.
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.CumulativeProd*
  exceptions: []
- uid: TorchSharp.DoubleTensor.CumulativeSum(System.Int32)
  id: CumulativeSum(System.Int32)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: CumulativeSum(Int32)
  nameWithType: DoubleTensor.CumulativeSum(Int32)
  fullName: DoubleTensor.CumulativeSum(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Computes the cumulative sum of all the elements of the tensor along the given dimension.
  syntax:
    content: public TorchSharp.DoubleTensor CumulativeSum (int dimension);
    parameters:
    - id: dimension
      type: System.Int32
      description: The dimension to process along.
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.CumulativeSum*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Data
  id: Data
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Data
  nameWithType: DoubleTensor.Data
  fullName: DoubleTensor.Data
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a pointer to the unmanaged data managed by this tensor.
  syntax:
    content: public double* Data { get; }
    return:
      type: System.Double*
      description: To be added.
  overload: TorchSharp.DoubleTensor.Data*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Diagonal(System.Int32)
  id: Diagonal(System.Int32)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Diagonal(Int32)
  nameWithType: DoubleTensor.Diagonal(Int32)
  fullName: DoubleTensor.Diagonal(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Gets the diagonal of the tensor.
  syntax:
    content: public TorchSharp.DoubleTensor Diagonal (int k);
    parameters:
    - id: k
      type: System.Int32
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.Diagonal*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Digamma
  id: Digamma
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Digamma()
  nameWithType: DoubleTensor.Digamma()
  fullName: DoubleTensor.Digamma()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the Digamma of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Digamma ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Digamma*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Digamma(TorchSharp.DoubleTensor)
  id: Digamma(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Digamma(DoubleTensor)
  nameWithType: DoubleTensor.Digamma(DoubleTensor)
  fullName: DoubleTensor.Digamma(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the Digamma of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Digamma (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Digamma*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Dimensions
  id: Dimensions
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Dimensions
  nameWithType: DoubleTensor.Dimensions
  fullName: DoubleTensor.Dimensions
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns the number of dimensions for this tensor
  syntax:
    content: public int Dimensions { get; }
    return:
      type: System.Int32
      description: To be added.
  overload: TorchSharp.DoubleTensor.Dimensions*
  exceptions: []
- uid: TorchSharp.DoubleTensor.DirichletGrad(TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  id: DirichletGrad(TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: DirichletGrad(DoubleTensor, DoubleTensor)
  nameWithType: DoubleTensor.DirichletGrad(DoubleTensor, DoubleTensor)
  fullName: DoubleTensor.DirichletGrad(DoubleTensor, DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: DirichletGrad
  syntax:
    content: public TorchSharp.DoubleTensor DirichletGrad (TorchSharp.DoubleTensor alpha, TorchSharp.DoubleTensor total);
    parameters:
    - id: alpha
      type: TorchSharp.DoubleTensor
      description: To be added.
    - id: total
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.DirichletGrad*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Dispose
  id: Dispose
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Dispose()
  nameWithType: DoubleTensor.Dispose()
  fullName: DoubleTensor.Dispose()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Releases the tensor and its associated data.
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: TorchSharp.DoubleTensor.Dispose*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DoubleTensor.Dispose(Boolean)
  fullName: DoubleTensor.Dispose(Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Implements the .NET Dispose pattern.
  syntax:
    content: protected void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: To be added.
  overload: TorchSharp.DoubleTensor.Dispose*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Dist(TorchSharp.DoubleTensor,System.Double)
  id: Dist(TorchSharp.DoubleTensor,System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Dist(DoubleTensor, Double)
  nameWithType: DoubleTensor.Dist(DoubleTensor, Double)
  fullName: DoubleTensor.Dist(DoubleTensor, Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Compute the dist of all tensor elements along the given dimension.
  syntax:
    content: public double Dist (TorchSharp.DoubleTensor other, double value);
    parameters:
    - id: other
      type: TorchSharp.DoubleTensor
      description: The other tensor.
    - id: value
      type: System.Double
      description: To be added.
    return:
      type: System.Double
      description: To be added.
  overload: TorchSharp.DoubleTensor.Dist*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Div(System.Double)
  id: Div(System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Div(Double)
  nameWithType: DoubleTensor.Div(Double)
  fullName: DoubleTensor.Div(Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the Div operation on each element of the tensor with the
                  <see paramref="value"></see> and returns a new tensor with the result.
  remarks: "If you want to avoid the allocation of a new tensor, you can use the \n              alternative method <xref href=\"PytorchSharp.Div(PytorchSharp.DoubleTensor, Double, PytorchSharp.Double)\"></xref>."
  syntax:
    content: public TorchSharp.DoubleTensor Div (double value);
    parameters:
    - id: value
      type: System.Double
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Div*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Div(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  id: Div(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Div(DoubleTensor, Double, DoubleTensor)
  nameWithType: DoubleTensor.Div(DoubleTensor, Double, DoubleTensor)
  fullName: DoubleTensor.Div(DoubleTensor, Double, DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the Div operation on each element of the source with the
                  provided scalar.   The result tensor specified as the last parameters
                  is resized to match the source.
  remarks: >-
    For each element in the <see paramref="source"></see> performs the Div operation
                   with <see paramref="value"></see>.   The result is stored in the <see paramref="result"></see>
                   tensor.
  syntax:
    content: public static void Div (TorchSharp.DoubleTensor source, double value, TorchSharp.DoubleTensor result);
    parameters:
    - id: source
      type: TorchSharp.DoubleTensor
      description: Source tensor on which the operation will take place.
    - id: value
      type: System.Double
      description: The scalar value that the operation uses.
    - id: result
      type: TorchSharp.DoubleTensor
      description: The tensor where the result will be placed
  overload: TorchSharp.DoubleTensor.Div*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Dot(TorchSharp.DoubleTensor)
  id: Dot(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Dot(DoubleTensor)
  nameWithType: DoubleTensor.Dot(DoubleTensor)
  fullName: DoubleTensor.Dot(DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns the tensor product between this tensor and the provided one
  syntax:
    content: public double Dot (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: The right-hand-side operand.
    return:
      type: System.Double
      description: The dot product
  overload: TorchSharp.DoubleTensor.Dot*
  exceptions: []
- uid: TorchSharp.DoubleTensor.EqTensor(TorchSharp.DoubleTensor)
  id: EqTensor(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: EqTensor(DoubleTensor)
  nameWithType: DoubleTensor.EqTensor(DoubleTensor)
  fullName: DoubleTensor.EqTensor(DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an EqTensor of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.ByteTensor EqTensor (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.ByteTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.EqTensor*
  exceptions: []
- uid: TorchSharp.DoubleTensor.EqTensorT(TorchSharp.DoubleTensor)
  id: EqTensorT(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: EqTensorT(DoubleTensor)
  nameWithType: DoubleTensor.EqTensorT(DoubleTensor)
  fullName: DoubleTensor.EqTensorT(DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an EqTensorT of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.DoubleTensor EqTensorT (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.EqTensorT*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Equal(TorchSharp.DoubleTensor)
  id: Equal(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Equal(DoubleTensor)
  nameWithType: DoubleTensor.Equal(DoubleTensor)
  fullName: DoubleTensor.Equal(DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Compare the tensor with another for complete equality.
  syntax:
    content: public bool Equal (TorchSharp.DoubleTensor other);
    parameters:
    - id: other
      type: TorchSharp.DoubleTensor
      description: The right-hand-side operand.
    return:
      type: System.Boolean
      description: To be added.
  overload: TorchSharp.DoubleTensor.Equal*
  exceptions: []
- uid: TorchSharp.DoubleTensor.EqValue(System.Double)
  id: EqValue(System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: EqValue(Double)
  nameWithType: DoubleTensor.EqValue(Double)
  fullName: DoubleTensor.EqValue(Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an EqValue of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.ByteTensor EqValue (double src);
    parameters:
    - id: src
      type: System.Double
      description: The right-hand-side operand.
    return:
      type: TorchSharp.ByteTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.EqValue*
  exceptions: []
- uid: TorchSharp.DoubleTensor.EqValueT(System.Double)
  id: EqValueT(System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: EqValueT(Double)
  nameWithType: DoubleTensor.EqValueT(Double)
  fullName: DoubleTensor.EqValueT(Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an EqValueT of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.DoubleTensor EqValueT (double src);
    parameters:
    - id: src
      type: System.Double
      description: The right-hand-side operand.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.EqValueT*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Erf
  id: Erf
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Erf()
  nameWithType: DoubleTensor.Erf()
  fullName: DoubleTensor.Erf()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the Erf of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Erf ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Erf*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Erf(TorchSharp.DoubleTensor)
  id: Erf(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Erf(DoubleTensor)
  nameWithType: DoubleTensor.Erf(DoubleTensor)
  fullName: DoubleTensor.Erf(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the Erf of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Erf (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Erf*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Erfc
  id: Erfc
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Erfc()
  nameWithType: DoubleTensor.Erfc()
  fullName: DoubleTensor.Erfc()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the Erfc of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Erfc ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Erfc*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Erfc(TorchSharp.DoubleTensor)
  id: Erfc(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Erfc(DoubleTensor)
  nameWithType: DoubleTensor.Erfc(DoubleTensor)
  fullName: DoubleTensor.Erfc(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the Erfc of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Erfc (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Erfc*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Erfinv
  id: Erfinv
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Erfinv()
  nameWithType: DoubleTensor.Erfinv()
  fullName: DoubleTensor.Erfinv()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the Erfinv of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Erfinv ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Erfinv*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Erfinv(TorchSharp.DoubleTensor)
  id: Erfinv(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Erfinv(DoubleTensor)
  nameWithType: DoubleTensor.Erfinv(DoubleTensor)
  fullName: DoubleTensor.Erfinv(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the Erfinv of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Erfinv (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Erfinv*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Exp
  id: Exp
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Exp()
  nameWithType: DoubleTensor.Exp()
  fullName: DoubleTensor.Exp()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the Exp of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Exp ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Exp*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Exp(TorchSharp.DoubleTensor)
  id: Exp(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Exp(DoubleTensor)
  nameWithType: DoubleTensor.Exp(DoubleTensor)
  fullName: DoubleTensor.Exp(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the Exp of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Exp (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Exp*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Expm1
  id: Expm1
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Expm1()
  nameWithType: DoubleTensor.Expm1()
  fullName: DoubleTensor.Expm1()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the Expm1 of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Expm1 ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Expm1*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Expm1(TorchSharp.DoubleTensor)
  id: Expm1(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Expm1(DoubleTensor)
  nameWithType: DoubleTensor.Expm1(DoubleTensor)
  fullName: DoubleTensor.Expm1(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the Expm1 of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Expm1 (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Expm1*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Exponential(TorchSharp.RandomGenerator,System.Double)
  id: Exponential(TorchSharp.RandomGenerator,System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Exponential(RandomGenerator, Double)
  nameWithType: DoubleTensor.Exponential(RandomGenerator, Double)
  fullName: DoubleTensor.Exponential(RandomGenerator, Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Fills the tensor with values according to a exponential distribution.
  syntax:
    content: public void Exponential (TorchSharp.RandomGenerator source, double lambda);
    parameters:
    - id: source
      type: TorchSharp.RandomGenerator
      description: The random generator source
    - id: lambda
      type: System.Double
      description: To be added.
  overload: TorchSharp.DoubleTensor.Exponential*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Eye(System.Int64,System.Int64)
  id: Eye(System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Eye(Int64, Int64)
  nameWithType: DoubleTensor.Eye(Int64, Int64)
  fullName: DoubleTensor.Eye(Int64, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Eye.
  syntax:
    content: public static TorchSharp.DoubleTensor Eye (long m, long n);
    parameters:
    - id: m
      type: System.Int64
      description: To be added.
    - id: n
      type: System.Int64
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.Eye*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Fill(System.Double)
  id: Fill(System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Fill(Double)
  nameWithType: DoubleTensor.Fill(Double)
  fullName: DoubleTensor.Fill(Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Fills the tensor with the specified value
  syntax:
    content: public void Fill (double value);
    parameters:
    - id: value
      type: System.Double
      description: To be added.
  overload: TorchSharp.DoubleTensor.Fill*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Finalize
  id: Finalize
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Finalize()
  nameWithType: DoubleTensor.Finalize()
  fullName: DoubleTensor.Finalize()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Finalizer for ~DoubleTensor
  syntax:
    content: ~DoubleTensor ();
    parameters: []
  overload: TorchSharp.DoubleTensor.Finalize*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Floor
  id: Floor
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Floor()
  nameWithType: DoubleTensor.Floor()
  fullName: DoubleTensor.Floor()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the Floor of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Floor ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Floor*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Floor(TorchSharp.DoubleTensor)
  id: Floor(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Floor(DoubleTensor)
  nameWithType: DoubleTensor.Floor(DoubleTensor)
  fullName: DoubleTensor.Floor(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the Floor of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Floor (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Floor*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Fmod(System.Double)
  id: Fmod(System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Fmod(Double)
  nameWithType: DoubleTensor.Fmod(Double)
  fullName: DoubleTensor.Fmod(Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the Fmod operation on each element of the tensor with the
                  <see paramref="value"></see> and returns a new tensor with the result.
  remarks: "If you want to avoid the allocation of a new tensor, you can use the \n              alternative method <xref href=\"PytorchSharp.Fmod(PytorchSharp.DoubleTensor, Double, PytorchSharp.Double)\"></xref>."
  syntax:
    content: public TorchSharp.DoubleTensor Fmod (double value);
    parameters:
    - id: value
      type: System.Double
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Fmod*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Fmod(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  id: Fmod(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Fmod(DoubleTensor, Double, DoubleTensor)
  nameWithType: DoubleTensor.Fmod(DoubleTensor, Double, DoubleTensor)
  fullName: DoubleTensor.Fmod(DoubleTensor, Double, DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the Fmod operation on each element of the source with the
                  provided scalar.   The result tensor specified as the last parameters
                  is resized to match the source.
  remarks: >-
    For each element in the <see paramref="source"></see> performs the Fmod operation
                   with <see paramref="value"></see>.   The result is stored in the <see paramref="result"></see>
                   tensor.
  syntax:
    content: public static void Fmod (TorchSharp.DoubleTensor source, double value, TorchSharp.DoubleTensor result);
    parameters:
    - id: source
      type: TorchSharp.DoubleTensor
      description: Source tensor on which the operation will take place.
    - id: value
      type: System.Double
      description: The scalar value that the operation uses.
    - id: result
      type: TorchSharp.DoubleTensor
      description: The tensor where the result will be placed
  overload: TorchSharp.DoubleTensor.Fmod*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Frac
  id: Frac
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Frac()
  nameWithType: DoubleTensor.Frac()
  fullName: DoubleTensor.Frac()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the Frac of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Frac ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Frac*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Frac(TorchSharp.DoubleTensor)
  id: Frac(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Frac(DoubleTensor)
  nameWithType: DoubleTensor.Frac(DoubleTensor)
  fullName: DoubleTensor.Frac(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the Frac of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Frac (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Frac*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Gather(TorchSharp.DoubleTensor,System.Int32,TorchSharp.LongTensor)
  id: Gather(TorchSharp.DoubleTensor,System.Int32,TorchSharp.LongTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Gather(DoubleTensor, Int32, LongTensor)
  nameWithType: DoubleTensor.Gather(DoubleTensor, Int32, LongTensor)
  fullName: DoubleTensor.Gather(DoubleTensor, Int32, LongTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Gather
  syntax:
    content: public void Gather (TorchSharp.DoubleTensor src, int dim, TorchSharp.LongTensor index);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    - id: dim
      type: System.Int32
      description: To be added.
    - id: index
      type: TorchSharp.LongTensor
      description: Indices of entries to copy.
  overload: TorchSharp.DoubleTensor.Gather*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Geometric(TorchSharp.RandomGenerator,System.Double)
  id: Geometric(TorchSharp.RandomGenerator,System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Geometric(RandomGenerator, Double)
  nameWithType: DoubleTensor.Geometric(RandomGenerator, Double)
  fullName: DoubleTensor.Geometric(RandomGenerator, Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Populates the tensor with random values from 0 to n, using the provided random source generator.
  syntax:
    content: public void Geometric (TorchSharp.RandomGenerator source, double p);
    parameters:
    - id: source
      type: TorchSharp.RandomGenerator
      description: The random generator source
    - id: p
      type: System.Double
      description: To be added.
  overload: TorchSharp.DoubleTensor.Geometric*
  exceptions: []
- uid: TorchSharp.DoubleTensor.GeTensor(TorchSharp.DoubleTensor)
  id: GeTensor(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: GeTensor(DoubleTensor)
  nameWithType: DoubleTensor.GeTensor(DoubleTensor)
  fullName: DoubleTensor.GeTensor(DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an GeTensor of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.ByteTensor GeTensor (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.ByteTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.GeTensor*
  exceptions: []
- uid: TorchSharp.DoubleTensor.GeTensorT(TorchSharp.DoubleTensor)
  id: GeTensorT(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: GeTensorT(DoubleTensor)
  nameWithType: DoubleTensor.GeTensorT(DoubleTensor)
  fullName: DoubleTensor.GeTensorT(DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an GeTensorT of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.DoubleTensor GeTensorT (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.GeTensorT*
  exceptions: []
- uid: TorchSharp.DoubleTensor.GetTensorDimension(System.Int32)
  id: GetTensorDimension(System.Int32)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: GetTensorDimension(Int32)
  nameWithType: DoubleTensor.GetTensorDimension(Int32)
  fullName: DoubleTensor.GetTensorDimension(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Retrieves the size of the specified dimension in the tensor.
  syntax:
    content: public long GetTensorDimension (int dim);
    parameters:
    - id: dim
      type: System.Int32
      description: To be added.
    return:
      type: System.Int64
      description: To be added.
  overload: TorchSharp.DoubleTensor.GetTensorDimension*
  exceptions: []
- uid: TorchSharp.DoubleTensor.GetTensorStride(System.Int32)
  id: GetTensorStride(System.Int32)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: GetTensorStride(Int32)
  nameWithType: DoubleTensor.GetTensorStride(Int32)
  fullName: DoubleTensor.GetTensorStride(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Retrieves the stride of the specified dimension in the tensor.
  syntax:
    content: public long GetTensorStride (int dim);
    parameters:
    - id: dim
      type: System.Int32
      description: To be added.
    return:
      type: System.Int64
      description: To be added.
  overload: TorchSharp.DoubleTensor.GetTensorStride*
  exceptions: []
- uid: TorchSharp.DoubleTensor.GeValue(System.Double)
  id: GeValue(System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: GeValue(Double)
  nameWithType: DoubleTensor.GeValue(Double)
  fullName: DoubleTensor.GeValue(Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an GeValue of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.ByteTensor GeValue (double src);
    parameters:
    - id: src
      type: System.Double
      description: The right-hand-side operand.
    return:
      type: TorchSharp.ByteTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.GeValue*
  exceptions: []
- uid: TorchSharp.DoubleTensor.GeValueT(System.Double)
  id: GeValueT(System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: GeValueT(Double)
  nameWithType: DoubleTensor.GeValueT(Double)
  fullName: DoubleTensor.GeValueT(Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an GeValueT of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.DoubleTensor GeValueT (double src);
    parameters:
    - id: src
      type: System.Double
      description: The right-hand-side operand.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.GeValueT*
  exceptions: []
- uid: TorchSharp.DoubleTensor.GtTensor(TorchSharp.DoubleTensor)
  id: GtTensor(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: GtTensor(DoubleTensor)
  nameWithType: DoubleTensor.GtTensor(DoubleTensor)
  fullName: DoubleTensor.GtTensor(DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an GtTensor of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.ByteTensor GtTensor (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.ByteTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.GtTensor*
  exceptions: []
- uid: TorchSharp.DoubleTensor.GtTensorT(TorchSharp.DoubleTensor)
  id: GtTensorT(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: GtTensorT(DoubleTensor)
  nameWithType: DoubleTensor.GtTensorT(DoubleTensor)
  fullName: DoubleTensor.GtTensorT(DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an GtTensorT of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.DoubleTensor GtTensorT (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.GtTensorT*
  exceptions: []
- uid: TorchSharp.DoubleTensor.GtValue(System.Double)
  id: GtValue(System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: GtValue(Double)
  nameWithType: DoubleTensor.GtValue(Double)
  fullName: DoubleTensor.GtValue(Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an GtValue of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.ByteTensor GtValue (double src);
    parameters:
    - id: src
      type: System.Double
      description: The right-hand-side operand.
    return:
      type: TorchSharp.ByteTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.GtValue*
  exceptions: []
- uid: TorchSharp.DoubleTensor.GtValueT(System.Double)
  id: GtValueT(System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: GtValueT(Double)
  nameWithType: DoubleTensor.GtValueT(Double)
  fullName: DoubleTensor.GtValueT(Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an GtValueT of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.DoubleTensor GtValueT (double src);
    parameters:
    - id: src
      type: System.Double
      description: The right-hand-side operand.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.GtValueT*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Histc(System.Int64,System.Double,System.Double)
  id: Histc(System.Int64,System.Double,System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Histc(Int64, Double, Double)
  nameWithType: DoubleTensor.Histc(Int64, Double, Double)
  fullName: DoubleTensor.Histc(Int64, Double, Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Create a histogram of all tensor elements.
  syntax:
    content: public TorchSharp.DoubleTensor Histc (long nbins, double minvalue, double maxvalue);
    parameters:
    - id: nbins
      type: System.Int64
      description: The number of bins in the output histogram.
    - id: minvalue
      type: System.Double
      description: Only consider values equal to or greater than this.
    - id: maxvalue
      type: System.Double
      description: Only consider values equal to or less than this.
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.Histc*
  exceptions: []
- uid: TorchSharp.DoubleTensor.IndexAdd(System.Int32,TorchSharp.LongTensor,TorchSharp.DoubleTensor)
  id: IndexAdd(System.Int32,TorchSharp.LongTensor,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: IndexAdd(Int32, LongTensor, DoubleTensor)
  nameWithType: DoubleTensor.IndexAdd(Int32, LongTensor, DoubleTensor)
  fullName: DoubleTensor.IndexAdd(Int32, LongTensor, DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Adds the elements of tensor into the original tensor by selecting the indices in the order \n              given in index. The shape of tensor must exactly match the elements indexed or an error will be thrown."
  syntax:
    content: public void IndexAdd (int dim, TorchSharp.LongTensor index, TorchSharp.DoubleTensor src);
    parameters:
    - id: dim
      type: System.Int32
      description: Dimension to select for the add
    - id: index
      type: TorchSharp.LongTensor
      description: Entries to copy
    - id: src
      type: TorchSharp.DoubleTensor
      description: Tensor to copy the data from.
  overload: TorchSharp.DoubleTensor.IndexAdd*
  exceptions: []
- uid: TorchSharp.DoubleTensor.IndexCopy(System.Int32,TorchSharp.LongTensor,TorchSharp.DoubleTensor)
  id: IndexCopy(System.Int32,TorchSharp.LongTensor,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: IndexCopy(Int32, LongTensor, DoubleTensor)
  nameWithType: DoubleTensor.IndexCopy(Int32, LongTensor, DoubleTensor)
  fullName: DoubleTensor.IndexCopy(Int32, LongTensor, DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Copies the elements of tensor into the original tensor by selecting the indices in the order \n              given in index. The shape of tensor must exactly match the elements indexed or an error will be thrown."
  syntax:
    content: public void IndexCopy (int dim, TorchSharp.LongTensor index, TorchSharp.DoubleTensor src);
    parameters:
    - id: dim
      type: System.Int32
      description: Dimension to select for the copy
    - id: index
      type: TorchSharp.LongTensor
      description: Entries to copy
    - id: src
      type: TorchSharp.DoubleTensor
      description: Tensor to copy the data from.
  overload: TorchSharp.DoubleTensor.IndexCopy*
  exceptions: []
- uid: TorchSharp.DoubleTensor.IndexFill(System.Int32,TorchSharp.LongTensor,System.Double)
  id: IndexFill(System.Int32,TorchSharp.LongTensor,System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: IndexFill(Int32, LongTensor, Double)
  nameWithType: DoubleTensor.IndexFill(Int32, LongTensor, Double)
  fullName: DoubleTensor.IndexFill(Int32, LongTensor, Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Uses the given value to overwrite the original tensor by selecting the indices in the order \n              given in index. The shape of tensor must exactly match the elements indexed or an error will be thrown."
  syntax:
    content: public void IndexFill (int dim, TorchSharp.LongTensor index, double value);
    parameters:
    - id: dim
      type: System.Int32
      description: Dimension to select for the fill
    - id: index
      type: TorchSharp.LongTensor
      description: Entries to copy
    - id: value
      type: System.Double
      description: The value to write.
  overload: TorchSharp.DoubleTensor.IndexFill*
  exceptions: []
- uid: TorchSharp.DoubleTensor.IndexSelect(System.Int32,TorchSharp.LongTensor)
  id: IndexSelect(System.Int32,TorchSharp.LongTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: IndexSelect(Int32, LongTensor)
  nameWithType: DoubleTensor.IndexSelect(Int32, LongTensor)
  fullName: DoubleTensor.IndexSelect(Int32, LongTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Returns a new Tensor which indexes the original Tensor along dimension dim\n              using the entries in index.  The returned Tensor has the same number of dimensions as the \n              original Tensor. The returned Tensor does not use the same storage as the original Tensor."
  syntax:
    content: public TorchSharp.DoubleTensor IndexSelect (int dim, TorchSharp.LongTensor index);
    parameters:
    - id: dim
      type: System.Int32
      description: Dimension to select
    - id: index
      type: TorchSharp.LongTensor
      description: Entries to extract
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.IndexSelect*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Item(System.Int64)
  id: Item(System.Int64)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Item(Int64)
  nameWithType: DoubleTensor.Item(Int64)
  fullName: DoubleTensor.Item(Int64)
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Access to element at the specified position in the tensor
  syntax:
    content: public double this[long x0] { get; set; }
    parameters:
    - id: x0
      type: System.Int64
      description: Index to access.
    return:
      type: System.Double
      description: To be added.
  overload: TorchSharp.DoubleTensor.Item*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Item(System.Int64,System.Int64)
  id: Item(System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Item(Int64, Int64)
  nameWithType: DoubleTensor.Item(Int64, Int64)
  fullName: DoubleTensor.Item(Int64, Int64)
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Access to element at the specified position in the tensor
  syntax:
    content: public double this[long x0, long x1] { get; set; }
    parameters:
    - id: x0
      type: System.Int64
      description: Index in the first dimension to access.
    - id: x1
      type: System.Int64
      description: Index in the second dimension to access.
    return:
      type: System.Double
      description: To be added.
  overload: TorchSharp.DoubleTensor.Item*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Item(System.Int64,System.Int64,System.Int64)
  id: Item(System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Item(Int64, Int64, Int64)
  nameWithType: DoubleTensor.Item(Int64, Int64, Int64)
  fullName: DoubleTensor.Item(Int64, Int64, Int64)
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Access to element at the specified position in the tensor
  syntax:
    content: public double this[long x0, long x1, long x2] { get; set; }
    parameters:
    - id: x0
      type: System.Int64
      description: Index in the first dimension to access.
    - id: x1
      type: System.Int64
      description: Index in the second dimension to access.
    - id: x2
      type: System.Int64
      description: Index in the third dimension to access.
    return:
      type: System.Double
      description: To be added.
  overload: TorchSharp.DoubleTensor.Item*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Item(System.Int64,System.Int64,System.Int64,System.Int64)
  id: Item(System.Int64,System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Item(Int64, Int64, Int64, Int64)
  nameWithType: DoubleTensor.Item(Int64, Int64, Int64, Int64)
  fullName: DoubleTensor.Item(Int64, Int64, Int64, Int64)
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Access to element at the specified position in the tensor
  syntax:
    content: public double this[long x0, long x1, long x2, long x3] { get; set; }
    parameters:
    - id: x0
      type: System.Int64
      description: Index in the first dimension to access.
    - id: x1
      type: System.Int64
      description: Index in the second dimension to access.
    - id: x2
      type: System.Int64
      description: Index in the third dimension to access.
    - id: x3
      type: System.Int64
      description: Index in the fourth dimension to access.
    return:
      type: System.Double
      description: To be added.
  overload: TorchSharp.DoubleTensor.Item*
  exceptions: []
- uid: TorchSharp.DoubleTensor.KthValue(System.Int64,System.Int32,System.Boolean)
  id: KthValue(System.Int64,System.Int32,System.Boolean)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: KthValue(Int64, Int32, Boolean)
  nameWithType: DoubleTensor.KthValue(Int64, Int32, Boolean)
  fullName: DoubleTensor.KthValue(Int64, Int32, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Computes the kth value of all the elements of the tensor along the given dimension.
  syntax:
    content: public Tuple<TorchSharp.DoubleTensor,TorchSharp.LongTensor> KthValue (long k, int dimension, bool keepdim);
    parameters:
    - id: k
      type: System.Int64
      description: The value for 'k' in 'kth'.
    - id: dimension
      type: System.Int32
      description: The dimension to process along.
    - id: keepdim
      type: System.Boolean
      description: true if the reduction dimension should be kept, false otherwise.
    return:
      type: System.Tuple{TorchSharp.DoubleTensor,TorchSharp.LongTensor}
      description: A tuple containing the values and indices of the kth element of each dimension.
  overload: TorchSharp.DoubleTensor.KthValue*
  exceptions: []
- uid: TorchSharp.DoubleTensor.LERP(TorchSharp.DoubleTensor,System.Double)
  id: LERP(TorchSharp.DoubleTensor,System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: LERP(DoubleTensor, Double)
  nameWithType: DoubleTensor.LERP(DoubleTensor, Double)
  fullName: DoubleTensor.LERP(DoubleTensor, Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: LERP
  syntax:
    content: public TorchSharp.DoubleTensor LERP (TorchSharp.DoubleTensor other, double weight);
    parameters:
    - id: other
      type: TorchSharp.DoubleTensor
      description: The right-hand-side operand.
    - id: weight
      type: System.Double
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.LERP*
  exceptions: []
- uid: TorchSharp.DoubleTensor.LeTensor(TorchSharp.DoubleTensor)
  id: LeTensor(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: LeTensor(DoubleTensor)
  nameWithType: DoubleTensor.LeTensor(DoubleTensor)
  fullName: DoubleTensor.LeTensor(DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an LeTensor of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.ByteTensor LeTensor (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.ByteTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.LeTensor*
  exceptions: []
- uid: TorchSharp.DoubleTensor.LeTensorT(TorchSharp.DoubleTensor)
  id: LeTensorT(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: LeTensorT(DoubleTensor)
  nameWithType: DoubleTensor.LeTensorT(DoubleTensor)
  fullName: DoubleTensor.LeTensorT(DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an LeTensorT of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.DoubleTensor LeTensorT (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.LeTensorT*
  exceptions: []
- uid: TorchSharp.DoubleTensor.LeValue(System.Double)
  id: LeValue(System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: LeValue(Double)
  nameWithType: DoubleTensor.LeValue(Double)
  fullName: DoubleTensor.LeValue(Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an LeValue of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.ByteTensor LeValue (double src);
    parameters:
    - id: src
      type: System.Double
      description: The right-hand-side operand.
    return:
      type: TorchSharp.ByteTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.LeValue*
  exceptions: []
- uid: TorchSharp.DoubleTensor.LeValueT(System.Double)
  id: LeValueT(System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: LeValueT(Double)
  nameWithType: DoubleTensor.LeValueT(Double)
  fullName: DoubleTensor.LeValueT(Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an LeValueT of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.DoubleTensor LeValueT (double src);
    parameters:
    - id: src
      type: System.Double
      description: The right-hand-side operand.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.LeValueT*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Lgamma
  id: Lgamma
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Lgamma()
  nameWithType: DoubleTensor.Lgamma()
  fullName: DoubleTensor.Lgamma()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the Lgamma of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Lgamma ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Lgamma*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Lgamma(TorchSharp.DoubleTensor)
  id: Lgamma(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Lgamma(DoubleTensor)
  nameWithType: DoubleTensor.Lgamma(DoubleTensor)
  fullName: DoubleTensor.Lgamma(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the Lgamma of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Lgamma (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Lgamma*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Linspace(System.Double,System.Double,System.Int64)
  id: Linspace(System.Double,System.Double,System.Int64)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Linspace(Double, Double, Int64)
  nameWithType: DoubleTensor.Linspace(Double, Double, Int64)
  fullName: DoubleTensor.Linspace(Double, Double, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs Linspace of the tensor with the provided \n              <see paramref=\"src1\"></see> and <see paramref=\"src1\"></see> tensors and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.DoubleTensor Linspace (double a, double b, long n);
    parameters:
    - id: a
      type: System.Double
      description: To be added.
    - id: b
      type: System.Double
      description: To be added.
    - id: n
      type: System.Int64
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Linspace*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Log
  id: Log
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Log()
  nameWithType: DoubleTensor.Log()
  fullName: DoubleTensor.Log()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the Log of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Log ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Log*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Log(TorchSharp.DoubleTensor)
  id: Log(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Log(DoubleTensor)
  nameWithType: DoubleTensor.Log(DoubleTensor)
  fullName: DoubleTensor.Log(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the Log of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Log (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Log*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Log10
  id: Log10
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Log10()
  nameWithType: DoubleTensor.Log10()
  fullName: DoubleTensor.Log10()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the Log10 of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Log10 ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Log10*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Log10(TorchSharp.DoubleTensor)
  id: Log10(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Log10(DoubleTensor)
  nameWithType: DoubleTensor.Log10(DoubleTensor)
  fullName: DoubleTensor.Log10(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the Log10 of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Log10 (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Log10*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Log1p
  id: Log1p
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Log1p()
  nameWithType: DoubleTensor.Log1p()
  fullName: DoubleTensor.Log1p()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the Log1p of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Log1p ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Log1p*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Log1p(TorchSharp.DoubleTensor)
  id: Log1p(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Log1p(DoubleTensor)
  nameWithType: DoubleTensor.Log1p(DoubleTensor)
  fullName: DoubleTensor.Log1p(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the Log1p of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Log1p (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Log1p*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Log2
  id: Log2
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Log2()
  nameWithType: DoubleTensor.Log2()
  fullName: DoubleTensor.Log2()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the Log2 of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Log2 ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Log2*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Log2(TorchSharp.DoubleTensor)
  id: Log2(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Log2(DoubleTensor)
  nameWithType: DoubleTensor.Log2(DoubleTensor)
  fullName: DoubleTensor.Log2(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the Log2 of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Log2 (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Log2*
  exceptions: []
- uid: TorchSharp.DoubleTensor.LogNormal(TorchSharp.RandomGenerator,System.Double,System.Double)
  id: LogNormal(TorchSharp.RandomGenerator,System.Double,System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: LogNormal(RandomGenerator, Double, Double)
  nameWithType: DoubleTensor.LogNormal(RandomGenerator, Double, Double)
  fullName: DoubleTensor.LogNormal(RandomGenerator, Double, Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Fills the tensor with values according to a log-normal distribution.
  syntax:
    content: public void LogNormal (TorchSharp.RandomGenerator source, double mean, double stdv);
    parameters:
    - id: source
      type: TorchSharp.RandomGenerator
      description: The random generator source
    - id: mean
      type: System.Double
      description: The mean of the distribution.
    - id: stdv
      type: System.Double
      description: The standard deviation of the distribution.
  overload: TorchSharp.DoubleTensor.LogNormal*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Logspace(System.Double,System.Double,System.Int64)
  id: Logspace(System.Double,System.Double,System.Int64)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Logspace(Double, Double, Int64)
  nameWithType: DoubleTensor.Logspace(Double, Double, Int64)
  fullName: DoubleTensor.Logspace(Double, Double, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs Logspace of the tensor with the provided \n              <see paramref=\"src1\"></see> and <see paramref=\"src1\"></see> tensors and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.DoubleTensor Logspace (double a, double b, long n);
    parameters:
    - id: a
      type: System.Double
      description: To be added.
    - id: b
      type: System.Double
      description: To be added.
    - id: n
      type: System.Int64
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Logspace*
  exceptions: []
- uid: TorchSharp.DoubleTensor.LShift(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  id: LShift(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: LShift(DoubleTensor, Double, DoubleTensor)
  nameWithType: DoubleTensor.LShift(DoubleTensor, Double, DoubleTensor)
  fullName: DoubleTensor.LShift(DoubleTensor, Double, DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the LShift operation on each element of the source with the
                  provided scalar.   The result tensor specified as the last parameters
                  is resized to match the source.
  remarks: >-
    For each element in the <see paramref="source"></see> performs the LShift operation
                   with <see paramref="value"></see>.   The result is stored in the <see paramref="result"></see>
                   tensor.
  syntax:
    content: public static void LShift (TorchSharp.DoubleTensor source, double value, TorchSharp.DoubleTensor result);
    parameters:
    - id: source
      type: TorchSharp.DoubleTensor
      description: Source tensor on which the operation will take place.
    - id: value
      type: System.Double
      description: The scalar value that the operation uses.
    - id: result
      type: TorchSharp.DoubleTensor
      description: The tensor where the result will be placed
  overload: TorchSharp.DoubleTensor.LShift*
  exceptions: []
- uid: TorchSharp.DoubleTensor.LShift(System.Double)
  id: LShift(System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: LShift(Double)
  nameWithType: DoubleTensor.LShift(Double)
  fullName: DoubleTensor.LShift(Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the LShift operation on each element of the tensor with the
                  <see paramref="value"></see> and returns a new tensor with the result.
  remarks: "If you want to avoid the allocation of a new tensor, you can use the \n              alternative method <xref href=\"PytorchSharp.LShift(PytorchSharp.DoubleTensor, Double, PytorchSharp.Double)\"></xref>."
  syntax:
    content: public TorchSharp.DoubleTensor LShift (double value);
    parameters:
    - id: value
      type: System.Double
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.LShift*
  exceptions: []
- uid: TorchSharp.DoubleTensor.LtTensor(TorchSharp.DoubleTensor)
  id: LtTensor(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: LtTensor(DoubleTensor)
  nameWithType: DoubleTensor.LtTensor(DoubleTensor)
  fullName: DoubleTensor.LtTensor(DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an LtTensor of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.ByteTensor LtTensor (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.ByteTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.LtTensor*
  exceptions: []
- uid: TorchSharp.DoubleTensor.LtTensorT(TorchSharp.DoubleTensor)
  id: LtTensorT(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: LtTensorT(DoubleTensor)
  nameWithType: DoubleTensor.LtTensorT(DoubleTensor)
  fullName: DoubleTensor.LtTensorT(DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an LtTensorT of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.DoubleTensor LtTensorT (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.LtTensorT*
  exceptions: []
- uid: TorchSharp.DoubleTensor.LtValue(System.Double)
  id: LtValue(System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: LtValue(Double)
  nameWithType: DoubleTensor.LtValue(Double)
  fullName: DoubleTensor.LtValue(Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an LtValue of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.ByteTensor LtValue (double src);
    parameters:
    - id: src
      type: System.Double
      description: The right-hand-side operand.
    return:
      type: TorchSharp.ByteTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.LtValue*
  exceptions: []
- uid: TorchSharp.DoubleTensor.LtValueT(System.Double)
  id: LtValueT(System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: LtValueT(Double)
  nameWithType: DoubleTensor.LtValueT(Double)
  fullName: DoubleTensor.LtValueT(Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an LtValueT of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.DoubleTensor LtValueT (double src);
    parameters:
    - id: src
      type: System.Double
      description: The right-hand-side operand.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.LtValueT*
  exceptions: []
- uid: TorchSharp.DoubleTensor.MaskedCopy(TorchSharp.ByteTensor,TorchSharp.DoubleTensor)
  id: MaskedCopy(TorchSharp.ByteTensor,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: MaskedCopy(ByteTensor, DoubleTensor)
  nameWithType: DoubleTensor.MaskedCopy(ByteTensor, DoubleTensor)
  fullName: DoubleTensor.MaskedCopy(ByteTensor, DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Copies elements from the source tensor to the locations indicated by the mask.
  remarks: There must be at least as many elements in the source tensor as there are 1s in the mask.
  syntax:
    content: public void MaskedCopy (TorchSharp.ByteTensor mask, TorchSharp.DoubleTensor src);
    parameters:
    - id: mask
      type: TorchSharp.ByteTensor
      description: A byte tensor with values 0 or 1 indicating the locations where in the destination the value should be filled.
    - id: src
      type: TorchSharp.DoubleTensor
      description: The source tensor.
  overload: TorchSharp.DoubleTensor.MaskedCopy*
  exceptions: []
- uid: TorchSharp.DoubleTensor.MaskedFill(TorchSharp.ByteTensor,System.Double)
  id: MaskedFill(TorchSharp.ByteTensor,System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: MaskedFill(ByteTensor, Double)
  nameWithType: DoubleTensor.MaskedFill(ByteTensor, Double)
  fullName: DoubleTensor.MaskedFill(ByteTensor, Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Fills the tensor with the specified value at the locations indicated by the mask.
  syntax:
    content: public void MaskedFill (TorchSharp.ByteTensor mask, double value);
    parameters:
    - id: mask
      type: TorchSharp.ByteTensor
      description: A byte tensor with values 0 or 1 indicating the locations where the value should be filled.
    - id: value
      type: System.Double
      description: The value to write at the indicated locations.
  overload: TorchSharp.DoubleTensor.MaskedFill*
  exceptions: []
- uid: TorchSharp.DoubleTensor.MaskedSelect(TorchSharp.ByteTensor,TorchSharp.DoubleTensor)
  id: MaskedSelect(TorchSharp.ByteTensor,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: MaskedSelect(ByteTensor, DoubleTensor)
  nameWithType: DoubleTensor.MaskedSelect(ByteTensor, DoubleTensor)
  fullName: DoubleTensor.MaskedSelect(ByteTensor, DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Copies elements from the source tensor at the locations indicated by the mask.
  remarks: >-
    There will be as many elements in the tensor as there are 1s in the mask.
                 There must be at least as many elements in the source tensor as there are 1s in the mask.
  syntax:
    content: public void MaskedSelect (TorchSharp.ByteTensor mask, TorchSharp.DoubleTensor src);
    parameters:
    - id: mask
      type: TorchSharp.ByteTensor
      description: A byte tensor with values 0 or 1 indicating the locations where in the source the value should be fetched.
    - id: src
      type: TorchSharp.DoubleTensor
      description: The source tensor.
  overload: TorchSharp.DoubleTensor.MaskedSelect*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Match(TorchSharp.DoubleTensor,System.Double)
  id: Match(TorchSharp.DoubleTensor,System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Match(DoubleTensor, Double)
  nameWithType: DoubleTensor.Match(DoubleTensor, Double)
  fullName: DoubleTensor.Match(DoubleTensor, Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Match
  syntax:
    content: public TorchSharp.DoubleTensor Match (TorchSharp.DoubleTensor m2, double gain);
    parameters:
    - id: m2
      type: TorchSharp.DoubleTensor
      description: To be added.
    - id: gain
      type: System.Double
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Match*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Max(System.Int32,System.Boolean)
  id: Max(System.Int32,System.Boolean)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Max(Int32, Boolean)
  nameWithType: DoubleTensor.Max(Int32, Boolean)
  fullName: DoubleTensor.Max(Int32, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Computes the max of all the elements of the tensor along the given dimension.
  syntax:
    content: public Tuple<TorchSharp.DoubleTensor,TorchSharp.LongTensor> Max (int dimension, bool keepdim);
    parameters:
    - id: dimension
      type: System.Int32
      description: The dimension to process along.
    - id: keepdim
      type: System.Boolean
      description: true if the reduction dimension should be kept, false otherwise.
    return:
      type: System.Tuple{TorchSharp.DoubleTensor,TorchSharp.LongTensor}
      description: A tuple containing the values and indices of the resulting elements.
  overload: TorchSharp.DoubleTensor.Max*
  exceptions: []
- uid: TorchSharp.DoubleTensor.MaxAll
  id: MaxAll
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: MaxAll()
  nameWithType: DoubleTensor.MaxAll()
  fullName: DoubleTensor.MaxAll()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns the maximum value of the elements in the tensor.
  syntax:
    content: public double MaxAll ();
    parameters: []
    return:
      type: System.Double
      description: The maximum value of the tensor.
  overload: TorchSharp.DoubleTensor.MaxAll*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Mean(System.Int32,System.Boolean)
  id: Mean(System.Int32,System.Boolean)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Mean(Int32, Boolean)
  nameWithType: DoubleTensor.Mean(Int32, Boolean)
  fullName: DoubleTensor.Mean(Int32, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Compute the mean of all tensor elements along the given dimension.
  syntax:
    content: public TorchSharp.DoubleTensor Mean (int dimension, bool keepdim);
    parameters:
    - id: dimension
      type: System.Int32
      description: The dimension to process along.
    - id: keepdim
      type: System.Boolean
      description: true if the reduction dimension should be kept, false otherwise.
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.Mean*
  exceptions: []
- uid: TorchSharp.DoubleTensor.MeanAll
  id: MeanAll
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: MeanAll()
  nameWithType: DoubleTensor.MeanAll()
  fullName: DoubleTensor.MeanAll()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Compute the mean of all tensor elements.
  syntax:
    content: public double MeanAll ();
    parameters: []
    return:
      type: System.Double
      description: The mean of the tensor.
  overload: TorchSharp.DoubleTensor.MeanAll*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Median(System.Int32,System.Boolean)
  id: Median(System.Int32,System.Boolean)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Median(Int32, Boolean)
  nameWithType: DoubleTensor.Median(Int32, Boolean)
  fullName: DoubleTensor.Median(Int32, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Computes the median of all the elements of the tensor along the given dimension.
  syntax:
    content: public Tuple<TorchSharp.DoubleTensor,TorchSharp.LongTensor> Median (int dimension, bool keepdim);
    parameters:
    - id: dimension
      type: System.Int32
      description: The dimension to process along.
    - id: keepdim
      type: System.Boolean
      description: true if the reduction dimension should be kept, false otherwise.
    return:
      type: System.Tuple{TorchSharp.DoubleTensor,TorchSharp.LongTensor}
      description: A tuple containing the values and indices of the resulting elements.
  overload: TorchSharp.DoubleTensor.Median*
  exceptions: []
- uid: TorchSharp.DoubleTensor.MedianAll
  id: MedianAll
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: MedianAll()
  nameWithType: DoubleTensor.MedianAll()
  fullName: DoubleTensor.MedianAll()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns the median of the elements in the tensor.
  syntax:
    content: public double MedianAll ();
    parameters: []
    return:
      type: System.Double
      description: The median of the tensor.
  overload: TorchSharp.DoubleTensor.MedianAll*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Min(System.Int32,System.Boolean)
  id: Min(System.Int32,System.Boolean)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Min(Int32, Boolean)
  nameWithType: DoubleTensor.Min(Int32, Boolean)
  fullName: DoubleTensor.Min(Int32, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Computes the min of all the elements of the tensor along the given dimension.
  syntax:
    content: public Tuple<TorchSharp.DoubleTensor,TorchSharp.LongTensor> Min (int dimension, bool keepdim);
    parameters:
    - id: dimension
      type: System.Int32
      description: The dimension to process along.
    - id: keepdim
      type: System.Boolean
      description: true if the reduction dimension should be kept, false otherwise.
    return:
      type: System.Tuple{TorchSharp.DoubleTensor,TorchSharp.LongTensor}
      description: A tuple containing the values and indices of the resulting elements.
  overload: TorchSharp.DoubleTensor.Min*
  exceptions: []
- uid: TorchSharp.DoubleTensor.MinAll
  id: MinAll
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: MinAll()
  nameWithType: DoubleTensor.MinAll()
  fullName: DoubleTensor.MinAll()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns the minimum value of the elements in the tensor.
  syntax:
    content: public double MinAll ();
    parameters: []
    return:
      type: System.Double
      description: The minimum value of the tensor.
  overload: TorchSharp.DoubleTensor.MinAll*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Mode(System.Int32,System.Boolean)
  id: Mode(System.Int32,System.Boolean)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Mode(Int32, Boolean)
  nameWithType: DoubleTensor.Mode(Int32, Boolean)
  fullName: DoubleTensor.Mode(Int32, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Computes the mode of all the elements of the tensor along the given dimension.
  syntax:
    content: public Tuple<TorchSharp.DoubleTensor,TorchSharp.LongTensor> Mode (int dimension, bool keepdim);
    parameters:
    - id: dimension
      type: System.Int32
      description: The dimension to process along.
    - id: keepdim
      type: System.Boolean
      description: true if the reduction dimension should be kept, false otherwise.
    return:
      type: System.Tuple{TorchSharp.DoubleTensor,TorchSharp.LongTensor}
      description: A tuple containing the values and indices of the resulting elements.
  overload: TorchSharp.DoubleTensor.Mode*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Mul(System.Double)
  id: Mul(System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Mul(Double)
  nameWithType: DoubleTensor.Mul(Double)
  fullName: DoubleTensor.Mul(Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the Mul operation on each element of the tensor with the
                  <see paramref="value"></see> and returns a new tensor with the result.
  remarks: "If you want to avoid the allocation of a new tensor, you can use the \n              alternative method <xref href=\"PytorchSharp.Mul(PytorchSharp.DoubleTensor, Double, PytorchSharp.Double)\"></xref>."
  syntax:
    content: public TorchSharp.DoubleTensor Mul (double value);
    parameters:
    - id: value
      type: System.Double
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Mul*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Mul(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  id: Mul(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Mul(DoubleTensor, Double, DoubleTensor)
  nameWithType: DoubleTensor.Mul(DoubleTensor, Double, DoubleTensor)
  fullName: DoubleTensor.Mul(DoubleTensor, Double, DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the Mul operation on each element of the source with the
                  provided scalar.   The result tensor specified as the last parameters
                  is resized to match the source.
  remarks: >-
    For each element in the <see paramref="source"></see> performs the Mul operation
                   with <see paramref="value"></see>.   The result is stored in the <see paramref="result"></see>
                   tensor.
  syntax:
    content: public static void Mul (TorchSharp.DoubleTensor source, double value, TorchSharp.DoubleTensor result);
    parameters:
    - id: source
      type: TorchSharp.DoubleTensor
      description: Source tensor on which the operation will take place.
    - id: value
      type: System.Double
      description: The scalar value that the operation uses.
    - id: result
      type: TorchSharp.DoubleTensor
      description: The tensor where the result will be placed
  overload: TorchSharp.DoubleTensor.Mul*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Multinomial(TorchSharp.RandomGenerator,TorchSharp.DoubleTensor,System.Int32,System.Int32)
  id: Multinomial(TorchSharp.RandomGenerator,TorchSharp.DoubleTensor,System.Int32,System.Int32)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Multinomial(RandomGenerator, DoubleTensor, Int32, Int32)
  nameWithType: DoubleTensor.Multinomial(RandomGenerator, DoubleTensor, Int32, Int32)
  fullName: DoubleTensor.Multinomial(RandomGenerator, DoubleTensor, Int32, Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Fills the tensor with values according to a multinomial distribution.
  syntax:
    content: public void Multinomial (TorchSharp.RandomGenerator source, TorchSharp.DoubleTensor prob_dist, int n_sample, int with_replacement);
    parameters:
    - id: source
      type: TorchSharp.RandomGenerator
      description: The random generator source
    - id: prob_dist
      type: TorchSharp.DoubleTensor
      description: The probability for each bucket.
    - id: n_sample
      type: System.Int32
      description: The number of samples to generate.
    - id: with_replacement
      type: System.Int32
      description: To be added.
  overload: TorchSharp.DoubleTensor.Multinomial*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Narrow(System.Int32,System.Int64,System.Int64)
  id: Narrow(System.Int32,System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Narrow(Int32, Int64, Int64)
  nameWithType: DoubleTensor.Narrow(Int32, Int64, Int64)
  fullName: DoubleTensor.Narrow(Int32, Int64, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: 'Returns a new Tensor which is a narrowed version of the current one: the dimension dim is narrowed from firstIndexto firstIndex+size-1.'
  syntax:
    content: public TorchSharp.DoubleTensor Narrow (int dim, long firstIndex, long size);
    parameters:
    - id: dim
      type: System.Int32
      description: The dimension to narrow
    - id: firstIndex
      type: System.Int64
      description: Initial index to narrow
    - id: size
      type: System.Int64
      description: Number of elements
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.Narrow*
  exceptions: []
- uid: TorchSharp.DoubleTensor.neg
  id: neg
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: neg()
  nameWithType: DoubleTensor.neg()
  fullName: DoubleTensor.neg()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the neg of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor neg ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.neg*
  exceptions: []
- uid: TorchSharp.DoubleTensor.neg(TorchSharp.DoubleTensor)
  id: neg(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: neg(DoubleTensor)
  nameWithType: DoubleTensor.neg(DoubleTensor)
  fullName: DoubleTensor.neg(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the neg of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor neg (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.neg*
  exceptions: []
- uid: TorchSharp.DoubleTensor.NeTensor(TorchSharp.DoubleTensor)
  id: NeTensor(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: NeTensor(DoubleTensor)
  nameWithType: DoubleTensor.NeTensor(DoubleTensor)
  fullName: DoubleTensor.NeTensor(DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an NeTensor of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.ByteTensor NeTensor (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.ByteTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.NeTensor*
  exceptions: []
- uid: TorchSharp.DoubleTensor.NeTensorT(TorchSharp.DoubleTensor)
  id: NeTensorT(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: NeTensorT(DoubleTensor)
  nameWithType: DoubleTensor.NeTensorT(DoubleTensor)
  fullName: DoubleTensor.NeTensorT(DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an NeTensorT of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.DoubleTensor NeTensorT (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.NeTensorT*
  exceptions: []
- uid: TorchSharp.DoubleTensor.NeValue(System.Double)
  id: NeValue(System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: NeValue(Double)
  nameWithType: DoubleTensor.NeValue(Double)
  fullName: DoubleTensor.NeValue(Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an NeValue of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.ByteTensor NeValue (double src);
    parameters:
    - id: src
      type: System.Double
      description: The right-hand-side operand.
    return:
      type: TorchSharp.ByteTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.NeValue*
  exceptions: []
- uid: TorchSharp.DoubleTensor.NeValueT(System.Double)
  id: NeValueT(System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: NeValueT(Double)
  nameWithType: DoubleTensor.NeValueT(Double)
  fullName: DoubleTensor.NeValueT(Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an NeValueT of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.DoubleTensor NeValueT (double src);
    parameters:
    - id: src
      type: System.Double
      description: The right-hand-side operand.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.NeValueT*
  exceptions: []
- uid: TorchSharp.DoubleTensor.NewWithStorage1d(System.IntPtr,System.Int64,System.Int64)
  id: NewWithStorage1d(System.IntPtr,System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: NewWithStorage1d(IntPtr, Int64, Int64)
  nameWithType: DoubleTensor.NewWithStorage1d(IntPtr, Int64, Int64)
  fullName: DoubleTensor.NewWithStorage1d(IntPtr, Int64, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Access to element at the specified position in the tensor
  syntax:
    content: public TorchSharp.DoubleTensor NewWithStorage1d (IntPtr offset, long size, long stride);
    parameters:
    - id: offset
      type: System.IntPtr
      description: Offset within the input storage the storage of the new tensor will start from.
    - id: size
      type: System.Int64
      description: Size of the first dimension.
    - id: stride
      type: System.Int64
      description: Stride of the first dimension.
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.NewWithStorage1d*
  exceptions: []
- uid: TorchSharp.DoubleTensor.NewWithStorage2d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64)
  id: NewWithStorage2d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: NewWithStorage2d(IntPtr, Int64, Int64, Int64, Int64)
  nameWithType: DoubleTensor.NewWithStorage2d(IntPtr, Int64, Int64, Int64, Int64)
  fullName: DoubleTensor.NewWithStorage2d(IntPtr, Int64, Int64, Int64, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Access to element at the specified position in the tensor
  syntax:
    content: public TorchSharp.DoubleTensor NewWithStorage2d (IntPtr offset, long size0, long stride0, long size1, long stride1);
    parameters:
    - id: offset
      type: System.IntPtr
      description: Offset within the input storage the storage of the new tensor will start from.
    - id: size0
      type: System.Int64
      description: Size of the first dimension.
    - id: stride0
      type: System.Int64
      description: Stride of the first dimension.
    - id: size1
      type: System.Int64
      description: Size of the second dimension.
    - id: stride1
      type: System.Int64
      description: Stride of the second dimension.
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.NewWithStorage2d*
  exceptions: []
- uid: TorchSharp.DoubleTensor.NewWithStorage3d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
  id: NewWithStorage3d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: NewWithStorage3d(IntPtr, Int64, Int64, Int64, Int64, Int64, Int64)
  nameWithType: DoubleTensor.NewWithStorage3d(IntPtr, Int64, Int64, Int64, Int64, Int64, Int64)
  fullName: DoubleTensor.NewWithStorage3d(IntPtr, Int64, Int64, Int64, Int64, Int64, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Access to element at the specified position in the tensor
  syntax:
    content: public TorchSharp.DoubleTensor NewWithStorage3d (IntPtr offset, long size0, long stride0, long size1, long stride1, long size2, long stride2);
    parameters:
    - id: offset
      type: System.IntPtr
      description: Offset within the input storage the storage of the new tensor will start from.
    - id: size0
      type: System.Int64
      description: Size of the first dimension.
    - id: stride0
      type: System.Int64
      description: Stride of the first dimension.
    - id: size1
      type: System.Int64
      description: Size of the second dimension.
    - id: stride1
      type: System.Int64
      description: Stride of the second dimension.
    - id: size2
      type: System.Int64
      description: Size of the third dimension.
    - id: stride2
      type: System.Int64
      description: Stride of the third dimension.
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.NewWithStorage3d*
  exceptions: []
- uid: TorchSharp.DoubleTensor.NewWithStorage4d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
  id: NewWithStorage4d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: NewWithStorage4d(IntPtr, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64)
  nameWithType: DoubleTensor.NewWithStorage4d(IntPtr, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64)
  fullName: DoubleTensor.NewWithStorage4d(IntPtr, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Access to element at the specified position in the tensor
  syntax:
    content: public TorchSharp.DoubleTensor NewWithStorage4d (IntPtr offset, long size0, long stride0, long size1, long stride1, long size2, long stride2, long size3, long stride3);
    parameters:
    - id: offset
      type: System.IntPtr
      description: Offset within the input storage the storage of the new tensor will start from.
    - id: size0
      type: System.Int64
      description: Size of the first dimension.
    - id: stride0
      type: System.Int64
      description: Stride of the first dimension.
    - id: size1
      type: System.Int64
      description: Size of the second dimension.
    - id: stride1
      type: System.Int64
      description: Stride of the second dimension.
    - id: size2
      type: System.Int64
      description: Size of the third dimension.
    - id: stride2
      type: System.Int64
      description: Stride of the third dimension.
    - id: size3
      type: System.Int64
      description: Size of the fourth dimension.
    - id: stride3
      type: System.Int64
      description: Stride of the fourth dimension.
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.NewWithStorage4d*
  exceptions: []
- uid: TorchSharp.DoubleTensor.NonZero
  id: NonZero
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: NonZero()
  nameWithType: DoubleTensor.NonZero()
  fullName: DoubleTensor.NonZero()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Finds the indices of all non-zero elements.
  syntax:
    content: public TorchSharp.LongTensor NonZero ();
    parameters: []
    return:
      type: TorchSharp.LongTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.NonZero*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Norm(System.Double,System.Int32,System.Boolean)
  id: Norm(System.Double,System.Int32,System.Boolean)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Norm(Double, Int32, Boolean)
  nameWithType: DoubleTensor.Norm(Double, Int32, Boolean)
  fullName: DoubleTensor.Norm(Double, Int32, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Compute the norm of all tensor elements along the given dimension.
  syntax:
    content: public TorchSharp.DoubleTensor Norm (double value, int dimension, bool keepdim);
    parameters:
    - id: value
      type: System.Double
      description: To be added.
    - id: dimension
      type: System.Int32
      description: The dimension to process along.
    - id: keepdim
      type: System.Boolean
      description: true if the reduction dimension should be kept, false otherwise.
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.Norm*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Normal(TorchSharp.RandomGenerator,System.Double,System.Double)
  id: Normal(TorchSharp.RandomGenerator,System.Double,System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Normal(RandomGenerator, Double, Double)
  nameWithType: DoubleTensor.Normal(RandomGenerator, Double, Double)
  fullName: DoubleTensor.Normal(RandomGenerator, Double, Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Fills the tensor with values according to a normal distribution.
  syntax:
    content: public void Normal (TorchSharp.RandomGenerator source, double mean, double stdv);
    parameters:
    - id: source
      type: TorchSharp.RandomGenerator
      description: The random generator source
    - id: mean
      type: System.Double
      description: The mean of the distribution.
    - id: stdv
      type: System.Double
      description: The standard deviation of the distribution.
  overload: TorchSharp.DoubleTensor.Normal*
  exceptions: []
- uid: TorchSharp.DoubleTensor.NormAll(System.Double)
  id: NormAll(System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: NormAll(Double)
  nameWithType: DoubleTensor.NormAll(Double)
  fullName: DoubleTensor.NormAll(Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Compute the norm of all tensor elements.
  syntax:
    content: public double NormAll (double value);
    parameters:
    - id: value
      type: System.Double
      description: To be added.
    return:
      type: System.Double
      description: To be added.
  overload: TorchSharp.DoubleTensor.NormAll*
  exceptions: []
- uid: TorchSharp.DoubleTensor.NormalMeans(TorchSharp.RandomGenerator,TorchSharp.DoubleTensor,System.Double)
  id: NormalMeans(TorchSharp.RandomGenerator,TorchSharp.DoubleTensor,System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: NormalMeans(RandomGenerator, DoubleTensor, Double)
  nameWithType: DoubleTensor.NormalMeans(RandomGenerator, DoubleTensor, Double)
  fullName: DoubleTensor.NormalMeans(RandomGenerator, DoubleTensor, Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Fills the tensor with values according to a normal distribution. This version uses multiple means.
  syntax:
    content: public void NormalMeans (TorchSharp.RandomGenerator source, TorchSharp.DoubleTensor means, double stdv);
    parameters:
    - id: source
      type: TorchSharp.RandomGenerator
      description: The random generator source
    - id: means
      type: TorchSharp.DoubleTensor
      description: The means of the distribution.
    - id: stdv
      type: System.Double
      description: The standard deviation of the distribution.
  overload: TorchSharp.DoubleTensor.NormalMeans*
  exceptions: []
- uid: TorchSharp.DoubleTensor.NormalMeansStdvs(TorchSharp.RandomGenerator,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  id: NormalMeansStdvs(TorchSharp.RandomGenerator,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: NormalMeansStdvs(RandomGenerator, DoubleTensor, DoubleTensor)
  nameWithType: DoubleTensor.NormalMeansStdvs(RandomGenerator, DoubleTensor, DoubleTensor)
  fullName: DoubleTensor.NormalMeansStdvs(RandomGenerator, DoubleTensor, DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Fills the tensor with values according to a normal distribution. This version uses multiple means and standard deviations.
  syntax:
    content: public void NormalMeansStdvs (TorchSharp.RandomGenerator source, TorchSharp.DoubleTensor means, TorchSharp.DoubleTensor stdvs);
    parameters:
    - id: source
      type: TorchSharp.RandomGenerator
      description: The random generator source
    - id: means
      type: TorchSharp.DoubleTensor
      description: The means of the distribution.
    - id: stdvs
      type: TorchSharp.DoubleTensor
      description: The standards deviation of the distribution.
  overload: TorchSharp.DoubleTensor.NormalMeansStdvs*
  exceptions: []
- uid: TorchSharp.DoubleTensor.NormalStdvs(TorchSharp.RandomGenerator,System.Double,TorchSharp.DoubleTensor)
  id: NormalStdvs(TorchSharp.RandomGenerator,System.Double,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: NormalStdvs(RandomGenerator, Double, DoubleTensor)
  nameWithType: DoubleTensor.NormalStdvs(RandomGenerator, Double, DoubleTensor)
  fullName: DoubleTensor.NormalStdvs(RandomGenerator, Double, DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Fills the tensor with values according to a normal distribution. This version uses multiple standard deviations.
  syntax:
    content: public void NormalStdvs (TorchSharp.RandomGenerator source, double mean, TorchSharp.DoubleTensor stdvs);
    parameters:
    - id: source
      type: TorchSharp.RandomGenerator
      description: The random generator source
    - id: mean
      type: System.Double
      description: The mean of the distribution.
    - id: stdvs
      type: TorchSharp.DoubleTensor
      description: The standard deviations of the distribution.
  overload: TorchSharp.DoubleTensor.NormalStdvs*
  exceptions: []
- uid: TorchSharp.DoubleTensor.NumElements
  id: NumElements
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: NumElements()
  nameWithType: DoubleTensor.NumElements()
  fullName: DoubleTensor.NumElements()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Get the number of elements in the tensor.
  syntax:
    content: public long NumElements ();
    parameters: []
    return:
      type: System.Int64
      description: To be added.
  overload: TorchSharp.DoubleTensor.NumElements*
  exceptions: []
- uid: TorchSharp.DoubleTensor.OnesLike
  id: OnesLike
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: OnesLike()
  nameWithType: DoubleTensor.OnesLike()
  fullName: DoubleTensor.OnesLike()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the OnesLike of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor OnesLike ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.OnesLike*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Polygamma
  id: Polygamma
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Polygamma()
  nameWithType: DoubleTensor.Polygamma()
  fullName: DoubleTensor.Polygamma()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the Polygamma of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Polygamma ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Polygamma*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Polygamma(TorchSharp.DoubleTensor)
  id: Polygamma(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Polygamma(DoubleTensor)
  nameWithType: DoubleTensor.Polygamma(DoubleTensor)
  fullName: DoubleTensor.Polygamma(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the Polygamma of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Polygamma (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Polygamma*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Pow(System.Double)
  id: Pow(System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Pow(Double)
  nameWithType: DoubleTensor.Pow(Double)
  fullName: DoubleTensor.Pow(Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with <see paramref="this"></see> raised to the power of <see paramref="y"></see>.
  syntax:
    content: public TorchSharp.DoubleTensor Pow (double y);
    parameters:
    - id: y
      type: System.Double
      description: The exponent.
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.Pow*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Prod(System.Int32,System.Boolean)
  id: Prod(System.Int32,System.Boolean)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Prod(Int32, Boolean)
  nameWithType: DoubleTensor.Prod(Int32, Boolean)
  fullName: DoubleTensor.Prod(Int32, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Computes the product of all the elements of the tensor along the given dimension.
  syntax:
    content: public TorchSharp.DoubleTensor Prod (int dimension, bool keepdim);
    parameters:
    - id: dimension
      type: System.Int32
      description: The dimension to process along.
    - id: keepdim
      type: System.Boolean
      description: true if the reduction dimension should be kept, false otherwise.
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.Prod*
  exceptions: []
- uid: TorchSharp.DoubleTensor.ProdAll
  id: ProdAll
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: ProdAll()
  nameWithType: DoubleTensor.ProdAll()
  fullName: DoubleTensor.ProdAll()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns the product of the elements in the tensor.
  syntax:
    content: public double ProdAll ();
    parameters: []
    return:
      type: System.Double
      description: The product of the tensor.
  overload: TorchSharp.DoubleTensor.ProdAll*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Put(TorchSharp.LongTensor,TorchSharp.DoubleTensor,System.Boolean)
  id: Put(TorchSharp.LongTensor,TorchSharp.DoubleTensor,System.Boolean)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Put(LongTensor, DoubleTensor, Boolean)
  nameWithType: DoubleTensor.Put(LongTensor, DoubleTensor, Boolean)
  fullName: DoubleTensor.Put(LongTensor, DoubleTensor, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Put
  syntax:
    content: public void Put (TorchSharp.LongTensor index, TorchSharp.DoubleTensor src, bool accumulate);
    parameters:
    - id: index
      type: TorchSharp.LongTensor
      description: Indices of entries to copy.
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    - id: accumulate
      type: System.Boolean
      description: To be added.
  overload: TorchSharp.DoubleTensor.Put*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Random(TorchSharp.RandomGenerator)
  id: Random(TorchSharp.RandomGenerator)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Random(RandomGenerator)
  nameWithType: DoubleTensor.Random(RandomGenerator)
  fullName: DoubleTensor.Random(RandomGenerator)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Populates the tensor with random values using the provided random source generator.
  syntax:
    content: public void Random (TorchSharp.RandomGenerator source);
    parameters:
    - id: source
      type: TorchSharp.RandomGenerator
      description: The random generator source
  overload: TorchSharp.DoubleTensor.Random*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Random(TorchSharp.RandomGenerator,System.Int64)
  id: Random(TorchSharp.RandomGenerator,System.Int64)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Random(RandomGenerator, Int64)
  nameWithType: DoubleTensor.Random(RandomGenerator, Int64)
  fullName: DoubleTensor.Random(RandomGenerator, Int64)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Populates the tensor with random values from 0 to n, using the provided random source generator.
  syntax:
    content: public void Random (TorchSharp.RandomGenerator source, long n);
    parameters:
    - id: source
      type: TorchSharp.RandomGenerator
      description: The random generator source
    - id: n
      type: System.Int64
      description: The upper limit for the values to be generated
  overload: TorchSharp.DoubleTensor.Random*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Random(System.Int64)
  id: Random(System.Int64)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Random(Int64)
  nameWithType: DoubleTensor.Random(Int64)
  fullName: DoubleTensor.Random(Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Populates the tensor with random values from 0 to n, using a newly initialized Random number geneator.
  syntax:
    content: public void Random (long n);
    parameters:
    - id: n
      type: System.Int64
      description: The upper limit for the values to be generated
  overload: TorchSharp.DoubleTensor.Random*
  exceptions: []
- uid: TorchSharp.DoubleTensor.RandPerm(TorchSharp.RandomGenerator,System.Int64)
  id: RandPerm(TorchSharp.RandomGenerator,System.Int64)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: RandPerm(RandomGenerator, Int64)
  nameWithType: DoubleTensor.RandPerm(RandomGenerator, Int64)
  fullName: DoubleTensor.RandPerm(RandomGenerator, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Populates the tensor with random values from 0 to n, using the provided random source generator.
  syntax:
    content: public void RandPerm (TorchSharp.RandomGenerator source, long max);
    parameters:
    - id: source
      type: TorchSharp.RandomGenerator
      description: The random generator source
    - id: max
      type: System.Int64
      description: The upper limit for the values to be generated
  overload: TorchSharp.DoubleTensor.RandPerm*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Range(System.Double,System.Double,System.Double)
  id: Range(System.Double,System.Double,System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Range(Double, Double, Double)
  nameWithType: DoubleTensor.Range(Double, Double, Double)
  fullName: DoubleTensor.Range(Double, Double, Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Create a range spanning from xmin to xmax, with 'step' between each value.
  syntax:
    content: public static TorchSharp.DoubleTensor Range (double xmin, double xmax, double step);
    parameters:
    - id: xmin
      type: System.Double
      description: The lower bound of the range.
    - id: xmax
      type: System.Double
      description: The upper bound of the range.
    - id: step
      type: System.Double
      description: The value step.
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.Range*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Remainder(System.Double)
  id: Remainder(System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Remainder(Double)
  nameWithType: DoubleTensor.Remainder(Double)
  fullName: DoubleTensor.Remainder(Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the Remainder operation on each element of the tensor with the
                  <see paramref="value"></see> and returns a new tensor with the result.
  remarks: "If you want to avoid the allocation of a new tensor, you can use the \n              alternative method <xref href=\"PytorchSharp.Remainder(PytorchSharp.DoubleTensor, Double, PytorchSharp.Double)\"></xref>."
  syntax:
    content: public TorchSharp.DoubleTensor Remainder (double value);
    parameters:
    - id: value
      type: System.Double
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Remainder*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Remainder(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  id: Remainder(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Remainder(DoubleTensor, Double, DoubleTensor)
  nameWithType: DoubleTensor.Remainder(DoubleTensor, Double, DoubleTensor)
  fullName: DoubleTensor.Remainder(DoubleTensor, Double, DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the Remainder operation on each element of the source with the
                  provided scalar.   The result tensor specified as the last parameters
                  is resized to match the source.
  remarks: >-
    For each element in the <see paramref="source"></see> performs the Remainder operation
                   with <see paramref="value"></see>.   The result is stored in the <see paramref="result"></see>
                   tensor.
  syntax:
    content: public static void Remainder (TorchSharp.DoubleTensor source, double value, TorchSharp.DoubleTensor result);
    parameters:
    - id: source
      type: TorchSharp.DoubleTensor
      description: Source tensor on which the operation will take place.
    - id: value
      type: System.Double
      description: The scalar value that the operation uses.
    - id: result
      type: TorchSharp.DoubleTensor
      description: The tensor where the result will be placed
  overload: TorchSharp.DoubleTensor.Remainder*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Renorm(System.Double,System.Int32,System.Double)
  id: Renorm(System.Double,System.Int32,System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Renorm(Double, Int32, Double)
  nameWithType: DoubleTensor.Renorm(Double, Int32, Double)
  fullName: DoubleTensor.Renorm(Double, Int32, Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Compute the renorm of all tensor elements along the given dimension.
  syntax:
    content: public TorchSharp.DoubleTensor Renorm (double value, int dimension, double maxnorm);
    parameters:
    - id: value
      type: System.Double
      description: To be added.
    - id: dimension
      type: System.Int32
      description: The dimension to process along.
    - id: maxnorm
      type: System.Double
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.Renorm*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Resize1d(System.Int64)
  id: Resize1d(System.Int64)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Resize1d(Int64)
  nameWithType: DoubleTensor.Resize1d(Int64)
  fullName: DoubleTensor.Resize1d(Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Resizes the tensor to be one dimensional with the specified size, the contents of the tensor after this are undetermined.
  syntax:
    content: public void Resize1d (long size);
    parameters:
    - id: size
      type: System.Int64
      description: The desired new size for the first dimension of the tensor.
  overload: TorchSharp.DoubleTensor.Resize1d*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Resize2d(System.Int64,System.Int64)
  id: Resize2d(System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Resize2d(Int64, Int64)
  nameWithType: DoubleTensor.Resize2d(Int64, Int64)
  fullName: DoubleTensor.Resize2d(Int64, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Resizes the tensor to be two dimensional with the specified size, the contents of the tensor after this are undetermined.
  syntax:
    content: public void Resize2d (long size0, long size1);
    parameters:
    - id: size0
      type: System.Int64
      description: The desired new size for the first dimension of the tensor.
    - id: size1
      type: System.Int64
      description: The desired new size for the second dimension of the tensor.
  overload: TorchSharp.DoubleTensor.Resize2d*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Resize3d(System.Int64,System.Int64,System.Int64)
  id: Resize3d(System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Resize3d(Int64, Int64, Int64)
  nameWithType: DoubleTensor.Resize3d(Int64, Int64, Int64)
  fullName: DoubleTensor.Resize3d(Int64, Int64, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Resizes the tensor to be three dimensional with the specified size, the contents of the tensor after this are undetermined.
  syntax:
    content: public void Resize3d (long size0, long size1, long size2);
    parameters:
    - id: size0
      type: System.Int64
      description: The desired new size for the first dimension of the tensor.
    - id: size1
      type: System.Int64
      description: The desired new size for the second dimension of the tensor.
    - id: size2
      type: System.Int64
      description: The desired new size for the third dimension of the tensor.
  overload: TorchSharp.DoubleTensor.Resize3d*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Resize4d(System.Int64,System.Int64,System.Int64,System.Int64)
  id: Resize4d(System.Int64,System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Resize4d(Int64, Int64, Int64, Int64)
  nameWithType: DoubleTensor.Resize4d(Int64, Int64, Int64, Int64)
  fullName: DoubleTensor.Resize4d(Int64, Int64, Int64, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Resizes the tensor to be four dimensional with the specified size, the contents of the tensor after this are undetermined.
  syntax:
    content: public void Resize4d (long size0, long size1, long size2, long size3);
    parameters:
    - id: size0
      type: System.Int64
      description: The desired new size for the first dimension of the tensor.
    - id: size1
      type: System.Int64
      description: The desired new size for the second dimension of the tensor.
    - id: size2
      type: System.Int64
      description: The desired new size for the third dimension of the tensor.
    - id: size3
      type: System.Int64
      description: The desired new size for the fourth dimension of the tensor.
  overload: TorchSharp.DoubleTensor.Resize4d*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Resize5d(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
  id: Resize5d(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Resize5d(Int64, Int64, Int64, Int64, Int64)
  nameWithType: DoubleTensor.Resize5d(Int64, Int64, Int64, Int64, Int64)
  fullName: DoubleTensor.Resize5d(Int64, Int64, Int64, Int64, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Resizes the tensor to be five dimensional with the specified size, the contents of the tensor after this are undetermined.
  syntax:
    content: public void Resize5d (long size0, long size1, long size2, long size3, long size4);
    parameters:
    - id: size0
      type: System.Int64
      description: The desired new size for the first dimension of the tensor.
    - id: size1
      type: System.Int64
      description: The desired new size for the second dimension of the tensor.
    - id: size2
      type: System.Int64
      description: The desired new size for the third dimension of the tensor.
    - id: size3
      type: System.Int64
      description: The desired new size for the fourth dimension of the tensor.
    - id: size4
      type: System.Int64
      description: The desired new size for the fifth dimension of the tensor.
  overload: TorchSharp.DoubleTensor.Resize5d*
  exceptions: []
- uid: TorchSharp.DoubleTensor.ResizeAs(TorchSharp.DoubleTensor)
  id: ResizeAs(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: ResizeAs(DoubleTensor)
  nameWithType: DoubleTensor.ResizeAs(DoubleTensor)
  fullName: DoubleTensor.ResizeAs(DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Resizes the tensor to match the dimensions of the specified src tensor, the contents of the tensor after this are undetermined.
  syntax:
    content: public void ResizeAs (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: The source tensor whose shape will be mirrored by this tensor.
  overload: TorchSharp.DoubleTensor.ResizeAs*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Round
  id: Round
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Round()
  nameWithType: DoubleTensor.Round()
  fullName: DoubleTensor.Round()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the Round of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Round ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Round*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Round(TorchSharp.DoubleTensor)
  id: Round(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Round(DoubleTensor)
  nameWithType: DoubleTensor.Round(DoubleTensor)
  fullName: DoubleTensor.Round(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the Round of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Round (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Round*
  exceptions: []
- uid: TorchSharp.DoubleTensor.RShift(System.Double)
  id: RShift(System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: RShift(Double)
  nameWithType: DoubleTensor.RShift(Double)
  fullName: DoubleTensor.RShift(Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the RShift operation on each element of the tensor with the
                  <see paramref="value"></see> and returns a new tensor with the result.
  remarks: "If you want to avoid the allocation of a new tensor, you can use the \n              alternative method <xref href=\"PytorchSharp.RShift(PytorchSharp.DoubleTensor, Double, PytorchSharp.Double)\"></xref>."
  syntax:
    content: public TorchSharp.DoubleTensor RShift (double value);
    parameters:
    - id: value
      type: System.Double
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.RShift*
  exceptions: []
- uid: TorchSharp.DoubleTensor.RShift(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  id: RShift(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: RShift(DoubleTensor, Double, DoubleTensor)
  nameWithType: DoubleTensor.RShift(DoubleTensor, Double, DoubleTensor)
  fullName: DoubleTensor.RShift(DoubleTensor, Double, DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the RShift operation on each element of the source with the
                  provided scalar.   The result tensor specified as the last parameters
                  is resized to match the source.
  remarks: >-
    For each element in the <see paramref="source"></see> performs the RShift operation
                   with <see paramref="value"></see>.   The result is stored in the <see paramref="result"></see>
                   tensor.
  syntax:
    content: public static void RShift (TorchSharp.DoubleTensor source, double value, TorchSharp.DoubleTensor result);
    parameters:
    - id: source
      type: TorchSharp.DoubleTensor
      description: Source tensor on which the operation will take place.
    - id: value
      type: System.Double
      description: The scalar value that the operation uses.
    - id: result
      type: TorchSharp.DoubleTensor
      description: The tensor where the result will be placed
  overload: TorchSharp.DoubleTensor.RShift*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Rsqrt(TorchSharp.DoubleTensor)
  id: Rsqrt(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Rsqrt(DoubleTensor)
  nameWithType: DoubleTensor.Rsqrt(DoubleTensor)
  fullName: DoubleTensor.Rsqrt(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the Rsqrt of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Rsqrt (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Rsqrt*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Rsqrt
  id: Rsqrt
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Rsqrt()
  nameWithType: DoubleTensor.Rsqrt()
  fullName: DoubleTensor.Rsqrt()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the Rsqrt of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Rsqrt ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Rsqrt*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Scatter(System.Int32,TorchSharp.LongTensor,TorchSharp.DoubleTensor)
  id: Scatter(System.Int32,TorchSharp.LongTensor,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Scatter(Int32, LongTensor, DoubleTensor)
  nameWithType: DoubleTensor.Scatter(Int32, LongTensor, DoubleTensor)
  fullName: DoubleTensor.Scatter(Int32, LongTensor, DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Scatter
  syntax:
    content: public void Scatter (int dim, TorchSharp.LongTensor index, TorchSharp.DoubleTensor src);
    parameters:
    - id: dim
      type: System.Int32
      description: To be added.
    - id: index
      type: TorchSharp.LongTensor
      description: Indices of entries to copy.
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.Scatter*
  exceptions: []
- uid: TorchSharp.DoubleTensor.ScatterAdd(System.Int32,TorchSharp.LongTensor,TorchSharp.DoubleTensor)
  id: ScatterAdd(System.Int32,TorchSharp.LongTensor,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: ScatterAdd(Int32, LongTensor, DoubleTensor)
  nameWithType: DoubleTensor.ScatterAdd(Int32, LongTensor, DoubleTensor)
  fullName: DoubleTensor.ScatterAdd(Int32, LongTensor, DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: ScatterAdd
  syntax:
    content: public void ScatterAdd (int dim, TorchSharp.LongTensor index, TorchSharp.DoubleTensor src);
    parameters:
    - id: dim
      type: System.Int32
      description: To be added.
    - id: index
      type: TorchSharp.LongTensor
      description: Indices of entries to copy.
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.ScatterAdd*
  exceptions: []
- uid: TorchSharp.DoubleTensor.ScatterFill(System.Int32,TorchSharp.LongTensor,System.Double)
  id: ScatterFill(System.Int32,TorchSharp.LongTensor,System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: ScatterFill(Int32, LongTensor, Double)
  nameWithType: DoubleTensor.ScatterFill(Int32, LongTensor, Double)
  fullName: DoubleTensor.ScatterFill(Int32, LongTensor, Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: ScatterAdd
  syntax:
    content: public void ScatterFill (int dim, TorchSharp.LongTensor index, double value);
    parameters:
    - id: dim
      type: System.Int32
      description: To be added.
    - id: index
      type: TorchSharp.LongTensor
      description: Indices of entries to copy.
    - id: value
      type: System.Double
      description: To be added.
  overload: TorchSharp.DoubleTensor.ScatterFill*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Select(System.Int32,System.Int64)
  id: Select(System.Int32,System.Int64)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Select(Int32, Int64)
  nameWithType: DoubleTensor.Select(Int32, Int64)
  fullName: DoubleTensor.Select(Int32, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new Tensor which is a tensor slice at the given index in the dimension dim.
  remarks: 'The returned tensor has one less dimension: the dimension dim is removed. As a result, it is not possible to select() on a 1D tensor.'
  syntax:
    content: public TorchSharp.DoubleTensor Select (int dim, long slideIndex);
    parameters:
    - id: dim
      type: System.Int32
      description: Dimension to select
    - id: slideIndex
      type: System.Int64
      description: Beginning of the tensor slice
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.Select*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Set(TorchSharp.DoubleTensor)
  id: Set(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Set(DoubleTensor)
  nameWithType: DoubleTensor.Set(DoubleTensor)
  fullName: DoubleTensor.Set(DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: The tensor will use the same storage as the provided source, so any changes to that tensor are visible on this one.
  syntax:
    content: public void Set (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: The source tensor which contains the data..
  overload: TorchSharp.DoubleTensor.Set*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Shape
  id: Shape
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Shape
  nameWithType: DoubleTensor.Shape
  fullName: DoubleTensor.Shape
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns the tensor shape, this is an array whose size determines the number of dimensions on the tensor, and each element is the size of the dimension
  remarks: >-
    An array of size 0 is used for constants, an array of size 1 is used
                    for single-dimension arrays, where the dimension is the value of the
                    first element.   And so on.
  syntax:
    content: public long[] Shape { get; }
    return:
      type: System.Int64[]
      description: To be added.
  overload: TorchSharp.DoubleTensor.Shape*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Sigmoid
  id: Sigmoid
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Sigmoid()
  nameWithType: DoubleTensor.Sigmoid()
  fullName: DoubleTensor.Sigmoid()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the Sigmoid of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Sigmoid ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Sigmoid*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Sigmoid(TorchSharp.DoubleTensor)
  id: Sigmoid(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Sigmoid(DoubleTensor)
  nameWithType: DoubleTensor.Sigmoid(DoubleTensor)
  fullName: DoubleTensor.Sigmoid(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the Sigmoid of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Sigmoid (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Sigmoid*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Sign
  id: Sign
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Sign()
  nameWithType: DoubleTensor.Sign()
  fullName: DoubleTensor.Sign()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Computes the sign of the tensor.
  syntax:
    content: public TorchSharp.DoubleTensor Sign ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.Sign*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Sin
  id: Sin
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Sin()
  nameWithType: DoubleTensor.Sin()
  fullName: DoubleTensor.Sin()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the Sin of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Sin ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Sin*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Sin(TorchSharp.DoubleTensor)
  id: Sin(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Sin(DoubleTensor)
  nameWithType: DoubleTensor.Sin(DoubleTensor)
  fullName: DoubleTensor.Sin(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the Sin of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Sin (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Sin*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Sinh
  id: Sinh
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Sinh()
  nameWithType: DoubleTensor.Sinh()
  fullName: DoubleTensor.Sinh()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the Sinh of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Sinh ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Sinh*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Sinh(TorchSharp.DoubleTensor)
  id: Sinh(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Sinh(DoubleTensor)
  nameWithType: DoubleTensor.Sinh(DoubleTensor)
  fullName: DoubleTensor.Sinh(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the Sinh of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Sinh (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Sinh*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Sort(System.Int32,System.Boolean)
  id: Sort(System.Int32,System.Boolean)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Sort(Int32, Boolean)
  nameWithType: DoubleTensor.Sort(Int32, Boolean)
  fullName: DoubleTensor.Sort(Int32, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Sorts the elements of the tensor along the given dimension.
  syntax:
    content: public Tuple<TorchSharp.DoubleTensor,TorchSharp.LongTensor> Sort (int dimension, bool descending);
    parameters:
    - id: dimension
      type: System.Int32
      description: The dimension to sort along.
    - id: descending
      type: System.Boolean
      description: 0 if ascending, 1 if descending.
    return:
      type: System.Tuple{TorchSharp.DoubleTensor,TorchSharp.LongTensor}
      description: A tuple containing the values and indices of the sorted elements.
  overload: TorchSharp.DoubleTensor.Sort*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Sqrt(TorchSharp.DoubleTensor)
  id: Sqrt(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Sqrt(DoubleTensor)
  nameWithType: DoubleTensor.Sqrt(DoubleTensor)
  fullName: DoubleTensor.Sqrt(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the Sqrt of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Sqrt (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Sqrt*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Sqrt
  id: Sqrt
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Sqrt()
  nameWithType: DoubleTensor.Sqrt()
  fullName: DoubleTensor.Sqrt()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the Sqrt of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Sqrt ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Sqrt*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Squeeze
  id: Squeeze
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Squeeze()
  nameWithType: DoubleTensor.Squeeze()
  fullName: DoubleTensor.Squeeze()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Squeeze the tensor, i.e. remove all 1-sized dimensions.
  syntax:
    content: public void Squeeze ();
    parameters: []
  overload: TorchSharp.DoubleTensor.Squeeze*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Squeeze1d(TorchSharp.DoubleTensor,System.Int32)
  id: Squeeze1d(TorchSharp.DoubleTensor,System.Int32)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Squeeze1d(DoubleTensor, Int32)
  nameWithType: DoubleTensor.Squeeze1d(DoubleTensor, Int32)
  fullName: DoubleTensor.Squeeze1d(DoubleTensor, Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Squeeze the tensor, by removing the specified dimension.
  syntax:
    content: public void Squeeze1d (TorchSharp.DoubleTensor src, int dimension);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: The source tensor which contains the data.
    - id: dimension
      type: System.Int32
      description: The dimension to remove.
  overload: TorchSharp.DoubleTensor.Squeeze1d*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Std(System.Int32,System.Boolean,System.Boolean)
  id: Std(System.Int32,System.Boolean,System.Boolean)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Std(Int32, Boolean, Boolean)
  nameWithType: DoubleTensor.Std(Int32, Boolean, Boolean)
  fullName: DoubleTensor.Std(Int32, Boolean, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Compute the standard deviation of all tensor elements along the given dimension.
  syntax:
    content: public TorchSharp.DoubleTensor Std (int dimension, bool biased, bool keepdim);
    parameters:
    - id: dimension
      type: System.Int32
      description: The dimension to process along.
    - id: biased
      type: System.Boolean
      description: To be added.
    - id: keepdim
      type: System.Boolean
      description: true if the reduction dimension should be kept, false otherwise.
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.Std*
  exceptions: []
- uid: TorchSharp.DoubleTensor.StdAll(System.Boolean)
  id: StdAll(System.Boolean)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: StdAll(Boolean)
  nameWithType: DoubleTensor.StdAll(Boolean)
  fullName: DoubleTensor.StdAll(Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Compute the standard deviation of all tensor elements.
  syntax:
    content: public double StdAll (bool biased);
    parameters:
    - id: biased
      type: System.Boolean
      description: To be added.
    return:
      type: System.Double
      description: To be added.
  overload: TorchSharp.DoubleTensor.StdAll*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Storage
  id: Storage
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Storage
  nameWithType: DoubleTensor.Storage
  fullName: DoubleTensor.Storage
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns the associated storage for this tensor
  syntax:
    content: public TorchSharp.DoubleTensor.DoubleStorage Storage { get; }
    return:
      type: TorchSharp.DoubleTensor+DoubleStorage
      description: To be added.
  overload: TorchSharp.DoubleTensor.Storage*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Sub(System.Double)
  id: Sub(System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Sub(Double)
  nameWithType: DoubleTensor.Sub(Double)
  fullName: DoubleTensor.Sub(Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the Sub operation on each element of the tensor with the
                  <see paramref="value"></see> and returns a new tensor with the result.
  remarks: "If you want to avoid the allocation of a new tensor, you can use the \n              alternative method <xref href=\"PytorchSharp.Sub(PytorchSharp.DoubleTensor, Double, PytorchSharp.Double)\"></xref>."
  syntax:
    content: public TorchSharp.DoubleTensor Sub (double value);
    parameters:
    - id: value
      type: System.Double
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Sub*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Sub(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  id: Sub(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Sub(DoubleTensor, Double, DoubleTensor)
  nameWithType: DoubleTensor.Sub(DoubleTensor, Double, DoubleTensor)
  fullName: DoubleTensor.Sub(DoubleTensor, Double, DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the Sub operation on each element of the source with the
                  provided scalar.   The result tensor specified as the last parameters
                  is resized to match the source.
  remarks: >-
    For each element in the <see paramref="source"></see> performs the Sub operation
                   with <see paramref="value"></see>.   The result is stored in the <see paramref="result"></see>
                   tensor.
  syntax:
    content: public static void Sub (TorchSharp.DoubleTensor source, double value, TorchSharp.DoubleTensor result);
    parameters:
    - id: source
      type: TorchSharp.DoubleTensor
      description: Source tensor on which the operation will take place.
    - id: value
      type: System.Double
      description: The scalar value that the operation uses.
    - id: result
      type: TorchSharp.DoubleTensor
      description: The tensor where the result will be placed
  overload: TorchSharp.DoubleTensor.Sub*
  exceptions: []
- uid: TorchSharp.DoubleTensor.SubScaled(System.Double,System.Double)
  id: SubScaled(System.Double,System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: SubScaled(Double, Double)
  nameWithType: DoubleTensor.SubScaled(Double, Double)
  fullName: DoubleTensor.SubScaled(Double, Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an SubScaled of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.DoubleTensor SubScaled (double value1, double value2);
    parameters:
    - id: value1
      type: System.Double
      description: To be added.
    - id: value2
      type: System.Double
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.SubScaled*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Sum(System.Int32,System.Boolean)
  id: Sum(System.Int32,System.Boolean)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Sum(Int32, Boolean)
  nameWithType: DoubleTensor.Sum(Int32, Boolean)
  fullName: DoubleTensor.Sum(Int32, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Computes the sum of all the elements of the tensor along the given dimension.
  syntax:
    content: public TorchSharp.DoubleTensor Sum (int dimension, bool keepdim);
    parameters:
    - id: dimension
      type: System.Int32
      description: The dimension to process along.
    - id: keepdim
      type: System.Boolean
      description: true if the reduction dimension should be kept, false otherwise.
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.Sum*
  exceptions: []
- uid: TorchSharp.DoubleTensor.SumAll
  id: SumAll
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: SumAll()
  nameWithType: DoubleTensor.SumAll()
  fullName: DoubleTensor.SumAll()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns the sum of the elements in the tensor.
  syntax:
    content: public double SumAll ();
    parameters: []
    return:
      type: System.Double
      description: The sum of the tensor.
  overload: TorchSharp.DoubleTensor.SumAll*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Take(TorchSharp.DoubleTensor,TorchSharp.LongTensor)
  id: Take(TorchSharp.DoubleTensor,TorchSharp.LongTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Take(DoubleTensor, LongTensor)
  nameWithType: DoubleTensor.Take(DoubleTensor, LongTensor)
  fullName: DoubleTensor.Take(DoubleTensor, LongTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Take
  syntax:
    content: public void Take (TorchSharp.DoubleTensor src, TorchSharp.LongTensor index);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    - id: index
      type: TorchSharp.LongTensor
      description: Indices of entries to copy.
  overload: TorchSharp.DoubleTensor.Take*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Tan
  id: Tan
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Tan()
  nameWithType: DoubleTensor.Tan()
  fullName: DoubleTensor.Tan()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the Tan of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Tan ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Tan*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Tan(TorchSharp.DoubleTensor)
  id: Tan(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Tan(DoubleTensor)
  nameWithType: DoubleTensor.Tan(DoubleTensor)
  fullName: DoubleTensor.Tan(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the Tan of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Tan (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Tan*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Tanh
  id: Tanh
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Tanh()
  nameWithType: DoubleTensor.Tanh()
  fullName: DoubleTensor.Tanh()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the Tanh of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Tanh ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Tanh*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Tanh(TorchSharp.DoubleTensor)
  id: Tanh(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Tanh(DoubleTensor)
  nameWithType: DoubleTensor.Tanh(DoubleTensor)
  fullName: DoubleTensor.Tanh(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the Tanh of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Tanh (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Tanh*
  exceptions: []
- uid: TorchSharp.DoubleTensor.TopK(System.Int64,System.Int32,System.Int32,System.Boolean)
  id: TopK(System.Int64,System.Int32,System.Int32,System.Boolean)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: TopK(Int64, Int32, Int32, Boolean)
  nameWithType: DoubleTensor.TopK(Int64, Int32, Int32, Boolean)
  fullName: DoubleTensor.TopK(Int64, Int32, Int32, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Finds the top k of all the elements of the tensor along the given dimension.
  syntax:
    content: public Tuple<TorchSharp.DoubleTensor,TorchSharp.LongTensor> TopK (long k, int dim, int dir, bool sorted);
    parameters:
    - id: k
      type: System.Int64
      description: The number of elements to fetch.
    - id: dim
      type: System.Int32
      description: The dimension along which to sort and find k elements.
    - id: dir
      type: System.Int32
      description: 0 if ascending, 1 if descending.
    - id: sorted
      type: System.Boolean
      description: 1 if the result should be sorted, 0 if they should keep their original order.
    return:
      type: System.Tuple{TorchSharp.DoubleTensor,TorchSharp.LongTensor}
      description: A tuple containing the values and indices of the top 'k' elements.
  overload: TorchSharp.DoubleTensor.TopK*
  exceptions: []
- uid: TorchSharp.DoubleTensor.ToString
  id: ToString
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: ToString()
  nameWithType: DoubleTensor.ToString()
  fullName: DoubleTensor.ToString()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Get a string representation of the tensor.
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: To be added.
  overload: TorchSharp.DoubleTensor.ToString*
  exceptions: []
- uid: TorchSharp.DoubleTensor.TPow(System.Double)
  id: TPow(System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: TPow(Double)
  nameWithType: DoubleTensor.TPow(Double)
  fullName: DoubleTensor.TPow(Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with <see paramref="x"></see> raised to the power of <see paramref="this"></see>.
  syntax:
    content: public TorchSharp.DoubleTensor TPow (double x);
    parameters:
    - id: x
      type: System.Double
      description: The base.
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.TPow*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Trace
  id: Trace
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Trace()
  nameWithType: DoubleTensor.Trace()
  fullName: DoubleTensor.Trace()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Computes the trace of the tensor.
  syntax:
    content: public double Trace ();
    parameters: []
    return:
      type: System.Double
      description: To be added.
  overload: TorchSharp.DoubleTensor.Trace*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Transpose(System.Int32,System.Int32)
  id: Transpose(System.Int32,System.Int32)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Transpose(Int32, Int32)
  nameWithType: DoubleTensor.Transpose(Int32, Int32)
  fullName: DoubleTensor.Transpose(Int32, Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a tensor where dimensions dim1 and dim2 have been swapped.
  syntax:
    content: public TorchSharp.DoubleTensor Transpose (int dim1, int dim2);
    parameters:
    - id: dim1
      type: System.Int32
      description: First dimension
    - id: dim2
      type: System.Int32
      description: Second dimension
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.Transpose*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Trigamma
  id: Trigamma
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Trigamma()
  nameWithType: DoubleTensor.Trigamma()
  fullName: DoubleTensor.Trigamma()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the Trigamma of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Trigamma ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Trigamma*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Trigamma(TorchSharp.DoubleTensor)
  id: Trigamma(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Trigamma(DoubleTensor)
  nameWithType: DoubleTensor.Trigamma(DoubleTensor)
  fullName: DoubleTensor.Trigamma(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the Trigamma of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Trigamma (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Trigamma*
  exceptions: []
- uid: TorchSharp.DoubleTensor.TriL(System.Int64)
  id: TriL(System.Int64)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: TriL(Int64)
  nameWithType: DoubleTensor.TriL(Int64)
  fullName: DoubleTensor.TriL(Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Lower triangle.
  syntax:
    content: public TorchSharp.DoubleTensor TriL (long k);
    parameters:
    - id: k
      type: System.Int64
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.TriL*
  exceptions: []
- uid: TorchSharp.DoubleTensor.TriU(System.Int64)
  id: TriU(System.Int64)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: TriU(Int64)
  nameWithType: DoubleTensor.TriU(Int64)
  fullName: DoubleTensor.TriU(Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Upper triangle.
  syntax:
    content: public TorchSharp.DoubleTensor TriU (long k);
    parameters:
    - id: k
      type: System.Int64
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.TriU*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Trunc
  id: Trunc
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Trunc()
  nameWithType: DoubleTensor.Trunc()
  fullName: DoubleTensor.Trunc()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the Trunc of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Trunc ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Trunc*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Trunc(TorchSharp.DoubleTensor)
  id: Trunc(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Trunc(DoubleTensor)
  nameWithType: DoubleTensor.Trunc(DoubleTensor)
  fullName: DoubleTensor.Trunc(DoubleTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns a new tensor with the Trunc of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor Trunc (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.Trunc*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Unfold(System.Int32,System.Int64,System.Int64)
  id: Unfold(System.Int32,System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Unfold(Int32, Int64, Int64)
  nameWithType: DoubleTensor.Unfold(Int32, Int64, Int64)
  fullName: DoubleTensor.Unfold(Int32, Int64, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a tensor which contains all slices of size size in the dimension dim. Step between two slices is given by step.
  syntax:
    content: public TorchSharp.DoubleTensor Unfold (int dim, long size, long step);
    parameters:
    - id: dim
      type: System.Int32
      description: To be added.
    - id: size
      type: System.Int64
      description: To be added.
    - id: step
      type: System.Int64
      description: To be added.
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.Unfold*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Uniform(TorchSharp.RandomGenerator,System.Double,System.Double)
  id: Uniform(TorchSharp.RandomGenerator,System.Double,System.Double)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Uniform(RandomGenerator, Double, Double)
  nameWithType: DoubleTensor.Uniform(RandomGenerator, Double, Double)
  fullName: DoubleTensor.Uniform(RandomGenerator, Double, Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Fills the tensor with values according to a Bernoulli distribution.
  syntax:
    content: public void Uniform (TorchSharp.RandomGenerator source, double min, double max);
    parameters:
    - id: source
      type: TorchSharp.RandomGenerator
      description: The random generator source
    - id: min
      type: System.Double
      description: The lower bound for the random number range.
    - id: max
      type: System.Double
      description: The upper bound for the random number range.
  overload: TorchSharp.DoubleTensor.Uniform*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Unsqueeze1d(TorchSharp.DoubleTensor,System.Int32)
  id: Unsqueeze1d(TorchSharp.DoubleTensor,System.Int32)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Unsqueeze1d(DoubleTensor, Int32)
  nameWithType: DoubleTensor.Unsqueeze1d(DoubleTensor, Int32)
  fullName: DoubleTensor.Unsqueeze1d(DoubleTensor, Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Unsqueeze the tensor, by inserting the specified dimension of size 1.
  syntax:
    content: public void Unsqueeze1d (TorchSharp.DoubleTensor src, int dimension);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: The source tensor which contains the data.
    - id: dimension
      type: System.Int32
      description: The dimension to insert.
  overload: TorchSharp.DoubleTensor.Unsqueeze1d*
  exceptions: []
- uid: TorchSharp.DoubleTensor.Var(System.Int32,System.Boolean,System.Boolean)
  id: Var(System.Int32,System.Boolean,System.Boolean)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: Var(Int32, Boolean, Boolean)
  nameWithType: DoubleTensor.Var(Int32, Boolean, Boolean)
  fullName: DoubleTensor.Var(Int32, Boolean, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Compute the variance of all tensor elements along the given dimension.
  syntax:
    content: public TorchSharp.DoubleTensor Var (int dimension, bool biased, bool keepdim);
    parameters:
    - id: dimension
      type: System.Int32
      description: The dimension to process along.
    - id: biased
      type: System.Boolean
      description: To be added.
    - id: keepdim
      type: System.Boolean
      description: true if the reduction dimension should be kept, false otherwise.
    return:
      type: TorchSharp.DoubleTensor
      description: To be added.
  overload: TorchSharp.DoubleTensor.Var*
  exceptions: []
- uid: TorchSharp.DoubleTensor.VarAll(System.Boolean)
  id: VarAll(System.Boolean)
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: VarAll(Boolean)
  nameWithType: DoubleTensor.VarAll(Boolean)
  fullName: DoubleTensor.VarAll(Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Compute the variance of all tensor elements.
  syntax:
    content: public double VarAll (bool biased);
    parameters:
    - id: biased
      type: System.Boolean
      description: To be added.
    return:
      type: System.Double
      description: To be added.
  overload: TorchSharp.DoubleTensor.VarAll*
  exceptions: []
- uid: TorchSharp.DoubleTensor.ZeroFill
  id: ZeroFill
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: ZeroFill()
  nameWithType: DoubleTensor.ZeroFill()
  fullName: DoubleTensor.ZeroFill()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Fills the tensor with zeros
  syntax:
    content: public void ZeroFill ();
    parameters: []
  overload: TorchSharp.DoubleTensor.ZeroFill*
  exceptions: []
- uid: TorchSharp.DoubleTensor.ZerosLike
  id: ZerosLike
  parent: TorchSharp.DoubleTensor
  langs:
  - csharp
  name: ZerosLike()
  nameWithType: DoubleTensor.ZerosLike()
  fullName: DoubleTensor.ZerosLike()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new tensor with the ZerosLike of the elements of <see paramref="src"></see>
  syntax:
    content: public TorchSharp.DoubleTensor ZerosLike ();
    parameters: []
    return:
      type: TorchSharp.DoubleTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.DoubleTensor.ZerosLike*
  exceptions: []
references:
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TorchSharp.DoubleTensor.#ctor
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: DoubleTensor()
  nameWithType: DoubleTensor.DoubleTensor()
  fullName: DoubleTensor.DoubleTensor()
- uid: TorchSharp.DoubleTensor.#ctor(System.Int64)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: DoubleTensor(Int64)
  nameWithType: DoubleTensor.DoubleTensor(Int64)
  fullName: DoubleTensor.DoubleTensor(Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: TorchSharp.DoubleTensor.#ctor(System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: DoubleTensor(Int64, Int64)
  nameWithType: DoubleTensor.DoubleTensor(Int64, Int64)
  fullName: DoubleTensor.DoubleTensor(Int64, Int64)
- uid: TorchSharp.DoubleTensor.#ctor(System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: DoubleTensor(Int64, Int64, Int64)
  nameWithType: DoubleTensor.DoubleTensor(Int64, Int64, Int64)
  fullName: DoubleTensor.DoubleTensor(Int64, Int64, Int64)
- uid: TorchSharp.DoubleTensor.#ctor(System.Int64,System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: DoubleTensor(Int64, Int64, Int64, Int64)
  nameWithType: DoubleTensor.DoubleTensor(Int64, Int64, Int64, Int64)
  fullName: DoubleTensor.DoubleTensor(Int64, Int64, Int64, Int64)
- uid: TorchSharp.DoubleTensor.Abs
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Abs()
  nameWithType: DoubleTensor.Abs()
  fullName: DoubleTensor.Abs()
- uid: TorchSharp.DoubleTensor
  parent: TorchSharp
  isExternal: false
  name: DoubleTensor
  nameWithType: DoubleTensor
  fullName: TorchSharp.DoubleTensor
- uid: TorchSharp.DoubleTensor.Abs(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Abs(DoubleTensor)
  nameWithType: DoubleTensor.Abs(DoubleTensor)
  fullName: DoubleTensor.Abs(DoubleTensor)
- uid: TorchSharp.DoubleTensor.Acos
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Acos()
  nameWithType: DoubleTensor.Acos()
  fullName: DoubleTensor.Acos()
- uid: TorchSharp.DoubleTensor.Acos(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Acos(DoubleTensor)
  nameWithType: DoubleTensor.Acos(DoubleTensor)
  fullName: DoubleTensor.Acos(DoubleTensor)
- uid: TorchSharp.DoubleTensor.Add(System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Add(Double)
  nameWithType: DoubleTensor.Add(Double)
  fullName: DoubleTensor.Add(Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: TorchSharp.DoubleTensor.Add(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Add(DoubleTensor, Double, DoubleTensor)
  nameWithType: DoubleTensor.Add(DoubleTensor, Double, DoubleTensor)
  fullName: DoubleTensor.Add(DoubleTensor, Double, DoubleTensor)
- uid: TorchSharp.DoubleTensor.AddBMM(System.Double,System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: AddBMM(Double, Double, DoubleTensor, DoubleTensor)
  nameWithType: DoubleTensor.AddBMM(Double, Double, DoubleTensor, DoubleTensor)
  fullName: DoubleTensor.AddBMM(Double, Double, DoubleTensor, DoubleTensor)
- uid: TorchSharp.DoubleTensor.AddCDiv(System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: AddCDiv(Double, DoubleTensor, DoubleTensor)
  nameWithType: DoubleTensor.AddCDiv(Double, DoubleTensor, DoubleTensor)
  fullName: DoubleTensor.AddCDiv(Double, DoubleTensor, DoubleTensor)
- uid: TorchSharp.DoubleTensor.AddCMul(System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: AddCMul(Double, DoubleTensor, DoubleTensor)
  nameWithType: DoubleTensor.AddCMul(Double, DoubleTensor, DoubleTensor)
  fullName: DoubleTensor.AddCMul(Double, DoubleTensor, DoubleTensor)
- uid: TorchSharp.DoubleTensor.AddMM(System.Double,System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: AddMM(Double, Double, DoubleTensor, DoubleTensor)
  nameWithType: DoubleTensor.AddMM(Double, Double, DoubleTensor, DoubleTensor)
  fullName: DoubleTensor.AddMM(Double, Double, DoubleTensor, DoubleTensor)
- uid: TorchSharp.DoubleTensor.AddMV(System.Double,System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: AddMV(Double, Double, DoubleTensor, DoubleTensor)
  nameWithType: DoubleTensor.AddMV(Double, Double, DoubleTensor, DoubleTensor)
  fullName: DoubleTensor.AddMV(Double, Double, DoubleTensor, DoubleTensor)
- uid: TorchSharp.DoubleTensor.AddR(System.Double,System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: AddR(Double, Double, DoubleTensor, DoubleTensor)
  nameWithType: DoubleTensor.AddR(Double, Double, DoubleTensor, DoubleTensor)
  fullName: DoubleTensor.AddR(Double, Double, DoubleTensor, DoubleTensor)
- uid: TorchSharp.DoubleTensor.AddScaled(System.Double,System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: AddScaled(Double, Double)
  nameWithType: DoubleTensor.AddScaled(Double, Double)
  fullName: DoubleTensor.AddScaled(Double, Double)
- uid: TorchSharp.DoubleTensor.ARange(System.Double,System.Double,System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: ARange(Double, Double, Double)
  nameWithType: DoubleTensor.ARange(Double, Double, Double)
  fullName: DoubleTensor.ARange(Double, Double, Double)
- uid: TorchSharp.DoubleTensor.Asin
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Asin()
  nameWithType: DoubleTensor.Asin()
  fullName: DoubleTensor.Asin()
- uid: TorchSharp.DoubleTensor.Asin(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Asin(DoubleTensor)
  nameWithType: DoubleTensor.Asin(DoubleTensor)
  fullName: DoubleTensor.Asin(DoubleTensor)
- uid: TorchSharp.DoubleTensor.Atan
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Atan()
  nameWithType: DoubleTensor.Atan()
  fullName: DoubleTensor.Atan()
- uid: TorchSharp.DoubleTensor.Atan(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Atan(DoubleTensor)
  nameWithType: DoubleTensor.Atan(DoubleTensor)
  fullName: DoubleTensor.Atan(DoubleTensor)
- uid: TorchSharp.DoubleTensor.Atan2
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Atan2()
  nameWithType: DoubleTensor.Atan2()
  fullName: DoubleTensor.Atan2()
- uid: TorchSharp.DoubleTensor.Atan2(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Atan2(DoubleTensor)
  nameWithType: DoubleTensor.Atan2(DoubleTensor)
  fullName: DoubleTensor.Atan2(DoubleTensor)
- uid: TorchSharp.DoubleTensor.BAddBMM(System.Double,System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: BAddBMM(Double, Double, DoubleTensor, DoubleTensor)
  nameWithType: DoubleTensor.BAddBMM(Double, Double, DoubleTensor, DoubleTensor)
  fullName: DoubleTensor.BAddBMM(Double, Double, DoubleTensor, DoubleTensor)
- uid: TorchSharp.DoubleTensor.BHistc(System.Int64,System.Double,System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: BHistc(Int64, Double, Double)
  nameWithType: DoubleTensor.BHistc(Int64, Double, Double)
  fullName: DoubleTensor.BHistc(Int64, Double, Double)
- uid: TorchSharp.DoubleTensor.BitAnd(System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: BitAnd(Double)
  nameWithType: DoubleTensor.BitAnd(Double)
  fullName: DoubleTensor.BitAnd(Double)
- uid: TorchSharp.DoubleTensor.BitAnd(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: BitAnd(DoubleTensor, Double, DoubleTensor)
  nameWithType: DoubleTensor.BitAnd(DoubleTensor, Double, DoubleTensor)
  fullName: DoubleTensor.BitAnd(DoubleTensor, Double, DoubleTensor)
- uid: TorchSharp.DoubleTensor.CAdd(System.Double,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CAdd(Double, DoubleTensor)
  nameWithType: DoubleTensor.CAdd(Double, DoubleTensor)
  fullName: DoubleTensor.CAdd(Double, DoubleTensor)
- uid: TorchSharp.DoubleTensor.CappedRandom(TorchSharp.RandomGenerator,System.Int64)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CappedRandom(RandomGenerator, Int64)
  nameWithType: DoubleTensor.CappedRandom(RandomGenerator, Int64)
  fullName: DoubleTensor.CappedRandom(RandomGenerator, Int64)
- uid: TorchSharp.RandomGenerator
  parent: TorchSharp
  isExternal: false
  name: RandomGenerator
  nameWithType: RandomGenerator
  fullName: TorchSharp.RandomGenerator
- uid: TorchSharp.DoubleTensor.Cauchy(TorchSharp.RandomGenerator,System.Double,System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Cauchy(RandomGenerator, Double, Double)
  nameWithType: DoubleTensor.Cauchy(RandomGenerator, Double, Double)
  fullName: DoubleTensor.Cauchy(RandomGenerator, Double, Double)
- uid: TorchSharp.DoubleTensor.CBitAnd(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CBitAnd(DoubleTensor)
  nameWithType: DoubleTensor.CBitAnd(DoubleTensor)
  fullName: DoubleTensor.CBitAnd(DoubleTensor)
- uid: TorchSharp.DoubleTensor.CBitOr(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CBitOr(DoubleTensor)
  nameWithType: DoubleTensor.CBitOr(DoubleTensor)
  fullName: DoubleTensor.CBitOr(DoubleTensor)
- uid: TorchSharp.DoubleTensor.CBitXor(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CBitXor(DoubleTensor)
  nameWithType: DoubleTensor.CBitXor(DoubleTensor)
  fullName: DoubleTensor.CBitXor(DoubleTensor)
- uid: TorchSharp.DoubleTensor.CDiv(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CDiv(DoubleTensor)
  nameWithType: DoubleTensor.CDiv(DoubleTensor)
  fullName: DoubleTensor.CDiv(DoubleTensor)
- uid: TorchSharp.DoubleTensor.Ceil
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Ceil()
  nameWithType: DoubleTensor.Ceil()
  fullName: DoubleTensor.Ceil()
- uid: TorchSharp.DoubleTensor.Ceil(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Ceil(DoubleTensor)
  nameWithType: DoubleTensor.Ceil(DoubleTensor)
  fullName: DoubleTensor.Ceil(DoubleTensor)
- uid: TorchSharp.DoubleTensor.CFMod(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CFMod(DoubleTensor)
  nameWithType: DoubleTensor.CFMod(DoubleTensor)
  fullName: DoubleTensor.CFMod(DoubleTensor)
- uid: TorchSharp.DoubleTensor.cinv
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: cinv()
  nameWithType: DoubleTensor.cinv()
  fullName: DoubleTensor.cinv()
- uid: TorchSharp.DoubleTensor.cinv(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: cinv(DoubleTensor)
  nameWithType: DoubleTensor.cinv(DoubleTensor)
  fullName: DoubleTensor.cinv(DoubleTensor)
- uid: TorchSharp.DoubleTensor.Clamp(System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Clamp(Double)
  nameWithType: DoubleTensor.Clamp(Double)
  fullName: DoubleTensor.Clamp(Double)
- uid: TorchSharp.DoubleTensor.Clamp(System.Double,System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Clamp(Double, Double)
  nameWithType: DoubleTensor.Clamp(Double, Double)
  fullName: DoubleTensor.Clamp(Double, Double)
- uid: TorchSharp.DoubleTensor.Clamp(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Clamp(DoubleTensor, Double, DoubleTensor)
  nameWithType: DoubleTensor.Clamp(DoubleTensor, Double, DoubleTensor)
  fullName: DoubleTensor.Clamp(DoubleTensor, Double, DoubleTensor)
- uid: TorchSharp.DoubleTensor.ClampedRandom(TorchSharp.RandomGenerator,System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: ClampedRandom(RandomGenerator, Int64, Int64)
  nameWithType: DoubleTensor.ClampedRandom(RandomGenerator, Int64, Int64)
  fullName: DoubleTensor.ClampedRandom(RandomGenerator, Int64, Int64)
- uid: TorchSharp.DoubleTensor.Clone
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Clone()
  nameWithType: DoubleTensor.Clone()
  fullName: DoubleTensor.Clone()
- uid: TorchSharp.DoubleTensor.CLShift(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CLShift(DoubleTensor)
  nameWithType: DoubleTensor.CLShift(DoubleTensor)
  fullName: DoubleTensor.CLShift(DoubleTensor)
- uid: TorchSharp.DoubleTensor.CMax(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CMax(DoubleTensor)
  nameWithType: DoubleTensor.CMax(DoubleTensor)
  fullName: DoubleTensor.CMax(DoubleTensor)
- uid: TorchSharp.DoubleTensor.CMaxValue(System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CMaxValue(Double)
  nameWithType: DoubleTensor.CMaxValue(Double)
  fullName: DoubleTensor.CMaxValue(Double)
- uid: TorchSharp.DoubleTensor.CMin(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CMin(DoubleTensor)
  nameWithType: DoubleTensor.CMin(DoubleTensor)
  fullName: DoubleTensor.CMin(DoubleTensor)
- uid: TorchSharp.DoubleTensor.CMinValue(System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CMinValue(Double)
  nameWithType: DoubleTensor.CMinValue(Double)
  fullName: DoubleTensor.CMinValue(Double)
- uid: TorchSharp.DoubleTensor.CMul(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CMul(DoubleTensor)
  nameWithType: DoubleTensor.CMul(DoubleTensor)
  fullName: DoubleTensor.CMul(DoubleTensor)
- uid: TorchSharp.DoubleTensor.Concatenate(TorchSharp.DoubleTensor,System.Int32)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Concatenate(DoubleTensor, Int32)
  nameWithType: DoubleTensor.Concatenate(DoubleTensor, Int32)
  fullName: DoubleTensor.Concatenate(DoubleTensor, Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TorchSharp.DoubleTensor.Copy(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Copy(DoubleTensor)
  nameWithType: DoubleTensor.Copy(DoubleTensor)
  fullName: DoubleTensor.Copy(DoubleTensor)
- uid: TorchSharp.DoubleTensor.CopyByte(TorchSharp.ByteTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CopyByte(ByteTensor)
  nameWithType: DoubleTensor.CopyByte(ByteTensor)
  fullName: DoubleTensor.CopyByte(ByteTensor)
- uid: TorchSharp.ByteTensor
  parent: TorchSharp
  isExternal: false
  name: ByteTensor
  nameWithType: ByteTensor
  fullName: TorchSharp.ByteTensor
- uid: TorchSharp.DoubleTensor.CopyDouble(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CopyDouble(DoubleTensor)
  nameWithType: DoubleTensor.CopyDouble(DoubleTensor)
  fullName: DoubleTensor.CopyDouble(DoubleTensor)
- uid: TorchSharp.DoubleTensor.CopyFloat(TorchSharp.FloatTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CopyFloat(FloatTensor)
  nameWithType: DoubleTensor.CopyFloat(FloatTensor)
  fullName: DoubleTensor.CopyFloat(FloatTensor)
- uid: TorchSharp.FloatTensor
  parent: TorchSharp
  isExternal: false
  name: FloatTensor
  nameWithType: FloatTensor
  fullName: TorchSharp.FloatTensor
- uid: TorchSharp.DoubleTensor.CopyInt(TorchSharp.IntTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CopyInt(IntTensor)
  nameWithType: DoubleTensor.CopyInt(IntTensor)
  fullName: DoubleTensor.CopyInt(IntTensor)
- uid: TorchSharp.IntTensor
  parent: TorchSharp
  isExternal: false
  name: IntTensor
  nameWithType: IntTensor
  fullName: TorchSharp.IntTensor
- uid: TorchSharp.DoubleTensor.CopyLong(TorchSharp.LongTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CopyLong(LongTensor)
  nameWithType: DoubleTensor.CopyLong(LongTensor)
  fullName: DoubleTensor.CopyLong(LongTensor)
- uid: TorchSharp.LongTensor
  parent: TorchSharp
  isExternal: false
  name: LongTensor
  nameWithType: LongTensor
  fullName: TorchSharp.LongTensor
- uid: TorchSharp.DoubleTensor.CopyShort(TorchSharp.ShortTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CopyShort(ShortTensor)
  nameWithType: DoubleTensor.CopyShort(ShortTensor)
  fullName: DoubleTensor.CopyShort(ShortTensor)
- uid: TorchSharp.ShortTensor
  parent: TorchSharp
  isExternal: false
  name: ShortTensor
  nameWithType: ShortTensor
  fullName: TorchSharp.ShortTensor
- uid: TorchSharp.DoubleTensor.Cos
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Cos()
  nameWithType: DoubleTensor.Cos()
  fullName: DoubleTensor.Cos()
- uid: TorchSharp.DoubleTensor.Cos(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Cos(DoubleTensor)
  nameWithType: DoubleTensor.Cos(DoubleTensor)
  fullName: DoubleTensor.Cos(DoubleTensor)
- uid: TorchSharp.DoubleTensor.Cosh
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Cosh()
  nameWithType: DoubleTensor.Cosh()
  fullName: DoubleTensor.Cosh()
- uid: TorchSharp.DoubleTensor.Cosh(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Cosh(DoubleTensor)
  nameWithType: DoubleTensor.Cosh(DoubleTensor)
  fullName: DoubleTensor.Cosh(DoubleTensor)
- uid: TorchSharp.DoubleTensor.CPow(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CPow(DoubleTensor)
  nameWithType: DoubleTensor.CPow(DoubleTensor)
  fullName: DoubleTensor.CPow(DoubleTensor)
- uid: TorchSharp.DoubleTensor.CRemainder(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CRemainder(DoubleTensor)
  nameWithType: DoubleTensor.CRemainder(DoubleTensor)
  fullName: DoubleTensor.CRemainder(DoubleTensor)
- uid: TorchSharp.DoubleTensor.CrossProduct(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CrossProduct(DoubleTensor)
  nameWithType: DoubleTensor.CrossProduct(DoubleTensor)
  fullName: DoubleTensor.CrossProduct(DoubleTensor)
- uid: TorchSharp.DoubleTensor.CSub(System.Double,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CSub(Double, DoubleTensor)
  nameWithType: DoubleTensor.CSub(Double, DoubleTensor)
  fullName: DoubleTensor.CSub(Double, DoubleTensor)
- uid: TorchSharp.DoubleTensor.CumulativeProd(System.Int32)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CumulativeProd(Int32)
  nameWithType: DoubleTensor.CumulativeProd(Int32)
  fullName: DoubleTensor.CumulativeProd(Int32)
- uid: TorchSharp.DoubleTensor.CumulativeSum(System.Int32)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CumulativeSum(Int32)
  nameWithType: DoubleTensor.CumulativeSum(Int32)
  fullName: DoubleTensor.CumulativeSum(Int32)
- uid: TorchSharp.DoubleTensor.Data
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Data
  nameWithType: DoubleTensor.Data
  fullName: DoubleTensor.Data
- uid: System.Double*
  parent: System
  isExternal: true
  name: Double*
  nameWithType: Double*
  fullName: System.Double*
  spec.csharp:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: TorchSharp.DoubleTensor.Diagonal(System.Int32)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Diagonal(Int32)
  nameWithType: DoubleTensor.Diagonal(Int32)
  fullName: DoubleTensor.Diagonal(Int32)
- uid: TorchSharp.DoubleTensor.Digamma
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Digamma()
  nameWithType: DoubleTensor.Digamma()
  fullName: DoubleTensor.Digamma()
- uid: TorchSharp.DoubleTensor.Digamma(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Digamma(DoubleTensor)
  nameWithType: DoubleTensor.Digamma(DoubleTensor)
  fullName: DoubleTensor.Digamma(DoubleTensor)
- uid: TorchSharp.DoubleTensor.Dimensions
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Dimensions
  nameWithType: DoubleTensor.Dimensions
  fullName: DoubleTensor.Dimensions
- uid: TorchSharp.DoubleTensor.DirichletGrad(TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: DirichletGrad(DoubleTensor, DoubleTensor)
  nameWithType: DoubleTensor.DirichletGrad(DoubleTensor, DoubleTensor)
  fullName: DoubleTensor.DirichletGrad(DoubleTensor, DoubleTensor)
- uid: TorchSharp.DoubleTensor.Dispose
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Dispose()
  nameWithType: DoubleTensor.Dispose()
  fullName: DoubleTensor.Dispose()
- uid: TorchSharp.DoubleTensor.Dispose(System.Boolean)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DoubleTensor.Dispose(Boolean)
  fullName: DoubleTensor.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TorchSharp.DoubleTensor.Dist(TorchSharp.DoubleTensor,System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Dist(DoubleTensor, Double)
  nameWithType: DoubleTensor.Dist(DoubleTensor, Double)
  fullName: DoubleTensor.Dist(DoubleTensor, Double)
- uid: TorchSharp.DoubleTensor.Div(System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Div(Double)
  nameWithType: DoubleTensor.Div(Double)
  fullName: DoubleTensor.Div(Double)
- uid: TorchSharp.DoubleTensor.Div(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Div(DoubleTensor, Double, DoubleTensor)
  nameWithType: DoubleTensor.Div(DoubleTensor, Double, DoubleTensor)
  fullName: DoubleTensor.Div(DoubleTensor, Double, DoubleTensor)
- uid: TorchSharp.DoubleTensor.Dot(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Dot(DoubleTensor)
  nameWithType: DoubleTensor.Dot(DoubleTensor)
  fullName: DoubleTensor.Dot(DoubleTensor)
- uid: TorchSharp.DoubleTensor.EqTensor(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: EqTensor(DoubleTensor)
  nameWithType: DoubleTensor.EqTensor(DoubleTensor)
  fullName: DoubleTensor.EqTensor(DoubleTensor)
- uid: TorchSharp.DoubleTensor.EqTensorT(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: EqTensorT(DoubleTensor)
  nameWithType: DoubleTensor.EqTensorT(DoubleTensor)
  fullName: DoubleTensor.EqTensorT(DoubleTensor)
- uid: TorchSharp.DoubleTensor.Equal(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Equal(DoubleTensor)
  nameWithType: DoubleTensor.Equal(DoubleTensor)
  fullName: DoubleTensor.Equal(DoubleTensor)
- uid: TorchSharp.DoubleTensor.EqValue(System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: EqValue(Double)
  nameWithType: DoubleTensor.EqValue(Double)
  fullName: DoubleTensor.EqValue(Double)
- uid: TorchSharp.DoubleTensor.EqValueT(System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: EqValueT(Double)
  nameWithType: DoubleTensor.EqValueT(Double)
  fullName: DoubleTensor.EqValueT(Double)
- uid: TorchSharp.DoubleTensor.Erf
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Erf()
  nameWithType: DoubleTensor.Erf()
  fullName: DoubleTensor.Erf()
- uid: TorchSharp.DoubleTensor.Erf(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Erf(DoubleTensor)
  nameWithType: DoubleTensor.Erf(DoubleTensor)
  fullName: DoubleTensor.Erf(DoubleTensor)
- uid: TorchSharp.DoubleTensor.Erfc
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Erfc()
  nameWithType: DoubleTensor.Erfc()
  fullName: DoubleTensor.Erfc()
- uid: TorchSharp.DoubleTensor.Erfc(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Erfc(DoubleTensor)
  nameWithType: DoubleTensor.Erfc(DoubleTensor)
  fullName: DoubleTensor.Erfc(DoubleTensor)
- uid: TorchSharp.DoubleTensor.Erfinv
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Erfinv()
  nameWithType: DoubleTensor.Erfinv()
  fullName: DoubleTensor.Erfinv()
- uid: TorchSharp.DoubleTensor.Erfinv(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Erfinv(DoubleTensor)
  nameWithType: DoubleTensor.Erfinv(DoubleTensor)
  fullName: DoubleTensor.Erfinv(DoubleTensor)
- uid: TorchSharp.DoubleTensor.Exp
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Exp()
  nameWithType: DoubleTensor.Exp()
  fullName: DoubleTensor.Exp()
- uid: TorchSharp.DoubleTensor.Exp(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Exp(DoubleTensor)
  nameWithType: DoubleTensor.Exp(DoubleTensor)
  fullName: DoubleTensor.Exp(DoubleTensor)
- uid: TorchSharp.DoubleTensor.Expm1
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Expm1()
  nameWithType: DoubleTensor.Expm1()
  fullName: DoubleTensor.Expm1()
- uid: TorchSharp.DoubleTensor.Expm1(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Expm1(DoubleTensor)
  nameWithType: DoubleTensor.Expm1(DoubleTensor)
  fullName: DoubleTensor.Expm1(DoubleTensor)
- uid: TorchSharp.DoubleTensor.Exponential(TorchSharp.RandomGenerator,System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Exponential(RandomGenerator, Double)
  nameWithType: DoubleTensor.Exponential(RandomGenerator, Double)
  fullName: DoubleTensor.Exponential(RandomGenerator, Double)
- uid: TorchSharp.DoubleTensor.Eye(System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Eye(Int64, Int64)
  nameWithType: DoubleTensor.Eye(Int64, Int64)
  fullName: DoubleTensor.Eye(Int64, Int64)
- uid: TorchSharp.DoubleTensor.Fill(System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Fill(Double)
  nameWithType: DoubleTensor.Fill(Double)
  fullName: DoubleTensor.Fill(Double)
- uid: TorchSharp.DoubleTensor.Finalize
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Finalize()
  nameWithType: DoubleTensor.Finalize()
  fullName: DoubleTensor.Finalize()
- uid: TorchSharp.DoubleTensor.Floor
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Floor()
  nameWithType: DoubleTensor.Floor()
  fullName: DoubleTensor.Floor()
- uid: TorchSharp.DoubleTensor.Floor(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Floor(DoubleTensor)
  nameWithType: DoubleTensor.Floor(DoubleTensor)
  fullName: DoubleTensor.Floor(DoubleTensor)
- uid: TorchSharp.DoubleTensor.Fmod(System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Fmod(Double)
  nameWithType: DoubleTensor.Fmod(Double)
  fullName: DoubleTensor.Fmod(Double)
- uid: TorchSharp.DoubleTensor.Fmod(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Fmod(DoubleTensor, Double, DoubleTensor)
  nameWithType: DoubleTensor.Fmod(DoubleTensor, Double, DoubleTensor)
  fullName: DoubleTensor.Fmod(DoubleTensor, Double, DoubleTensor)
- uid: TorchSharp.DoubleTensor.Frac
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Frac()
  nameWithType: DoubleTensor.Frac()
  fullName: DoubleTensor.Frac()
- uid: TorchSharp.DoubleTensor.Frac(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Frac(DoubleTensor)
  nameWithType: DoubleTensor.Frac(DoubleTensor)
  fullName: DoubleTensor.Frac(DoubleTensor)
- uid: TorchSharp.DoubleTensor.Gather(TorchSharp.DoubleTensor,System.Int32,TorchSharp.LongTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Gather(DoubleTensor, Int32, LongTensor)
  nameWithType: DoubleTensor.Gather(DoubleTensor, Int32, LongTensor)
  fullName: DoubleTensor.Gather(DoubleTensor, Int32, LongTensor)
- uid: TorchSharp.DoubleTensor.Geometric(TorchSharp.RandomGenerator,System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Geometric(RandomGenerator, Double)
  nameWithType: DoubleTensor.Geometric(RandomGenerator, Double)
  fullName: DoubleTensor.Geometric(RandomGenerator, Double)
- uid: TorchSharp.DoubleTensor.GeTensor(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: GeTensor(DoubleTensor)
  nameWithType: DoubleTensor.GeTensor(DoubleTensor)
  fullName: DoubleTensor.GeTensor(DoubleTensor)
- uid: TorchSharp.DoubleTensor.GeTensorT(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: GeTensorT(DoubleTensor)
  nameWithType: DoubleTensor.GeTensorT(DoubleTensor)
  fullName: DoubleTensor.GeTensorT(DoubleTensor)
- uid: TorchSharp.DoubleTensor.GetTensorDimension(System.Int32)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: GetTensorDimension(Int32)
  nameWithType: DoubleTensor.GetTensorDimension(Int32)
  fullName: DoubleTensor.GetTensorDimension(Int32)
- uid: TorchSharp.DoubleTensor.GetTensorStride(System.Int32)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: GetTensorStride(Int32)
  nameWithType: DoubleTensor.GetTensorStride(Int32)
  fullName: DoubleTensor.GetTensorStride(Int32)
- uid: TorchSharp.DoubleTensor.GeValue(System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: GeValue(Double)
  nameWithType: DoubleTensor.GeValue(Double)
  fullName: DoubleTensor.GeValue(Double)
- uid: TorchSharp.DoubleTensor.GeValueT(System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: GeValueT(Double)
  nameWithType: DoubleTensor.GeValueT(Double)
  fullName: DoubleTensor.GeValueT(Double)
- uid: TorchSharp.DoubleTensor.GtTensor(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: GtTensor(DoubleTensor)
  nameWithType: DoubleTensor.GtTensor(DoubleTensor)
  fullName: DoubleTensor.GtTensor(DoubleTensor)
- uid: TorchSharp.DoubleTensor.GtTensorT(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: GtTensorT(DoubleTensor)
  nameWithType: DoubleTensor.GtTensorT(DoubleTensor)
  fullName: DoubleTensor.GtTensorT(DoubleTensor)
- uid: TorchSharp.DoubleTensor.GtValue(System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: GtValue(Double)
  nameWithType: DoubleTensor.GtValue(Double)
  fullName: DoubleTensor.GtValue(Double)
- uid: TorchSharp.DoubleTensor.GtValueT(System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: GtValueT(Double)
  nameWithType: DoubleTensor.GtValueT(Double)
  fullName: DoubleTensor.GtValueT(Double)
- uid: TorchSharp.DoubleTensor.Histc(System.Int64,System.Double,System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Histc(Int64, Double, Double)
  nameWithType: DoubleTensor.Histc(Int64, Double, Double)
  fullName: DoubleTensor.Histc(Int64, Double, Double)
- uid: TorchSharp.DoubleTensor.IndexAdd(System.Int32,TorchSharp.LongTensor,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: IndexAdd(Int32, LongTensor, DoubleTensor)
  nameWithType: DoubleTensor.IndexAdd(Int32, LongTensor, DoubleTensor)
  fullName: DoubleTensor.IndexAdd(Int32, LongTensor, DoubleTensor)
- uid: TorchSharp.DoubleTensor.IndexCopy(System.Int32,TorchSharp.LongTensor,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: IndexCopy(Int32, LongTensor, DoubleTensor)
  nameWithType: DoubleTensor.IndexCopy(Int32, LongTensor, DoubleTensor)
  fullName: DoubleTensor.IndexCopy(Int32, LongTensor, DoubleTensor)
- uid: TorchSharp.DoubleTensor.IndexFill(System.Int32,TorchSharp.LongTensor,System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: IndexFill(Int32, LongTensor, Double)
  nameWithType: DoubleTensor.IndexFill(Int32, LongTensor, Double)
  fullName: DoubleTensor.IndexFill(Int32, LongTensor, Double)
- uid: TorchSharp.DoubleTensor.IndexSelect(System.Int32,TorchSharp.LongTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: IndexSelect(Int32, LongTensor)
  nameWithType: DoubleTensor.IndexSelect(Int32, LongTensor)
  fullName: DoubleTensor.IndexSelect(Int32, LongTensor)
- uid: TorchSharp.DoubleTensor.Item(System.Int64)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Item(Int64)
  nameWithType: DoubleTensor.Item(Int64)
  fullName: DoubleTensor.Item(Int64)
- uid: TorchSharp.DoubleTensor.Item(System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Item(Int64, Int64)
  nameWithType: DoubleTensor.Item(Int64, Int64)
  fullName: DoubleTensor.Item(Int64, Int64)
- uid: TorchSharp.DoubleTensor.Item(System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Item(Int64, Int64, Int64)
  nameWithType: DoubleTensor.Item(Int64, Int64, Int64)
  fullName: DoubleTensor.Item(Int64, Int64, Int64)
- uid: TorchSharp.DoubleTensor.Item(System.Int64,System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Item(Int64, Int64, Int64, Int64)
  nameWithType: DoubleTensor.Item(Int64, Int64, Int64, Int64)
  fullName: DoubleTensor.Item(Int64, Int64, Int64, Int64)
- uid: TorchSharp.DoubleTensor.KthValue(System.Int64,System.Int32,System.Boolean)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: KthValue(Int64, Int32, Boolean)
  nameWithType: DoubleTensor.KthValue(Int64, Int32, Boolean)
  fullName: DoubleTensor.KthValue(Int64, Int32, Boolean)
- uid: System.Tuple`2
  name: Tuple
  nameWithType: Tuple
  fullName: System.Tuple
- uid: System.Tuple{TorchSharp.DoubleTensor,TorchSharp.LongTensor}
  parent: System
  isExternal: true
  name: Tuple<DoubleTensor,LongTensor>
  nameWithType: Tuple<DoubleTensor,LongTensor>
  fullName: System.Tuple<TorchSharp.DoubleTensor,TorchSharp.LongTensor>
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TorchSharp.DoubleTensor
    name: DoubleTensor
    nameWithType: DoubleTensor
    fullName: TorchSharp.DoubleTensor
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TorchSharp.LongTensor
    name: LongTensor
    nameWithType: LongTensor
    fullName: TorchSharp.LongTensor
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TorchSharp.DoubleTensor.LERP(TorchSharp.DoubleTensor,System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: LERP(DoubleTensor, Double)
  nameWithType: DoubleTensor.LERP(DoubleTensor, Double)
  fullName: DoubleTensor.LERP(DoubleTensor, Double)
- uid: TorchSharp.DoubleTensor.LeTensor(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: LeTensor(DoubleTensor)
  nameWithType: DoubleTensor.LeTensor(DoubleTensor)
  fullName: DoubleTensor.LeTensor(DoubleTensor)
- uid: TorchSharp.DoubleTensor.LeTensorT(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: LeTensorT(DoubleTensor)
  nameWithType: DoubleTensor.LeTensorT(DoubleTensor)
  fullName: DoubleTensor.LeTensorT(DoubleTensor)
- uid: TorchSharp.DoubleTensor.LeValue(System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: LeValue(Double)
  nameWithType: DoubleTensor.LeValue(Double)
  fullName: DoubleTensor.LeValue(Double)
- uid: TorchSharp.DoubleTensor.LeValueT(System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: LeValueT(Double)
  nameWithType: DoubleTensor.LeValueT(Double)
  fullName: DoubleTensor.LeValueT(Double)
- uid: TorchSharp.DoubleTensor.Lgamma
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Lgamma()
  nameWithType: DoubleTensor.Lgamma()
  fullName: DoubleTensor.Lgamma()
- uid: TorchSharp.DoubleTensor.Lgamma(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Lgamma(DoubleTensor)
  nameWithType: DoubleTensor.Lgamma(DoubleTensor)
  fullName: DoubleTensor.Lgamma(DoubleTensor)
- uid: TorchSharp.DoubleTensor.Linspace(System.Double,System.Double,System.Int64)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Linspace(Double, Double, Int64)
  nameWithType: DoubleTensor.Linspace(Double, Double, Int64)
  fullName: DoubleTensor.Linspace(Double, Double, Int64)
- uid: TorchSharp.DoubleTensor.Log
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Log()
  nameWithType: DoubleTensor.Log()
  fullName: DoubleTensor.Log()
- uid: TorchSharp.DoubleTensor.Log(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Log(DoubleTensor)
  nameWithType: DoubleTensor.Log(DoubleTensor)
  fullName: DoubleTensor.Log(DoubleTensor)
- uid: TorchSharp.DoubleTensor.Log10
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Log10()
  nameWithType: DoubleTensor.Log10()
  fullName: DoubleTensor.Log10()
- uid: TorchSharp.DoubleTensor.Log10(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Log10(DoubleTensor)
  nameWithType: DoubleTensor.Log10(DoubleTensor)
  fullName: DoubleTensor.Log10(DoubleTensor)
- uid: TorchSharp.DoubleTensor.Log1p
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Log1p()
  nameWithType: DoubleTensor.Log1p()
  fullName: DoubleTensor.Log1p()
- uid: TorchSharp.DoubleTensor.Log1p(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Log1p(DoubleTensor)
  nameWithType: DoubleTensor.Log1p(DoubleTensor)
  fullName: DoubleTensor.Log1p(DoubleTensor)
- uid: TorchSharp.DoubleTensor.Log2
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Log2()
  nameWithType: DoubleTensor.Log2()
  fullName: DoubleTensor.Log2()
- uid: TorchSharp.DoubleTensor.Log2(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Log2(DoubleTensor)
  nameWithType: DoubleTensor.Log2(DoubleTensor)
  fullName: DoubleTensor.Log2(DoubleTensor)
- uid: TorchSharp.DoubleTensor.LogNormal(TorchSharp.RandomGenerator,System.Double,System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: LogNormal(RandomGenerator, Double, Double)
  nameWithType: DoubleTensor.LogNormal(RandomGenerator, Double, Double)
  fullName: DoubleTensor.LogNormal(RandomGenerator, Double, Double)
- uid: TorchSharp.DoubleTensor.Logspace(System.Double,System.Double,System.Int64)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Logspace(Double, Double, Int64)
  nameWithType: DoubleTensor.Logspace(Double, Double, Int64)
  fullName: DoubleTensor.Logspace(Double, Double, Int64)
- uid: TorchSharp.DoubleTensor.LShift(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: LShift(DoubleTensor, Double, DoubleTensor)
  nameWithType: DoubleTensor.LShift(DoubleTensor, Double, DoubleTensor)
  fullName: DoubleTensor.LShift(DoubleTensor, Double, DoubleTensor)
- uid: TorchSharp.DoubleTensor.LShift(System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: LShift(Double)
  nameWithType: DoubleTensor.LShift(Double)
  fullName: DoubleTensor.LShift(Double)
- uid: TorchSharp.DoubleTensor.LtTensor(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: LtTensor(DoubleTensor)
  nameWithType: DoubleTensor.LtTensor(DoubleTensor)
  fullName: DoubleTensor.LtTensor(DoubleTensor)
- uid: TorchSharp.DoubleTensor.LtTensorT(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: LtTensorT(DoubleTensor)
  nameWithType: DoubleTensor.LtTensorT(DoubleTensor)
  fullName: DoubleTensor.LtTensorT(DoubleTensor)
- uid: TorchSharp.DoubleTensor.LtValue(System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: LtValue(Double)
  nameWithType: DoubleTensor.LtValue(Double)
  fullName: DoubleTensor.LtValue(Double)
- uid: TorchSharp.DoubleTensor.LtValueT(System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: LtValueT(Double)
  nameWithType: DoubleTensor.LtValueT(Double)
  fullName: DoubleTensor.LtValueT(Double)
- uid: TorchSharp.DoubleTensor.MaskedCopy(TorchSharp.ByteTensor,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: MaskedCopy(ByteTensor, DoubleTensor)
  nameWithType: DoubleTensor.MaskedCopy(ByteTensor, DoubleTensor)
  fullName: DoubleTensor.MaskedCopy(ByteTensor, DoubleTensor)
- uid: TorchSharp.DoubleTensor.MaskedFill(TorchSharp.ByteTensor,System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: MaskedFill(ByteTensor, Double)
  nameWithType: DoubleTensor.MaskedFill(ByteTensor, Double)
  fullName: DoubleTensor.MaskedFill(ByteTensor, Double)
- uid: TorchSharp.DoubleTensor.MaskedSelect(TorchSharp.ByteTensor,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: MaskedSelect(ByteTensor, DoubleTensor)
  nameWithType: DoubleTensor.MaskedSelect(ByteTensor, DoubleTensor)
  fullName: DoubleTensor.MaskedSelect(ByteTensor, DoubleTensor)
- uid: TorchSharp.DoubleTensor.Match(TorchSharp.DoubleTensor,System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Match(DoubleTensor, Double)
  nameWithType: DoubleTensor.Match(DoubleTensor, Double)
  fullName: DoubleTensor.Match(DoubleTensor, Double)
- uid: TorchSharp.DoubleTensor.Max(System.Int32,System.Boolean)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Max(Int32, Boolean)
  nameWithType: DoubleTensor.Max(Int32, Boolean)
  fullName: DoubleTensor.Max(Int32, Boolean)
- uid: TorchSharp.DoubleTensor.MaxAll
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: MaxAll()
  nameWithType: DoubleTensor.MaxAll()
  fullName: DoubleTensor.MaxAll()
- uid: TorchSharp.DoubleTensor.Mean(System.Int32,System.Boolean)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Mean(Int32, Boolean)
  nameWithType: DoubleTensor.Mean(Int32, Boolean)
  fullName: DoubleTensor.Mean(Int32, Boolean)
- uid: TorchSharp.DoubleTensor.MeanAll
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: MeanAll()
  nameWithType: DoubleTensor.MeanAll()
  fullName: DoubleTensor.MeanAll()
- uid: TorchSharp.DoubleTensor.Median(System.Int32,System.Boolean)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Median(Int32, Boolean)
  nameWithType: DoubleTensor.Median(Int32, Boolean)
  fullName: DoubleTensor.Median(Int32, Boolean)
- uid: TorchSharp.DoubleTensor.MedianAll
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: MedianAll()
  nameWithType: DoubleTensor.MedianAll()
  fullName: DoubleTensor.MedianAll()
- uid: TorchSharp.DoubleTensor.Min(System.Int32,System.Boolean)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Min(Int32, Boolean)
  nameWithType: DoubleTensor.Min(Int32, Boolean)
  fullName: DoubleTensor.Min(Int32, Boolean)
- uid: TorchSharp.DoubleTensor.MinAll
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: MinAll()
  nameWithType: DoubleTensor.MinAll()
  fullName: DoubleTensor.MinAll()
- uid: TorchSharp.DoubleTensor.Mode(System.Int32,System.Boolean)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Mode(Int32, Boolean)
  nameWithType: DoubleTensor.Mode(Int32, Boolean)
  fullName: DoubleTensor.Mode(Int32, Boolean)
- uid: TorchSharp.DoubleTensor.Mul(System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Mul(Double)
  nameWithType: DoubleTensor.Mul(Double)
  fullName: DoubleTensor.Mul(Double)
- uid: TorchSharp.DoubleTensor.Mul(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Mul(DoubleTensor, Double, DoubleTensor)
  nameWithType: DoubleTensor.Mul(DoubleTensor, Double, DoubleTensor)
  fullName: DoubleTensor.Mul(DoubleTensor, Double, DoubleTensor)
- uid: TorchSharp.DoubleTensor.Multinomial(TorchSharp.RandomGenerator,TorchSharp.DoubleTensor,System.Int32,System.Int32)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Multinomial(RandomGenerator, DoubleTensor, Int32, Int32)
  nameWithType: DoubleTensor.Multinomial(RandomGenerator, DoubleTensor, Int32, Int32)
  fullName: DoubleTensor.Multinomial(RandomGenerator, DoubleTensor, Int32, Int32)
- uid: TorchSharp.DoubleTensor.Narrow(System.Int32,System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Narrow(Int32, Int64, Int64)
  nameWithType: DoubleTensor.Narrow(Int32, Int64, Int64)
  fullName: DoubleTensor.Narrow(Int32, Int64, Int64)
- uid: TorchSharp.DoubleTensor.neg
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: neg()
  nameWithType: DoubleTensor.neg()
  fullName: DoubleTensor.neg()
- uid: TorchSharp.DoubleTensor.neg(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: neg(DoubleTensor)
  nameWithType: DoubleTensor.neg(DoubleTensor)
  fullName: DoubleTensor.neg(DoubleTensor)
- uid: TorchSharp.DoubleTensor.NeTensor(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: NeTensor(DoubleTensor)
  nameWithType: DoubleTensor.NeTensor(DoubleTensor)
  fullName: DoubleTensor.NeTensor(DoubleTensor)
- uid: TorchSharp.DoubleTensor.NeTensorT(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: NeTensorT(DoubleTensor)
  nameWithType: DoubleTensor.NeTensorT(DoubleTensor)
  fullName: DoubleTensor.NeTensorT(DoubleTensor)
- uid: TorchSharp.DoubleTensor.NeValue(System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: NeValue(Double)
  nameWithType: DoubleTensor.NeValue(Double)
  fullName: DoubleTensor.NeValue(Double)
- uid: TorchSharp.DoubleTensor.NeValueT(System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: NeValueT(Double)
  nameWithType: DoubleTensor.NeValueT(Double)
  fullName: DoubleTensor.NeValueT(Double)
- uid: TorchSharp.DoubleTensor.NewWithStorage1d(System.IntPtr,System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: NewWithStorage1d(IntPtr, Int64, Int64)
  nameWithType: DoubleTensor.NewWithStorage1d(IntPtr, Int64, Int64)
  fullName: DoubleTensor.NewWithStorage1d(IntPtr, Int64, Int64)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: TorchSharp.DoubleTensor.NewWithStorage2d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: NewWithStorage2d(IntPtr, Int64, Int64, Int64, Int64)
  nameWithType: DoubleTensor.NewWithStorage2d(IntPtr, Int64, Int64, Int64, Int64)
  fullName: DoubleTensor.NewWithStorage2d(IntPtr, Int64, Int64, Int64, Int64)
- uid: TorchSharp.DoubleTensor.NewWithStorage3d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: NewWithStorage3d(IntPtr, Int64, Int64, Int64, Int64, Int64, Int64)
  nameWithType: DoubleTensor.NewWithStorage3d(IntPtr, Int64, Int64, Int64, Int64, Int64, Int64)
  fullName: DoubleTensor.NewWithStorage3d(IntPtr, Int64, Int64, Int64, Int64, Int64, Int64)
- uid: TorchSharp.DoubleTensor.NewWithStorage4d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: NewWithStorage4d(IntPtr, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64)
  nameWithType: DoubleTensor.NewWithStorage4d(IntPtr, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64)
  fullName: DoubleTensor.NewWithStorage4d(IntPtr, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64)
- uid: TorchSharp.DoubleTensor.NonZero
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: NonZero()
  nameWithType: DoubleTensor.NonZero()
  fullName: DoubleTensor.NonZero()
- uid: TorchSharp.DoubleTensor.Norm(System.Double,System.Int32,System.Boolean)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Norm(Double, Int32, Boolean)
  nameWithType: DoubleTensor.Norm(Double, Int32, Boolean)
  fullName: DoubleTensor.Norm(Double, Int32, Boolean)
- uid: TorchSharp.DoubleTensor.Normal(TorchSharp.RandomGenerator,System.Double,System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Normal(RandomGenerator, Double, Double)
  nameWithType: DoubleTensor.Normal(RandomGenerator, Double, Double)
  fullName: DoubleTensor.Normal(RandomGenerator, Double, Double)
- uid: TorchSharp.DoubleTensor.NormAll(System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: NormAll(Double)
  nameWithType: DoubleTensor.NormAll(Double)
  fullName: DoubleTensor.NormAll(Double)
- uid: TorchSharp.DoubleTensor.NormalMeans(TorchSharp.RandomGenerator,TorchSharp.DoubleTensor,System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: NormalMeans(RandomGenerator, DoubleTensor, Double)
  nameWithType: DoubleTensor.NormalMeans(RandomGenerator, DoubleTensor, Double)
  fullName: DoubleTensor.NormalMeans(RandomGenerator, DoubleTensor, Double)
- uid: TorchSharp.DoubleTensor.NormalMeansStdvs(TorchSharp.RandomGenerator,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: NormalMeansStdvs(RandomGenerator, DoubleTensor, DoubleTensor)
  nameWithType: DoubleTensor.NormalMeansStdvs(RandomGenerator, DoubleTensor, DoubleTensor)
  fullName: DoubleTensor.NormalMeansStdvs(RandomGenerator, DoubleTensor, DoubleTensor)
- uid: TorchSharp.DoubleTensor.NormalStdvs(TorchSharp.RandomGenerator,System.Double,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: NormalStdvs(RandomGenerator, Double, DoubleTensor)
  nameWithType: DoubleTensor.NormalStdvs(RandomGenerator, Double, DoubleTensor)
  fullName: DoubleTensor.NormalStdvs(RandomGenerator, Double, DoubleTensor)
- uid: TorchSharp.DoubleTensor.NumElements
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: NumElements()
  nameWithType: DoubleTensor.NumElements()
  fullName: DoubleTensor.NumElements()
- uid: TorchSharp.DoubleTensor.OnesLike
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: OnesLike()
  nameWithType: DoubleTensor.OnesLike()
  fullName: DoubleTensor.OnesLike()
- uid: TorchSharp.DoubleTensor.Polygamma
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Polygamma()
  nameWithType: DoubleTensor.Polygamma()
  fullName: DoubleTensor.Polygamma()
- uid: TorchSharp.DoubleTensor.Polygamma(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Polygamma(DoubleTensor)
  nameWithType: DoubleTensor.Polygamma(DoubleTensor)
  fullName: DoubleTensor.Polygamma(DoubleTensor)
- uid: TorchSharp.DoubleTensor.Pow(System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Pow(Double)
  nameWithType: DoubleTensor.Pow(Double)
  fullName: DoubleTensor.Pow(Double)
- uid: TorchSharp.DoubleTensor.Prod(System.Int32,System.Boolean)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Prod(Int32, Boolean)
  nameWithType: DoubleTensor.Prod(Int32, Boolean)
  fullName: DoubleTensor.Prod(Int32, Boolean)
- uid: TorchSharp.DoubleTensor.ProdAll
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: ProdAll()
  nameWithType: DoubleTensor.ProdAll()
  fullName: DoubleTensor.ProdAll()
- uid: TorchSharp.DoubleTensor.Put(TorchSharp.LongTensor,TorchSharp.DoubleTensor,System.Boolean)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Put(LongTensor, DoubleTensor, Boolean)
  nameWithType: DoubleTensor.Put(LongTensor, DoubleTensor, Boolean)
  fullName: DoubleTensor.Put(LongTensor, DoubleTensor, Boolean)
- uid: TorchSharp.DoubleTensor.Random(TorchSharp.RandomGenerator)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Random(RandomGenerator)
  nameWithType: DoubleTensor.Random(RandomGenerator)
  fullName: DoubleTensor.Random(RandomGenerator)
- uid: TorchSharp.DoubleTensor.Random(TorchSharp.RandomGenerator,System.Int64)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Random(RandomGenerator, Int64)
  nameWithType: DoubleTensor.Random(RandomGenerator, Int64)
  fullName: DoubleTensor.Random(RandomGenerator, Int64)
- uid: TorchSharp.DoubleTensor.Random(System.Int64)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Random(Int64)
  nameWithType: DoubleTensor.Random(Int64)
  fullName: DoubleTensor.Random(Int64)
- uid: TorchSharp.DoubleTensor.RandPerm(TorchSharp.RandomGenerator,System.Int64)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: RandPerm(RandomGenerator, Int64)
  nameWithType: DoubleTensor.RandPerm(RandomGenerator, Int64)
  fullName: DoubleTensor.RandPerm(RandomGenerator, Int64)
- uid: TorchSharp.DoubleTensor.Range(System.Double,System.Double,System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Range(Double, Double, Double)
  nameWithType: DoubleTensor.Range(Double, Double, Double)
  fullName: DoubleTensor.Range(Double, Double, Double)
- uid: TorchSharp.DoubleTensor.Remainder(System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Remainder(Double)
  nameWithType: DoubleTensor.Remainder(Double)
  fullName: DoubleTensor.Remainder(Double)
- uid: TorchSharp.DoubleTensor.Remainder(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Remainder(DoubleTensor, Double, DoubleTensor)
  nameWithType: DoubleTensor.Remainder(DoubleTensor, Double, DoubleTensor)
  fullName: DoubleTensor.Remainder(DoubleTensor, Double, DoubleTensor)
- uid: TorchSharp.DoubleTensor.Renorm(System.Double,System.Int32,System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Renorm(Double, Int32, Double)
  nameWithType: DoubleTensor.Renorm(Double, Int32, Double)
  fullName: DoubleTensor.Renorm(Double, Int32, Double)
- uid: TorchSharp.DoubleTensor.Resize1d(System.Int64)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Resize1d(Int64)
  nameWithType: DoubleTensor.Resize1d(Int64)
  fullName: DoubleTensor.Resize1d(Int64)
- uid: TorchSharp.DoubleTensor.Resize2d(System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Resize2d(Int64, Int64)
  nameWithType: DoubleTensor.Resize2d(Int64, Int64)
  fullName: DoubleTensor.Resize2d(Int64, Int64)
- uid: TorchSharp.DoubleTensor.Resize3d(System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Resize3d(Int64, Int64, Int64)
  nameWithType: DoubleTensor.Resize3d(Int64, Int64, Int64)
  fullName: DoubleTensor.Resize3d(Int64, Int64, Int64)
- uid: TorchSharp.DoubleTensor.Resize4d(System.Int64,System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Resize4d(Int64, Int64, Int64, Int64)
  nameWithType: DoubleTensor.Resize4d(Int64, Int64, Int64, Int64)
  fullName: DoubleTensor.Resize4d(Int64, Int64, Int64, Int64)
- uid: TorchSharp.DoubleTensor.Resize5d(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Resize5d(Int64, Int64, Int64, Int64, Int64)
  nameWithType: DoubleTensor.Resize5d(Int64, Int64, Int64, Int64, Int64)
  fullName: DoubleTensor.Resize5d(Int64, Int64, Int64, Int64, Int64)
- uid: TorchSharp.DoubleTensor.ResizeAs(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: ResizeAs(DoubleTensor)
  nameWithType: DoubleTensor.ResizeAs(DoubleTensor)
  fullName: DoubleTensor.ResizeAs(DoubleTensor)
- uid: TorchSharp.DoubleTensor.Round
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Round()
  nameWithType: DoubleTensor.Round()
  fullName: DoubleTensor.Round()
- uid: TorchSharp.DoubleTensor.Round(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Round(DoubleTensor)
  nameWithType: DoubleTensor.Round(DoubleTensor)
  fullName: DoubleTensor.Round(DoubleTensor)
- uid: TorchSharp.DoubleTensor.RShift(System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: RShift(Double)
  nameWithType: DoubleTensor.RShift(Double)
  fullName: DoubleTensor.RShift(Double)
- uid: TorchSharp.DoubleTensor.RShift(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: RShift(DoubleTensor, Double, DoubleTensor)
  nameWithType: DoubleTensor.RShift(DoubleTensor, Double, DoubleTensor)
  fullName: DoubleTensor.RShift(DoubleTensor, Double, DoubleTensor)
- uid: TorchSharp.DoubleTensor.Rsqrt(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Rsqrt(DoubleTensor)
  nameWithType: DoubleTensor.Rsqrt(DoubleTensor)
  fullName: DoubleTensor.Rsqrt(DoubleTensor)
- uid: TorchSharp.DoubleTensor.Rsqrt
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Rsqrt()
  nameWithType: DoubleTensor.Rsqrt()
  fullName: DoubleTensor.Rsqrt()
- uid: TorchSharp.DoubleTensor.Scatter(System.Int32,TorchSharp.LongTensor,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Scatter(Int32, LongTensor, DoubleTensor)
  nameWithType: DoubleTensor.Scatter(Int32, LongTensor, DoubleTensor)
  fullName: DoubleTensor.Scatter(Int32, LongTensor, DoubleTensor)
- uid: TorchSharp.DoubleTensor.ScatterAdd(System.Int32,TorchSharp.LongTensor,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: ScatterAdd(Int32, LongTensor, DoubleTensor)
  nameWithType: DoubleTensor.ScatterAdd(Int32, LongTensor, DoubleTensor)
  fullName: DoubleTensor.ScatterAdd(Int32, LongTensor, DoubleTensor)
- uid: TorchSharp.DoubleTensor.ScatterFill(System.Int32,TorchSharp.LongTensor,System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: ScatterFill(Int32, LongTensor, Double)
  nameWithType: DoubleTensor.ScatterFill(Int32, LongTensor, Double)
  fullName: DoubleTensor.ScatterFill(Int32, LongTensor, Double)
- uid: TorchSharp.DoubleTensor.Select(System.Int32,System.Int64)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Select(Int32, Int64)
  nameWithType: DoubleTensor.Select(Int32, Int64)
  fullName: DoubleTensor.Select(Int32, Int64)
- uid: TorchSharp.DoubleTensor.Set(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Set(DoubleTensor)
  nameWithType: DoubleTensor.Set(DoubleTensor)
  fullName: DoubleTensor.Set(DoubleTensor)
- uid: TorchSharp.DoubleTensor.Shape
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Shape
  nameWithType: DoubleTensor.Shape
  fullName: DoubleTensor.Shape
- uid: System.Int64[]
  parent: System
  isExternal: true
  name: Int64[]
  nameWithType: Int64[]
  fullName: System.Int64[]
  spec.csharp:
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: TorchSharp.DoubleTensor.Sigmoid
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Sigmoid()
  nameWithType: DoubleTensor.Sigmoid()
  fullName: DoubleTensor.Sigmoid()
- uid: TorchSharp.DoubleTensor.Sigmoid(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Sigmoid(DoubleTensor)
  nameWithType: DoubleTensor.Sigmoid(DoubleTensor)
  fullName: DoubleTensor.Sigmoid(DoubleTensor)
- uid: TorchSharp.DoubleTensor.Sign
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Sign()
  nameWithType: DoubleTensor.Sign()
  fullName: DoubleTensor.Sign()
- uid: TorchSharp.DoubleTensor.Sin
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Sin()
  nameWithType: DoubleTensor.Sin()
  fullName: DoubleTensor.Sin()
- uid: TorchSharp.DoubleTensor.Sin(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Sin(DoubleTensor)
  nameWithType: DoubleTensor.Sin(DoubleTensor)
  fullName: DoubleTensor.Sin(DoubleTensor)
- uid: TorchSharp.DoubleTensor.Sinh
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Sinh()
  nameWithType: DoubleTensor.Sinh()
  fullName: DoubleTensor.Sinh()
- uid: TorchSharp.DoubleTensor.Sinh(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Sinh(DoubleTensor)
  nameWithType: DoubleTensor.Sinh(DoubleTensor)
  fullName: DoubleTensor.Sinh(DoubleTensor)
- uid: TorchSharp.DoubleTensor.Sort(System.Int32,System.Boolean)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Sort(Int32, Boolean)
  nameWithType: DoubleTensor.Sort(Int32, Boolean)
  fullName: DoubleTensor.Sort(Int32, Boolean)
- uid: TorchSharp.DoubleTensor.Sqrt(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Sqrt(DoubleTensor)
  nameWithType: DoubleTensor.Sqrt(DoubleTensor)
  fullName: DoubleTensor.Sqrt(DoubleTensor)
- uid: TorchSharp.DoubleTensor.Sqrt
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Sqrt()
  nameWithType: DoubleTensor.Sqrt()
  fullName: DoubleTensor.Sqrt()
- uid: TorchSharp.DoubleTensor.Squeeze
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Squeeze()
  nameWithType: DoubleTensor.Squeeze()
  fullName: DoubleTensor.Squeeze()
- uid: TorchSharp.DoubleTensor.Squeeze1d(TorchSharp.DoubleTensor,System.Int32)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Squeeze1d(DoubleTensor, Int32)
  nameWithType: DoubleTensor.Squeeze1d(DoubleTensor, Int32)
  fullName: DoubleTensor.Squeeze1d(DoubleTensor, Int32)
- uid: TorchSharp.DoubleTensor.Std(System.Int32,System.Boolean,System.Boolean)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Std(Int32, Boolean, Boolean)
  nameWithType: DoubleTensor.Std(Int32, Boolean, Boolean)
  fullName: DoubleTensor.Std(Int32, Boolean, Boolean)
- uid: TorchSharp.DoubleTensor.StdAll(System.Boolean)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: StdAll(Boolean)
  nameWithType: DoubleTensor.StdAll(Boolean)
  fullName: DoubleTensor.StdAll(Boolean)
- uid: TorchSharp.DoubleTensor.Storage
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Storage
  nameWithType: DoubleTensor.Storage
  fullName: DoubleTensor.Storage
- uid: TorchSharp.DoubleTensor.Sub(System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Sub(Double)
  nameWithType: DoubleTensor.Sub(Double)
  fullName: DoubleTensor.Sub(Double)
- uid: TorchSharp.DoubleTensor.Sub(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Sub(DoubleTensor, Double, DoubleTensor)
  nameWithType: DoubleTensor.Sub(DoubleTensor, Double, DoubleTensor)
  fullName: DoubleTensor.Sub(DoubleTensor, Double, DoubleTensor)
- uid: TorchSharp.DoubleTensor.SubScaled(System.Double,System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: SubScaled(Double, Double)
  nameWithType: DoubleTensor.SubScaled(Double, Double)
  fullName: DoubleTensor.SubScaled(Double, Double)
- uid: TorchSharp.DoubleTensor.Sum(System.Int32,System.Boolean)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Sum(Int32, Boolean)
  nameWithType: DoubleTensor.Sum(Int32, Boolean)
  fullName: DoubleTensor.Sum(Int32, Boolean)
- uid: TorchSharp.DoubleTensor.SumAll
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: SumAll()
  nameWithType: DoubleTensor.SumAll()
  fullName: DoubleTensor.SumAll()
- uid: TorchSharp.DoubleTensor.Take(TorchSharp.DoubleTensor,TorchSharp.LongTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Take(DoubleTensor, LongTensor)
  nameWithType: DoubleTensor.Take(DoubleTensor, LongTensor)
  fullName: DoubleTensor.Take(DoubleTensor, LongTensor)
- uid: TorchSharp.DoubleTensor.Tan
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Tan()
  nameWithType: DoubleTensor.Tan()
  fullName: DoubleTensor.Tan()
- uid: TorchSharp.DoubleTensor.Tan(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Tan(DoubleTensor)
  nameWithType: DoubleTensor.Tan(DoubleTensor)
  fullName: DoubleTensor.Tan(DoubleTensor)
- uid: TorchSharp.DoubleTensor.Tanh
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Tanh()
  nameWithType: DoubleTensor.Tanh()
  fullName: DoubleTensor.Tanh()
- uid: TorchSharp.DoubleTensor.Tanh(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Tanh(DoubleTensor)
  nameWithType: DoubleTensor.Tanh(DoubleTensor)
  fullName: DoubleTensor.Tanh(DoubleTensor)
- uid: TorchSharp.DoubleTensor.TopK(System.Int64,System.Int32,System.Int32,System.Boolean)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: TopK(Int64, Int32, Int32, Boolean)
  nameWithType: DoubleTensor.TopK(Int64, Int32, Int32, Boolean)
  fullName: DoubleTensor.TopK(Int64, Int32, Int32, Boolean)
- uid: TorchSharp.DoubleTensor.ToString
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: ToString()
  nameWithType: DoubleTensor.ToString()
  fullName: DoubleTensor.ToString()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TorchSharp.DoubleTensor.TPow(System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: TPow(Double)
  nameWithType: DoubleTensor.TPow(Double)
  fullName: DoubleTensor.TPow(Double)
- uid: TorchSharp.DoubleTensor.Trace
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Trace()
  nameWithType: DoubleTensor.Trace()
  fullName: DoubleTensor.Trace()
- uid: TorchSharp.DoubleTensor.Transpose(System.Int32,System.Int32)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Transpose(Int32, Int32)
  nameWithType: DoubleTensor.Transpose(Int32, Int32)
  fullName: DoubleTensor.Transpose(Int32, Int32)
- uid: TorchSharp.DoubleTensor.Trigamma
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Trigamma()
  nameWithType: DoubleTensor.Trigamma()
  fullName: DoubleTensor.Trigamma()
- uid: TorchSharp.DoubleTensor.Trigamma(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Trigamma(DoubleTensor)
  nameWithType: DoubleTensor.Trigamma(DoubleTensor)
  fullName: DoubleTensor.Trigamma(DoubleTensor)
- uid: TorchSharp.DoubleTensor.TriL(System.Int64)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: TriL(Int64)
  nameWithType: DoubleTensor.TriL(Int64)
  fullName: DoubleTensor.TriL(Int64)
- uid: TorchSharp.DoubleTensor.TriU(System.Int64)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: TriU(Int64)
  nameWithType: DoubleTensor.TriU(Int64)
  fullName: DoubleTensor.TriU(Int64)
- uid: TorchSharp.DoubleTensor.Trunc
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Trunc()
  nameWithType: DoubleTensor.Trunc()
  fullName: DoubleTensor.Trunc()
- uid: TorchSharp.DoubleTensor.Trunc(TorchSharp.DoubleTensor)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Trunc(DoubleTensor)
  nameWithType: DoubleTensor.Trunc(DoubleTensor)
  fullName: DoubleTensor.Trunc(DoubleTensor)
- uid: TorchSharp.DoubleTensor.Unfold(System.Int32,System.Int64,System.Int64)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Unfold(Int32, Int64, Int64)
  nameWithType: DoubleTensor.Unfold(Int32, Int64, Int64)
  fullName: DoubleTensor.Unfold(Int32, Int64, Int64)
- uid: TorchSharp.DoubleTensor.Uniform(TorchSharp.RandomGenerator,System.Double,System.Double)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Uniform(RandomGenerator, Double, Double)
  nameWithType: DoubleTensor.Uniform(RandomGenerator, Double, Double)
  fullName: DoubleTensor.Uniform(RandomGenerator, Double, Double)
- uid: TorchSharp.DoubleTensor.Unsqueeze1d(TorchSharp.DoubleTensor,System.Int32)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Unsqueeze1d(DoubleTensor, Int32)
  nameWithType: DoubleTensor.Unsqueeze1d(DoubleTensor, Int32)
  fullName: DoubleTensor.Unsqueeze1d(DoubleTensor, Int32)
- uid: TorchSharp.DoubleTensor.Var(System.Int32,System.Boolean,System.Boolean)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Var(Int32, Boolean, Boolean)
  nameWithType: DoubleTensor.Var(Int32, Boolean, Boolean)
  fullName: DoubleTensor.Var(Int32, Boolean, Boolean)
- uid: TorchSharp.DoubleTensor.VarAll(System.Boolean)
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: VarAll(Boolean)
  nameWithType: DoubleTensor.VarAll(Boolean)
  fullName: DoubleTensor.VarAll(Boolean)
- uid: TorchSharp.DoubleTensor.ZeroFill
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: ZeroFill()
  nameWithType: DoubleTensor.ZeroFill()
  fullName: DoubleTensor.ZeroFill()
- uid: TorchSharp.DoubleTensor.ZerosLike
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: ZerosLike()
  nameWithType: DoubleTensor.ZerosLike()
  fullName: DoubleTensor.ZerosLike()
- uid: TorchSharp.DoubleTensor.#ctor*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: DoubleTensor
  nameWithType: DoubleTensor.DoubleTensor
  fullName: DoubleTensor.DoubleTensor
- uid: TorchSharp.DoubleTensor.Abs*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Abs
  nameWithType: DoubleTensor.Abs
  fullName: DoubleTensor.Abs
- uid: TorchSharp.DoubleTensor.Acos*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Acos
  nameWithType: DoubleTensor.Acos
  fullName: DoubleTensor.Acos
- uid: TorchSharp.DoubleTensor.Add*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Add
  nameWithType: DoubleTensor.Add
  fullName: DoubleTensor.Add
- uid: TorchSharp.DoubleTensor.AddBMM*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: AddBMM
  nameWithType: DoubleTensor.AddBMM
  fullName: DoubleTensor.AddBMM
- uid: TorchSharp.DoubleTensor.AddCDiv*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: AddCDiv
  nameWithType: DoubleTensor.AddCDiv
  fullName: DoubleTensor.AddCDiv
- uid: TorchSharp.DoubleTensor.AddCMul*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: AddCMul
  nameWithType: DoubleTensor.AddCMul
  fullName: DoubleTensor.AddCMul
- uid: TorchSharp.DoubleTensor.AddMM*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: AddMM
  nameWithType: DoubleTensor.AddMM
  fullName: DoubleTensor.AddMM
- uid: TorchSharp.DoubleTensor.AddMV*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: AddMV
  nameWithType: DoubleTensor.AddMV
  fullName: DoubleTensor.AddMV
- uid: TorchSharp.DoubleTensor.AddR*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: AddR
  nameWithType: DoubleTensor.AddR
  fullName: DoubleTensor.AddR
- uid: TorchSharp.DoubleTensor.AddScaled*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: AddScaled
  nameWithType: DoubleTensor.AddScaled
  fullName: DoubleTensor.AddScaled
- uid: TorchSharp.DoubleTensor.ARange*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: ARange
  nameWithType: DoubleTensor.ARange
  fullName: DoubleTensor.ARange
- uid: TorchSharp.DoubleTensor.Asin*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Asin
  nameWithType: DoubleTensor.Asin
  fullName: DoubleTensor.Asin
- uid: TorchSharp.DoubleTensor.Atan*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Atan
  nameWithType: DoubleTensor.Atan
  fullName: DoubleTensor.Atan
- uid: TorchSharp.DoubleTensor.Atan2*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Atan2
  nameWithType: DoubleTensor.Atan2
  fullName: DoubleTensor.Atan2
- uid: TorchSharp.DoubleTensor.BAddBMM*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: BAddBMM
  nameWithType: DoubleTensor.BAddBMM
  fullName: DoubleTensor.BAddBMM
- uid: TorchSharp.DoubleTensor.BHistc*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: BHistc
  nameWithType: DoubleTensor.BHistc
  fullName: DoubleTensor.BHistc
- uid: TorchSharp.DoubleTensor.BitAnd*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: BitAnd
  nameWithType: DoubleTensor.BitAnd
  fullName: DoubleTensor.BitAnd
- uid: TorchSharp.DoubleTensor.CAdd*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CAdd
  nameWithType: DoubleTensor.CAdd
  fullName: DoubleTensor.CAdd
- uid: TorchSharp.DoubleTensor.CappedRandom*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CappedRandom
  nameWithType: DoubleTensor.CappedRandom
  fullName: DoubleTensor.CappedRandom
- uid: TorchSharp.DoubleTensor.Cauchy*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Cauchy
  nameWithType: DoubleTensor.Cauchy
  fullName: DoubleTensor.Cauchy
- uid: TorchSharp.DoubleTensor.CBitAnd*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CBitAnd
  nameWithType: DoubleTensor.CBitAnd
  fullName: DoubleTensor.CBitAnd
- uid: TorchSharp.DoubleTensor.CBitOr*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CBitOr
  nameWithType: DoubleTensor.CBitOr
  fullName: DoubleTensor.CBitOr
- uid: TorchSharp.DoubleTensor.CBitXor*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CBitXor
  nameWithType: DoubleTensor.CBitXor
  fullName: DoubleTensor.CBitXor
- uid: TorchSharp.DoubleTensor.CDiv*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CDiv
  nameWithType: DoubleTensor.CDiv
  fullName: DoubleTensor.CDiv
- uid: TorchSharp.DoubleTensor.Ceil*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Ceil
  nameWithType: DoubleTensor.Ceil
  fullName: DoubleTensor.Ceil
- uid: TorchSharp.DoubleTensor.CFMod*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CFMod
  nameWithType: DoubleTensor.CFMod
  fullName: DoubleTensor.CFMod
- uid: TorchSharp.DoubleTensor.cinv*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: cinv
  nameWithType: DoubleTensor.cinv
  fullName: DoubleTensor.cinv
- uid: TorchSharp.DoubleTensor.Clamp*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Clamp
  nameWithType: DoubleTensor.Clamp
  fullName: DoubleTensor.Clamp
- uid: TorchSharp.DoubleTensor.ClampedRandom*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: ClampedRandom
  nameWithType: DoubleTensor.ClampedRandom
  fullName: DoubleTensor.ClampedRandom
- uid: TorchSharp.DoubleTensor.Clone*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Clone
  nameWithType: DoubleTensor.Clone
  fullName: DoubleTensor.Clone
- uid: TorchSharp.DoubleTensor.CLShift*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CLShift
  nameWithType: DoubleTensor.CLShift
  fullName: DoubleTensor.CLShift
- uid: TorchSharp.DoubleTensor.CMax*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CMax
  nameWithType: DoubleTensor.CMax
  fullName: DoubleTensor.CMax
- uid: TorchSharp.DoubleTensor.CMaxValue*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CMaxValue
  nameWithType: DoubleTensor.CMaxValue
  fullName: DoubleTensor.CMaxValue
- uid: TorchSharp.DoubleTensor.CMin*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CMin
  nameWithType: DoubleTensor.CMin
  fullName: DoubleTensor.CMin
- uid: TorchSharp.DoubleTensor.CMinValue*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CMinValue
  nameWithType: DoubleTensor.CMinValue
  fullName: DoubleTensor.CMinValue
- uid: TorchSharp.DoubleTensor.CMul*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CMul
  nameWithType: DoubleTensor.CMul
  fullName: DoubleTensor.CMul
- uid: TorchSharp.DoubleTensor.Concatenate*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Concatenate
  nameWithType: DoubleTensor.Concatenate
  fullName: DoubleTensor.Concatenate
- uid: TorchSharp.DoubleTensor.Copy*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Copy
  nameWithType: DoubleTensor.Copy
  fullName: DoubleTensor.Copy
- uid: TorchSharp.DoubleTensor.CopyByte*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CopyByte
  nameWithType: DoubleTensor.CopyByte
  fullName: DoubleTensor.CopyByte
- uid: TorchSharp.DoubleTensor.CopyDouble*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CopyDouble
  nameWithType: DoubleTensor.CopyDouble
  fullName: DoubleTensor.CopyDouble
- uid: TorchSharp.DoubleTensor.CopyFloat*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CopyFloat
  nameWithType: DoubleTensor.CopyFloat
  fullName: DoubleTensor.CopyFloat
- uid: TorchSharp.DoubleTensor.CopyInt*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CopyInt
  nameWithType: DoubleTensor.CopyInt
  fullName: DoubleTensor.CopyInt
- uid: TorchSharp.DoubleTensor.CopyLong*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CopyLong
  nameWithType: DoubleTensor.CopyLong
  fullName: DoubleTensor.CopyLong
- uid: TorchSharp.DoubleTensor.CopyShort*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CopyShort
  nameWithType: DoubleTensor.CopyShort
  fullName: DoubleTensor.CopyShort
- uid: TorchSharp.DoubleTensor.Cos*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Cos
  nameWithType: DoubleTensor.Cos
  fullName: DoubleTensor.Cos
- uid: TorchSharp.DoubleTensor.Cosh*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Cosh
  nameWithType: DoubleTensor.Cosh
  fullName: DoubleTensor.Cosh
- uid: TorchSharp.DoubleTensor.CPow*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CPow
  nameWithType: DoubleTensor.CPow
  fullName: DoubleTensor.CPow
- uid: TorchSharp.DoubleTensor.CRemainder*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CRemainder
  nameWithType: DoubleTensor.CRemainder
  fullName: DoubleTensor.CRemainder
- uid: TorchSharp.DoubleTensor.CrossProduct*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CrossProduct
  nameWithType: DoubleTensor.CrossProduct
  fullName: DoubleTensor.CrossProduct
- uid: TorchSharp.DoubleTensor.CSub*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CSub
  nameWithType: DoubleTensor.CSub
  fullName: DoubleTensor.CSub
- uid: TorchSharp.DoubleTensor.CumulativeProd*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CumulativeProd
  nameWithType: DoubleTensor.CumulativeProd
  fullName: DoubleTensor.CumulativeProd
- uid: TorchSharp.DoubleTensor.CumulativeSum*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: CumulativeSum
  nameWithType: DoubleTensor.CumulativeSum
  fullName: DoubleTensor.CumulativeSum
- uid: TorchSharp.DoubleTensor.Data*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Data
  nameWithType: DoubleTensor.Data
  fullName: DoubleTensor.Data
- uid: TorchSharp.DoubleTensor.Diagonal*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Diagonal
  nameWithType: DoubleTensor.Diagonal
  fullName: DoubleTensor.Diagonal
- uid: TorchSharp.DoubleTensor.Digamma*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Digamma
  nameWithType: DoubleTensor.Digamma
  fullName: DoubleTensor.Digamma
- uid: TorchSharp.DoubleTensor.Dimensions*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Dimensions
  nameWithType: DoubleTensor.Dimensions
  fullName: DoubleTensor.Dimensions
- uid: TorchSharp.DoubleTensor.DirichletGrad*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: DirichletGrad
  nameWithType: DoubleTensor.DirichletGrad
  fullName: DoubleTensor.DirichletGrad
- uid: TorchSharp.DoubleTensor.Dispose*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Dispose
  nameWithType: DoubleTensor.Dispose
  fullName: DoubleTensor.Dispose
- uid: TorchSharp.DoubleTensor.Dist*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Dist
  nameWithType: DoubleTensor.Dist
  fullName: DoubleTensor.Dist
- uid: TorchSharp.DoubleTensor.Div*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Div
  nameWithType: DoubleTensor.Div
  fullName: DoubleTensor.Div
- uid: TorchSharp.DoubleTensor.Dot*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Dot
  nameWithType: DoubleTensor.Dot
  fullName: DoubleTensor.Dot
- uid: TorchSharp.DoubleTensor.EqTensor*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: EqTensor
  nameWithType: DoubleTensor.EqTensor
  fullName: DoubleTensor.EqTensor
- uid: TorchSharp.DoubleTensor.EqTensorT*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: EqTensorT
  nameWithType: DoubleTensor.EqTensorT
  fullName: DoubleTensor.EqTensorT
- uid: TorchSharp.DoubleTensor.Equal*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Equal
  nameWithType: DoubleTensor.Equal
  fullName: DoubleTensor.Equal
- uid: TorchSharp.DoubleTensor.EqValue*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: EqValue
  nameWithType: DoubleTensor.EqValue
  fullName: DoubleTensor.EqValue
- uid: TorchSharp.DoubleTensor.EqValueT*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: EqValueT
  nameWithType: DoubleTensor.EqValueT
  fullName: DoubleTensor.EqValueT
- uid: TorchSharp.DoubleTensor.Erf*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Erf
  nameWithType: DoubleTensor.Erf
  fullName: DoubleTensor.Erf
- uid: TorchSharp.DoubleTensor.Erfc*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Erfc
  nameWithType: DoubleTensor.Erfc
  fullName: DoubleTensor.Erfc
- uid: TorchSharp.DoubleTensor.Erfinv*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Erfinv
  nameWithType: DoubleTensor.Erfinv
  fullName: DoubleTensor.Erfinv
- uid: TorchSharp.DoubleTensor.Exp*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Exp
  nameWithType: DoubleTensor.Exp
  fullName: DoubleTensor.Exp
- uid: TorchSharp.DoubleTensor.Expm1*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Expm1
  nameWithType: DoubleTensor.Expm1
  fullName: DoubleTensor.Expm1
- uid: TorchSharp.DoubleTensor.Exponential*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Exponential
  nameWithType: DoubleTensor.Exponential
  fullName: DoubleTensor.Exponential
- uid: TorchSharp.DoubleTensor.Eye*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Eye
  nameWithType: DoubleTensor.Eye
  fullName: DoubleTensor.Eye
- uid: TorchSharp.DoubleTensor.Fill*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Fill
  nameWithType: DoubleTensor.Fill
  fullName: DoubleTensor.Fill
- uid: TorchSharp.DoubleTensor.Finalize*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Finalize
  nameWithType: DoubleTensor.Finalize
  fullName: DoubleTensor.Finalize
- uid: TorchSharp.DoubleTensor.Floor*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Floor
  nameWithType: DoubleTensor.Floor
  fullName: DoubleTensor.Floor
- uid: TorchSharp.DoubleTensor.Fmod*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Fmod
  nameWithType: DoubleTensor.Fmod
  fullName: DoubleTensor.Fmod
- uid: TorchSharp.DoubleTensor.Frac*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Frac
  nameWithType: DoubleTensor.Frac
  fullName: DoubleTensor.Frac
- uid: TorchSharp.DoubleTensor.Gather*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Gather
  nameWithType: DoubleTensor.Gather
  fullName: DoubleTensor.Gather
- uid: TorchSharp.DoubleTensor.Geometric*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Geometric
  nameWithType: DoubleTensor.Geometric
  fullName: DoubleTensor.Geometric
- uid: TorchSharp.DoubleTensor.GeTensor*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: GeTensor
  nameWithType: DoubleTensor.GeTensor
  fullName: DoubleTensor.GeTensor
- uid: TorchSharp.DoubleTensor.GeTensorT*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: GeTensorT
  nameWithType: DoubleTensor.GeTensorT
  fullName: DoubleTensor.GeTensorT
- uid: TorchSharp.DoubleTensor.GetTensorDimension*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: GetTensorDimension
  nameWithType: DoubleTensor.GetTensorDimension
  fullName: DoubleTensor.GetTensorDimension
- uid: TorchSharp.DoubleTensor.GetTensorStride*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: GetTensorStride
  nameWithType: DoubleTensor.GetTensorStride
  fullName: DoubleTensor.GetTensorStride
- uid: TorchSharp.DoubleTensor.GeValue*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: GeValue
  nameWithType: DoubleTensor.GeValue
  fullName: DoubleTensor.GeValue
- uid: TorchSharp.DoubleTensor.GeValueT*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: GeValueT
  nameWithType: DoubleTensor.GeValueT
  fullName: DoubleTensor.GeValueT
- uid: TorchSharp.DoubleTensor.GtTensor*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: GtTensor
  nameWithType: DoubleTensor.GtTensor
  fullName: DoubleTensor.GtTensor
- uid: TorchSharp.DoubleTensor.GtTensorT*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: GtTensorT
  nameWithType: DoubleTensor.GtTensorT
  fullName: DoubleTensor.GtTensorT
- uid: TorchSharp.DoubleTensor.GtValue*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: GtValue
  nameWithType: DoubleTensor.GtValue
  fullName: DoubleTensor.GtValue
- uid: TorchSharp.DoubleTensor.GtValueT*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: GtValueT
  nameWithType: DoubleTensor.GtValueT
  fullName: DoubleTensor.GtValueT
- uid: TorchSharp.DoubleTensor.Histc*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Histc
  nameWithType: DoubleTensor.Histc
  fullName: DoubleTensor.Histc
- uid: TorchSharp.DoubleTensor.IndexAdd*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: IndexAdd
  nameWithType: DoubleTensor.IndexAdd
  fullName: DoubleTensor.IndexAdd
- uid: TorchSharp.DoubleTensor.IndexCopy*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: IndexCopy
  nameWithType: DoubleTensor.IndexCopy
  fullName: DoubleTensor.IndexCopy
- uid: TorchSharp.DoubleTensor.IndexFill*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: IndexFill
  nameWithType: DoubleTensor.IndexFill
  fullName: DoubleTensor.IndexFill
- uid: TorchSharp.DoubleTensor.IndexSelect*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: IndexSelect
  nameWithType: DoubleTensor.IndexSelect
  fullName: DoubleTensor.IndexSelect
- uid: TorchSharp.DoubleTensor.Item*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Item
  nameWithType: DoubleTensor.Item
  fullName: DoubleTensor.Item
- uid: TorchSharp.DoubleTensor.KthValue*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: KthValue
  nameWithType: DoubleTensor.KthValue
  fullName: DoubleTensor.KthValue
- uid: TorchSharp.DoubleTensor.LERP*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: LERP
  nameWithType: DoubleTensor.LERP
  fullName: DoubleTensor.LERP
- uid: TorchSharp.DoubleTensor.LeTensor*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: LeTensor
  nameWithType: DoubleTensor.LeTensor
  fullName: DoubleTensor.LeTensor
- uid: TorchSharp.DoubleTensor.LeTensorT*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: LeTensorT
  nameWithType: DoubleTensor.LeTensorT
  fullName: DoubleTensor.LeTensorT
- uid: TorchSharp.DoubleTensor.LeValue*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: LeValue
  nameWithType: DoubleTensor.LeValue
  fullName: DoubleTensor.LeValue
- uid: TorchSharp.DoubleTensor.LeValueT*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: LeValueT
  nameWithType: DoubleTensor.LeValueT
  fullName: DoubleTensor.LeValueT
- uid: TorchSharp.DoubleTensor.Lgamma*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Lgamma
  nameWithType: DoubleTensor.Lgamma
  fullName: DoubleTensor.Lgamma
- uid: TorchSharp.DoubleTensor.Linspace*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Linspace
  nameWithType: DoubleTensor.Linspace
  fullName: DoubleTensor.Linspace
- uid: TorchSharp.DoubleTensor.Log*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Log
  nameWithType: DoubleTensor.Log
  fullName: DoubleTensor.Log
- uid: TorchSharp.DoubleTensor.Log10*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Log10
  nameWithType: DoubleTensor.Log10
  fullName: DoubleTensor.Log10
- uid: TorchSharp.DoubleTensor.Log1p*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Log1p
  nameWithType: DoubleTensor.Log1p
  fullName: DoubleTensor.Log1p
- uid: TorchSharp.DoubleTensor.Log2*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Log2
  nameWithType: DoubleTensor.Log2
  fullName: DoubleTensor.Log2
- uid: TorchSharp.DoubleTensor.LogNormal*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: LogNormal
  nameWithType: DoubleTensor.LogNormal
  fullName: DoubleTensor.LogNormal
- uid: TorchSharp.DoubleTensor.Logspace*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Logspace
  nameWithType: DoubleTensor.Logspace
  fullName: DoubleTensor.Logspace
- uid: TorchSharp.DoubleTensor.LShift*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: LShift
  nameWithType: DoubleTensor.LShift
  fullName: DoubleTensor.LShift
- uid: TorchSharp.DoubleTensor.LtTensor*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: LtTensor
  nameWithType: DoubleTensor.LtTensor
  fullName: DoubleTensor.LtTensor
- uid: TorchSharp.DoubleTensor.LtTensorT*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: LtTensorT
  nameWithType: DoubleTensor.LtTensorT
  fullName: DoubleTensor.LtTensorT
- uid: TorchSharp.DoubleTensor.LtValue*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: LtValue
  nameWithType: DoubleTensor.LtValue
  fullName: DoubleTensor.LtValue
- uid: TorchSharp.DoubleTensor.LtValueT*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: LtValueT
  nameWithType: DoubleTensor.LtValueT
  fullName: DoubleTensor.LtValueT
- uid: TorchSharp.DoubleTensor.MaskedCopy*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: MaskedCopy
  nameWithType: DoubleTensor.MaskedCopy
  fullName: DoubleTensor.MaskedCopy
- uid: TorchSharp.DoubleTensor.MaskedFill*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: MaskedFill
  nameWithType: DoubleTensor.MaskedFill
  fullName: DoubleTensor.MaskedFill
- uid: TorchSharp.DoubleTensor.MaskedSelect*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: MaskedSelect
  nameWithType: DoubleTensor.MaskedSelect
  fullName: DoubleTensor.MaskedSelect
- uid: TorchSharp.DoubleTensor.Match*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Match
  nameWithType: DoubleTensor.Match
  fullName: DoubleTensor.Match
- uid: TorchSharp.DoubleTensor.Max*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Max
  nameWithType: DoubleTensor.Max
  fullName: DoubleTensor.Max
- uid: TorchSharp.DoubleTensor.MaxAll*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: MaxAll
  nameWithType: DoubleTensor.MaxAll
  fullName: DoubleTensor.MaxAll
- uid: TorchSharp.DoubleTensor.Mean*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Mean
  nameWithType: DoubleTensor.Mean
  fullName: DoubleTensor.Mean
- uid: TorchSharp.DoubleTensor.MeanAll*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: MeanAll
  nameWithType: DoubleTensor.MeanAll
  fullName: DoubleTensor.MeanAll
- uid: TorchSharp.DoubleTensor.Median*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Median
  nameWithType: DoubleTensor.Median
  fullName: DoubleTensor.Median
- uid: TorchSharp.DoubleTensor.MedianAll*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: MedianAll
  nameWithType: DoubleTensor.MedianAll
  fullName: DoubleTensor.MedianAll
- uid: TorchSharp.DoubleTensor.Min*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Min
  nameWithType: DoubleTensor.Min
  fullName: DoubleTensor.Min
- uid: TorchSharp.DoubleTensor.MinAll*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: MinAll
  nameWithType: DoubleTensor.MinAll
  fullName: DoubleTensor.MinAll
- uid: TorchSharp.DoubleTensor.Mode*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Mode
  nameWithType: DoubleTensor.Mode
  fullName: DoubleTensor.Mode
- uid: TorchSharp.DoubleTensor.Mul*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Mul
  nameWithType: DoubleTensor.Mul
  fullName: DoubleTensor.Mul
- uid: TorchSharp.DoubleTensor.Multinomial*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Multinomial
  nameWithType: DoubleTensor.Multinomial
  fullName: DoubleTensor.Multinomial
- uid: TorchSharp.DoubleTensor.Narrow*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Narrow
  nameWithType: DoubleTensor.Narrow
  fullName: DoubleTensor.Narrow
- uid: TorchSharp.DoubleTensor.neg*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: neg
  nameWithType: DoubleTensor.neg
  fullName: DoubleTensor.neg
- uid: TorchSharp.DoubleTensor.NeTensor*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: NeTensor
  nameWithType: DoubleTensor.NeTensor
  fullName: DoubleTensor.NeTensor
- uid: TorchSharp.DoubleTensor.NeTensorT*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: NeTensorT
  nameWithType: DoubleTensor.NeTensorT
  fullName: DoubleTensor.NeTensorT
- uid: TorchSharp.DoubleTensor.NeValue*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: NeValue
  nameWithType: DoubleTensor.NeValue
  fullName: DoubleTensor.NeValue
- uid: TorchSharp.DoubleTensor.NeValueT*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: NeValueT
  nameWithType: DoubleTensor.NeValueT
  fullName: DoubleTensor.NeValueT
- uid: TorchSharp.DoubleTensor.NewWithStorage1d*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: NewWithStorage1d
  nameWithType: DoubleTensor.NewWithStorage1d
  fullName: DoubleTensor.NewWithStorage1d
- uid: TorchSharp.DoubleTensor.NewWithStorage2d*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: NewWithStorage2d
  nameWithType: DoubleTensor.NewWithStorage2d
  fullName: DoubleTensor.NewWithStorage2d
- uid: TorchSharp.DoubleTensor.NewWithStorage3d*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: NewWithStorage3d
  nameWithType: DoubleTensor.NewWithStorage3d
  fullName: DoubleTensor.NewWithStorage3d
- uid: TorchSharp.DoubleTensor.NewWithStorage4d*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: NewWithStorage4d
  nameWithType: DoubleTensor.NewWithStorage4d
  fullName: DoubleTensor.NewWithStorage4d
- uid: TorchSharp.DoubleTensor.NonZero*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: NonZero
  nameWithType: DoubleTensor.NonZero
  fullName: DoubleTensor.NonZero
- uid: TorchSharp.DoubleTensor.Norm*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Norm
  nameWithType: DoubleTensor.Norm
  fullName: DoubleTensor.Norm
- uid: TorchSharp.DoubleTensor.Normal*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Normal
  nameWithType: DoubleTensor.Normal
  fullName: DoubleTensor.Normal
- uid: TorchSharp.DoubleTensor.NormAll*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: NormAll
  nameWithType: DoubleTensor.NormAll
  fullName: DoubleTensor.NormAll
- uid: TorchSharp.DoubleTensor.NormalMeans*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: NormalMeans
  nameWithType: DoubleTensor.NormalMeans
  fullName: DoubleTensor.NormalMeans
- uid: TorchSharp.DoubleTensor.NormalMeansStdvs*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: NormalMeansStdvs
  nameWithType: DoubleTensor.NormalMeansStdvs
  fullName: DoubleTensor.NormalMeansStdvs
- uid: TorchSharp.DoubleTensor.NormalStdvs*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: NormalStdvs
  nameWithType: DoubleTensor.NormalStdvs
  fullName: DoubleTensor.NormalStdvs
- uid: TorchSharp.DoubleTensor.NumElements*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: NumElements
  nameWithType: DoubleTensor.NumElements
  fullName: DoubleTensor.NumElements
- uid: TorchSharp.DoubleTensor.OnesLike*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: OnesLike
  nameWithType: DoubleTensor.OnesLike
  fullName: DoubleTensor.OnesLike
- uid: TorchSharp.DoubleTensor.Polygamma*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Polygamma
  nameWithType: DoubleTensor.Polygamma
  fullName: DoubleTensor.Polygamma
- uid: TorchSharp.DoubleTensor.Pow*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Pow
  nameWithType: DoubleTensor.Pow
  fullName: DoubleTensor.Pow
- uid: TorchSharp.DoubleTensor.Prod*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Prod
  nameWithType: DoubleTensor.Prod
  fullName: DoubleTensor.Prod
- uid: TorchSharp.DoubleTensor.ProdAll*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: ProdAll
  nameWithType: DoubleTensor.ProdAll
  fullName: DoubleTensor.ProdAll
- uid: TorchSharp.DoubleTensor.Put*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Put
  nameWithType: DoubleTensor.Put
  fullName: DoubleTensor.Put
- uid: TorchSharp.DoubleTensor.Random*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Random
  nameWithType: DoubleTensor.Random
  fullName: DoubleTensor.Random
- uid: TorchSharp.DoubleTensor.RandPerm*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: RandPerm
  nameWithType: DoubleTensor.RandPerm
  fullName: DoubleTensor.RandPerm
- uid: TorchSharp.DoubleTensor.Range*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Range
  nameWithType: DoubleTensor.Range
  fullName: DoubleTensor.Range
- uid: TorchSharp.DoubleTensor.Remainder*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Remainder
  nameWithType: DoubleTensor.Remainder
  fullName: DoubleTensor.Remainder
- uid: TorchSharp.DoubleTensor.Renorm*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Renorm
  nameWithType: DoubleTensor.Renorm
  fullName: DoubleTensor.Renorm
- uid: TorchSharp.DoubleTensor.Resize1d*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Resize1d
  nameWithType: DoubleTensor.Resize1d
  fullName: DoubleTensor.Resize1d
- uid: TorchSharp.DoubleTensor.Resize2d*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Resize2d
  nameWithType: DoubleTensor.Resize2d
  fullName: DoubleTensor.Resize2d
- uid: TorchSharp.DoubleTensor.Resize3d*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Resize3d
  nameWithType: DoubleTensor.Resize3d
  fullName: DoubleTensor.Resize3d
- uid: TorchSharp.DoubleTensor.Resize4d*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Resize4d
  nameWithType: DoubleTensor.Resize4d
  fullName: DoubleTensor.Resize4d
- uid: TorchSharp.DoubleTensor.Resize5d*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Resize5d
  nameWithType: DoubleTensor.Resize5d
  fullName: DoubleTensor.Resize5d
- uid: TorchSharp.DoubleTensor.ResizeAs*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: ResizeAs
  nameWithType: DoubleTensor.ResizeAs
  fullName: DoubleTensor.ResizeAs
- uid: TorchSharp.DoubleTensor.Round*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Round
  nameWithType: DoubleTensor.Round
  fullName: DoubleTensor.Round
- uid: TorchSharp.DoubleTensor.RShift*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: RShift
  nameWithType: DoubleTensor.RShift
  fullName: DoubleTensor.RShift
- uid: TorchSharp.DoubleTensor.Rsqrt*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Rsqrt
  nameWithType: DoubleTensor.Rsqrt
  fullName: DoubleTensor.Rsqrt
- uid: TorchSharp.DoubleTensor.Scatter*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Scatter
  nameWithType: DoubleTensor.Scatter
  fullName: DoubleTensor.Scatter
- uid: TorchSharp.DoubleTensor.ScatterAdd*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: ScatterAdd
  nameWithType: DoubleTensor.ScatterAdd
  fullName: DoubleTensor.ScatterAdd
- uid: TorchSharp.DoubleTensor.ScatterFill*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: ScatterFill
  nameWithType: DoubleTensor.ScatterFill
  fullName: DoubleTensor.ScatterFill
- uid: TorchSharp.DoubleTensor.Select*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Select
  nameWithType: DoubleTensor.Select
  fullName: DoubleTensor.Select
- uid: TorchSharp.DoubleTensor.Set*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Set
  nameWithType: DoubleTensor.Set
  fullName: DoubleTensor.Set
- uid: TorchSharp.DoubleTensor.Shape*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Shape
  nameWithType: DoubleTensor.Shape
  fullName: DoubleTensor.Shape
- uid: TorchSharp.DoubleTensor.Sigmoid*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Sigmoid
  nameWithType: DoubleTensor.Sigmoid
  fullName: DoubleTensor.Sigmoid
- uid: TorchSharp.DoubleTensor.Sign*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Sign
  nameWithType: DoubleTensor.Sign
  fullName: DoubleTensor.Sign
- uid: TorchSharp.DoubleTensor.Sin*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Sin
  nameWithType: DoubleTensor.Sin
  fullName: DoubleTensor.Sin
- uid: TorchSharp.DoubleTensor.Sinh*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Sinh
  nameWithType: DoubleTensor.Sinh
  fullName: DoubleTensor.Sinh
- uid: TorchSharp.DoubleTensor.Sort*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Sort
  nameWithType: DoubleTensor.Sort
  fullName: DoubleTensor.Sort
- uid: TorchSharp.DoubleTensor.Sqrt*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Sqrt
  nameWithType: DoubleTensor.Sqrt
  fullName: DoubleTensor.Sqrt
- uid: TorchSharp.DoubleTensor.Squeeze*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Squeeze
  nameWithType: DoubleTensor.Squeeze
  fullName: DoubleTensor.Squeeze
- uid: TorchSharp.DoubleTensor.Squeeze1d*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Squeeze1d
  nameWithType: DoubleTensor.Squeeze1d
  fullName: DoubleTensor.Squeeze1d
- uid: TorchSharp.DoubleTensor.Std*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Std
  nameWithType: DoubleTensor.Std
  fullName: DoubleTensor.Std
- uid: TorchSharp.DoubleTensor.StdAll*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: StdAll
  nameWithType: DoubleTensor.StdAll
  fullName: DoubleTensor.StdAll
- uid: TorchSharp.DoubleTensor.Storage*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Storage
  nameWithType: DoubleTensor.Storage
  fullName: DoubleTensor.Storage
- uid: TorchSharp.DoubleTensor.Sub*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Sub
  nameWithType: DoubleTensor.Sub
  fullName: DoubleTensor.Sub
- uid: TorchSharp.DoubleTensor.SubScaled*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: SubScaled
  nameWithType: DoubleTensor.SubScaled
  fullName: DoubleTensor.SubScaled
- uid: TorchSharp.DoubleTensor.Sum*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Sum
  nameWithType: DoubleTensor.Sum
  fullName: DoubleTensor.Sum
- uid: TorchSharp.DoubleTensor.SumAll*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: SumAll
  nameWithType: DoubleTensor.SumAll
  fullName: DoubleTensor.SumAll
- uid: TorchSharp.DoubleTensor.Take*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Take
  nameWithType: DoubleTensor.Take
  fullName: DoubleTensor.Take
- uid: TorchSharp.DoubleTensor.Tan*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Tan
  nameWithType: DoubleTensor.Tan
  fullName: DoubleTensor.Tan
- uid: TorchSharp.DoubleTensor.Tanh*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Tanh
  nameWithType: DoubleTensor.Tanh
  fullName: DoubleTensor.Tanh
- uid: TorchSharp.DoubleTensor.TopK*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: TopK
  nameWithType: DoubleTensor.TopK
  fullName: DoubleTensor.TopK
- uid: TorchSharp.DoubleTensor.ToString*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: ToString
  nameWithType: DoubleTensor.ToString
  fullName: DoubleTensor.ToString
- uid: TorchSharp.DoubleTensor.TPow*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: TPow
  nameWithType: DoubleTensor.TPow
  fullName: DoubleTensor.TPow
- uid: TorchSharp.DoubleTensor.Trace*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Trace
  nameWithType: DoubleTensor.Trace
  fullName: DoubleTensor.Trace
- uid: TorchSharp.DoubleTensor.Transpose*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Transpose
  nameWithType: DoubleTensor.Transpose
  fullName: DoubleTensor.Transpose
- uid: TorchSharp.DoubleTensor.Trigamma*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Trigamma
  nameWithType: DoubleTensor.Trigamma
  fullName: DoubleTensor.Trigamma
- uid: TorchSharp.DoubleTensor.TriL*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: TriL
  nameWithType: DoubleTensor.TriL
  fullName: DoubleTensor.TriL
- uid: TorchSharp.DoubleTensor.TriU*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: TriU
  nameWithType: DoubleTensor.TriU
  fullName: DoubleTensor.TriU
- uid: TorchSharp.DoubleTensor.Trunc*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Trunc
  nameWithType: DoubleTensor.Trunc
  fullName: DoubleTensor.Trunc
- uid: TorchSharp.DoubleTensor.Unfold*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Unfold
  nameWithType: DoubleTensor.Unfold
  fullName: DoubleTensor.Unfold
- uid: TorchSharp.DoubleTensor.Uniform*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Uniform
  nameWithType: DoubleTensor.Uniform
  fullName: DoubleTensor.Uniform
- uid: TorchSharp.DoubleTensor.Unsqueeze1d*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Unsqueeze1d
  nameWithType: DoubleTensor.Unsqueeze1d
  fullName: DoubleTensor.Unsqueeze1d
- uid: TorchSharp.DoubleTensor.Var*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: Var
  nameWithType: DoubleTensor.Var
  fullName: DoubleTensor.Var
- uid: TorchSharp.DoubleTensor.VarAll*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: VarAll
  nameWithType: DoubleTensor.VarAll
  fullName: DoubleTensor.VarAll
- uid: TorchSharp.DoubleTensor.ZeroFill*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: ZeroFill
  nameWithType: DoubleTensor.ZeroFill
  fullName: DoubleTensor.ZeroFill
- uid: TorchSharp.DoubleTensor.ZerosLike*
  parent: TorchSharp.DoubleTensor
  isExternal: false
  name: ZerosLike
  nameWithType: DoubleTensor.ZerosLike
  fullName: DoubleTensor.ZerosLike
- uid: System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
