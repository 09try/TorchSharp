### YamlMime:ManagedReference
items:
- uid: TorchSharp.IntTensor
  id: IntTensor
  children:
  - TorchSharp.IntTensor.#ctor
  - TorchSharp.IntTensor.#ctor(System.Int64)
  - TorchSharp.IntTensor.#ctor(System.Int64,System.Int64)
  - TorchSharp.IntTensor.#ctor(System.Int64,System.Int64,System.Int64)
  - TorchSharp.IntTensor.#ctor(System.Int64,System.Int64,System.Int64,System.Int64)
  - TorchSharp.IntTensor.Add(System.Int32)
  - TorchSharp.IntTensor.Add(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  - TorchSharp.IntTensor.AddBMM(System.Int32,System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)
  - TorchSharp.IntTensor.AddCDiv(System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)
  - TorchSharp.IntTensor.AddCMul(System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)
  - TorchSharp.IntTensor.AddMM(System.Int32,System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)
  - TorchSharp.IntTensor.AddMV(System.Int32,System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)
  - TorchSharp.IntTensor.AddR(System.Int32,System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)
  - TorchSharp.IntTensor.AddScaled(System.Int32,System.Int32)
  - TorchSharp.IntTensor.ARange(System.Int64,System.Int64,System.Int64)
  - TorchSharp.IntTensor.BAddBMM(System.Int32,System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)
  - TorchSharp.IntTensor.BitAnd(System.Int32)
  - TorchSharp.IntTensor.BitAnd(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  - TorchSharp.IntTensor.BitOr(System.Int32)
  - TorchSharp.IntTensor.BitOr(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  - TorchSharp.IntTensor.BitXor(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  - TorchSharp.IntTensor.BitXor(System.Int32)
  - TorchSharp.IntTensor.CAdd(System.Int32,TorchSharp.IntTensor)
  - TorchSharp.IntTensor.CappedRandom(TorchSharp.RandomGenerator,System.Int64)
  - TorchSharp.IntTensor.CBitAnd(TorchSharp.IntTensor)
  - TorchSharp.IntTensor.CBitOr(TorchSharp.IntTensor)
  - TorchSharp.IntTensor.CBitXor(TorchSharp.IntTensor)
  - TorchSharp.IntTensor.CDiv(TorchSharp.IntTensor)
  - TorchSharp.IntTensor.CFMod(TorchSharp.IntTensor)
  - TorchSharp.IntTensor.Clamp(System.Int32,System.Int32)
  - TorchSharp.IntTensor.Clamp(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  - TorchSharp.IntTensor.Clamp(System.Int32)
  - TorchSharp.IntTensor.ClampedRandom(TorchSharp.RandomGenerator,System.Int64,System.Int64)
  - TorchSharp.IntTensor.Clone
  - TorchSharp.IntTensor.CLShift(TorchSharp.IntTensor)
  - TorchSharp.IntTensor.CMax(TorchSharp.IntTensor)
  - TorchSharp.IntTensor.CMaxValue(System.Int32)
  - TorchSharp.IntTensor.CMin(TorchSharp.IntTensor)
  - TorchSharp.IntTensor.CMinValue(System.Int32)
  - TorchSharp.IntTensor.CMul(TorchSharp.IntTensor)
  - TorchSharp.IntTensor.Concatenate(TorchSharp.IntTensor,System.Int32)
  - TorchSharp.IntTensor.Copy(TorchSharp.IntTensor)
  - TorchSharp.IntTensor.CopyByte(TorchSharp.ByteTensor)
  - TorchSharp.IntTensor.CopyDouble(TorchSharp.DoubleTensor)
  - TorchSharp.IntTensor.CopyFloat(TorchSharp.FloatTensor)
  - TorchSharp.IntTensor.CopyInt(TorchSharp.IntTensor)
  - TorchSharp.IntTensor.CopyLong(TorchSharp.LongTensor)
  - TorchSharp.IntTensor.CopyShort(TorchSharp.ShortTensor)
  - TorchSharp.IntTensor.CPow(TorchSharp.IntTensor)
  - TorchSharp.IntTensor.CRemainder(TorchSharp.IntTensor)
  - TorchSharp.IntTensor.CrossProduct(TorchSharp.IntTensor)
  - TorchSharp.IntTensor.CSub(System.Int32,TorchSharp.IntTensor)
  - TorchSharp.IntTensor.CumulativeProd(System.Int32)
  - TorchSharp.IntTensor.CumulativeSum(System.Int32)
  - TorchSharp.IntTensor.Data
  - TorchSharp.IntTensor.Diagonal(System.Int32)
  - TorchSharp.IntTensor.Dimensions
  - TorchSharp.IntTensor.Dispose
  - TorchSharp.IntTensor.Dispose(System.Boolean)
  - TorchSharp.IntTensor.Div(System.Int32)
  - TorchSharp.IntTensor.Div(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  - TorchSharp.IntTensor.Dot(TorchSharp.IntTensor)
  - TorchSharp.IntTensor.EqTensor(TorchSharp.IntTensor)
  - TorchSharp.IntTensor.EqTensorT(TorchSharp.IntTensor)
  - TorchSharp.IntTensor.Equal(TorchSharp.IntTensor)
  - TorchSharp.IntTensor.EqValue(System.Int32)
  - TorchSharp.IntTensor.EqValueT(System.Int32)
  - TorchSharp.IntTensor.Eye(System.Int64,System.Int64)
  - TorchSharp.IntTensor.Fill(System.Int32)
  - TorchSharp.IntTensor.Finalize
  - TorchSharp.IntTensor.Fmod(System.Int32)
  - TorchSharp.IntTensor.Fmod(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  - TorchSharp.IntTensor.Gather(TorchSharp.IntTensor,System.Int32,TorchSharp.LongTensor)
  - TorchSharp.IntTensor.Geometric(TorchSharp.RandomGenerator,System.Double)
  - TorchSharp.IntTensor.GeTensor(TorchSharp.IntTensor)
  - TorchSharp.IntTensor.GeTensorT(TorchSharp.IntTensor)
  - TorchSharp.IntTensor.GetTensorDimension(System.Int32)
  - TorchSharp.IntTensor.GetTensorStride(System.Int32)
  - TorchSharp.IntTensor.GeValue(System.Int32)
  - TorchSharp.IntTensor.GeValueT(System.Int32)
  - TorchSharp.IntTensor.GtTensor(TorchSharp.IntTensor)
  - TorchSharp.IntTensor.GtTensorT(TorchSharp.IntTensor)
  - TorchSharp.IntTensor.GtValue(System.Int32)
  - TorchSharp.IntTensor.GtValueT(System.Int32)
  - TorchSharp.IntTensor.IndexAdd(System.Int32,TorchSharp.LongTensor,TorchSharp.IntTensor)
  - TorchSharp.IntTensor.IndexCopy(System.Int32,TorchSharp.LongTensor,TorchSharp.IntTensor)
  - TorchSharp.IntTensor.IndexFill(System.Int32,TorchSharp.LongTensor,System.Int32)
  - TorchSharp.IntTensor.IndexSelect(System.Int32,TorchSharp.LongTensor)
  - TorchSharp.IntTensor.Item(System.Int64)
  - TorchSharp.IntTensor.Item(System.Int64,System.Int64)
  - TorchSharp.IntTensor.Item(System.Int64,System.Int64,System.Int64)
  - TorchSharp.IntTensor.Item(System.Int64,System.Int64,System.Int64,System.Int64)
  - TorchSharp.IntTensor.KthValue(System.Int64,System.Int32,System.Boolean)
  - TorchSharp.IntTensor.LERP(TorchSharp.IntTensor,System.Int32)
  - TorchSharp.IntTensor.LeTensor(TorchSharp.IntTensor)
  - TorchSharp.IntTensor.LeTensorT(TorchSharp.IntTensor)
  - TorchSharp.IntTensor.LeValue(System.Int32)
  - TorchSharp.IntTensor.LeValueT(System.Int32)
  - TorchSharp.IntTensor.LShift(System.Int32)
  - TorchSharp.IntTensor.LShift(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  - TorchSharp.IntTensor.LtTensor(TorchSharp.IntTensor)
  - TorchSharp.IntTensor.LtTensorT(TorchSharp.IntTensor)
  - TorchSharp.IntTensor.LtValue(System.Int32)
  - TorchSharp.IntTensor.LtValueT(System.Int32)
  - TorchSharp.IntTensor.MaskedCopy(TorchSharp.ByteTensor,TorchSharp.IntTensor)
  - TorchSharp.IntTensor.MaskedFill(TorchSharp.ByteTensor,System.Int32)
  - TorchSharp.IntTensor.MaskedSelect(TorchSharp.ByteTensor,TorchSharp.IntTensor)
  - TorchSharp.IntTensor.Match(TorchSharp.IntTensor,System.Int32)
  - TorchSharp.IntTensor.Max(System.Int32,System.Boolean)
  - TorchSharp.IntTensor.MaxAll
  - TorchSharp.IntTensor.MeanAll
  - TorchSharp.IntTensor.Median(System.Int32,System.Boolean)
  - TorchSharp.IntTensor.MedianAll
  - TorchSharp.IntTensor.Min(System.Int32,System.Boolean)
  - TorchSharp.IntTensor.MinAll
  - TorchSharp.IntTensor.Mode(System.Int32,System.Boolean)
  - TorchSharp.IntTensor.Mul(System.Int32)
  - TorchSharp.IntTensor.Mul(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  - TorchSharp.IntTensor.Narrow(System.Int32,System.Int64,System.Int64)
  - TorchSharp.IntTensor.NeTensor(TorchSharp.IntTensor)
  - TorchSharp.IntTensor.NeTensorT(TorchSharp.IntTensor)
  - TorchSharp.IntTensor.NeValue(System.Int32)
  - TorchSharp.IntTensor.NeValueT(System.Int32)
  - TorchSharp.IntTensor.NewWithStorage1d(System.IntPtr,System.Int64,System.Int64)
  - TorchSharp.IntTensor.NewWithStorage2d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64)
  - TorchSharp.IntTensor.NewWithStorage3d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
  - TorchSharp.IntTensor.NewWithStorage4d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
  - TorchSharp.IntTensor.NonZero
  - TorchSharp.IntTensor.NumElements
  - TorchSharp.IntTensor.Prod(System.Int32,System.Boolean)
  - TorchSharp.IntTensor.ProdAll
  - TorchSharp.IntTensor.Put(TorchSharp.LongTensor,TorchSharp.IntTensor,System.Boolean)
  - TorchSharp.IntTensor.Random(System.Int64)
  - TorchSharp.IntTensor.Random(TorchSharp.RandomGenerator)
  - TorchSharp.IntTensor.Random(TorchSharp.RandomGenerator,System.Int64)
  - TorchSharp.IntTensor.RandPerm(TorchSharp.RandomGenerator,System.Int64)
  - TorchSharp.IntTensor.Range(System.Int64,System.Int64,System.Int64)
  - TorchSharp.IntTensor.Remainder(System.Int32)
  - TorchSharp.IntTensor.Remainder(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  - TorchSharp.IntTensor.Resize1d(System.Int64)
  - TorchSharp.IntTensor.Resize2d(System.Int64,System.Int64)
  - TorchSharp.IntTensor.Resize3d(System.Int64,System.Int64,System.Int64)
  - TorchSharp.IntTensor.Resize4d(System.Int64,System.Int64,System.Int64,System.Int64)
  - TorchSharp.IntTensor.Resize5d(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
  - TorchSharp.IntTensor.ResizeAs(TorchSharp.IntTensor)
  - TorchSharp.IntTensor.RShift(System.Int32)
  - TorchSharp.IntTensor.RShift(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  - TorchSharp.IntTensor.Scatter(System.Int32,TorchSharp.LongTensor,TorchSharp.IntTensor)
  - TorchSharp.IntTensor.ScatterAdd(System.Int32,TorchSharp.LongTensor,TorchSharp.IntTensor)
  - TorchSharp.IntTensor.ScatterFill(System.Int32,TorchSharp.LongTensor,System.Int32)
  - TorchSharp.IntTensor.Select(System.Int32,System.Int64)
  - TorchSharp.IntTensor.Set(TorchSharp.IntTensor)
  - TorchSharp.IntTensor.Shape
  - TorchSharp.IntTensor.Sign
  - TorchSharp.IntTensor.Sort(System.Int32,System.Boolean)
  - TorchSharp.IntTensor.Squeeze
  - TorchSharp.IntTensor.Squeeze1d(TorchSharp.IntTensor,System.Int32)
  - TorchSharp.IntTensor.Storage
  - TorchSharp.IntTensor.Sub(System.Int32)
  - TorchSharp.IntTensor.Sub(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  - TorchSharp.IntTensor.SubScaled(System.Int32,System.Int32)
  - TorchSharp.IntTensor.Sum(System.Int32,System.Boolean)
  - TorchSharp.IntTensor.SumAll
  - TorchSharp.IntTensor.Take(TorchSharp.IntTensor,TorchSharp.LongTensor)
  - TorchSharp.IntTensor.TopK(System.Int64,System.Int32,System.Int32,System.Boolean)
  - TorchSharp.IntTensor.ToString
  - TorchSharp.IntTensor.Trace
  - TorchSharp.IntTensor.Transpose(System.Int32,System.Int32)
  - TorchSharp.IntTensor.TriL(System.Int64)
  - TorchSharp.IntTensor.TriU(System.Int64)
  - TorchSharp.IntTensor.Unfold(System.Int32,System.Int64,System.Int64)
  - TorchSharp.IntTensor.Unsqueeze1d(TorchSharp.IntTensor,System.Int32)
  - TorchSharp.IntTensor.ZeroFill
  langs:
  - csharp
  name: IntTensor
  nameWithType: IntTensor
  fullName: TorchSharp.IntTensor
  type: Class
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Tensor of type Int.
  remarks: >-
    <p>
                    Use the default constructor to create an empty tensor, or invoke one of the
                    constructors with one (1D), two (2D), three (3D), or four parameters (4D) to x
                    create a tensor for the desired number of dimensions.
                  </p>
  syntax:
    content: 'public class IntTensor : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
- uid: TorchSharp.IntTensor.#ctor
  id: '#ctor'
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: IntTensor()
  nameWithType: IntTensor.IntTensor()
  fullName: IntTensor.IntTensor()
  type: Constructor
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Creates an empty tensor.
  syntax:
    content: public IntTensor ();
    parameters: []
  overload: TorchSharp.IntTensor.#ctor*
  exceptions: []
- uid: TorchSharp.IntTensor.#ctor(System.Int64)
  id: '#ctor(System.Int64)'
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: IntTensor(Int64)
  nameWithType: IntTensor.IntTensor(Int64)
  fullName: IntTensor.IntTensor(Int64)
  type: Constructor
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Creates a 1D tensor of the specified size.
  syntax:
    content: public IntTensor (long size0);
    parameters:
    - id: size0
      type: System.Int64
      description: Size for the first dimension.
  overload: TorchSharp.IntTensor.#ctor*
  exceptions: []
- uid: TorchSharp.IntTensor.#ctor(System.Int64,System.Int64)
  id: '#ctor(System.Int64,System.Int64)'
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: IntTensor(Int64, Int64)
  nameWithType: IntTensor.IntTensor(Int64, Int64)
  fullName: IntTensor.IntTensor(Int64, Int64)
  type: Constructor
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Creates a 2D tensor of the specified size.
  syntax:
    content: public IntTensor (long size0, long size1);
    parameters:
    - id: size0
      type: System.Int64
      description: Size for the first dimension.
    - id: size1
      type: System.Int64
      description: Size for the second dimension.
  overload: TorchSharp.IntTensor.#ctor*
  exceptions: []
- uid: TorchSharp.IntTensor.#ctor(System.Int64,System.Int64,System.Int64)
  id: '#ctor(System.Int64,System.Int64,System.Int64)'
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: IntTensor(Int64, Int64, Int64)
  nameWithType: IntTensor.IntTensor(Int64, Int64, Int64)
  fullName: IntTensor.IntTensor(Int64, Int64, Int64)
  type: Constructor
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Creates a 3D tensor of the specified size.
  syntax:
    content: public IntTensor (long size0, long size1, long size2);
    parameters:
    - id: size0
      type: System.Int64
      description: Size for the first dimension.
    - id: size1
      type: System.Int64
      description: Size for the second dimension.
    - id: size2
      type: System.Int64
      description: Size for the third dimension.
  overload: TorchSharp.IntTensor.#ctor*
  exceptions: []
- uid: TorchSharp.IntTensor.#ctor(System.Int64,System.Int64,System.Int64,System.Int64)
  id: '#ctor(System.Int64,System.Int64,System.Int64,System.Int64)'
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: IntTensor(Int64, Int64, Int64, Int64)
  nameWithType: IntTensor.IntTensor(Int64, Int64, Int64, Int64)
  fullName: IntTensor.IntTensor(Int64, Int64, Int64, Int64)
  type: Constructor
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Creates a 4D tensor of the specified size.
  syntax:
    content: public IntTensor (long size0, long size1, long size2, long size3);
    parameters:
    - id: size0
      type: System.Int64
      description: Size for the first dimension.
    - id: size1
      type: System.Int64
      description: Size for the second dimension.
    - id: size2
      type: System.Int64
      description: Size for the third dimension.
    - id: size3
      type: System.Int64
      description: Size for the fourth dimension.
  overload: TorchSharp.IntTensor.#ctor*
  exceptions: []
- uid: TorchSharp.IntTensor.Add(System.Int32)
  id: Add(System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Add(Int32)
  nameWithType: IntTensor.Add(Int32)
  fullName: IntTensor.Add(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the Add operation on each element of the tensor with the
                  <see paramref="value"></see> and returns a new tensor with the result.
  remarks: "If you want to avoid the allocation of a new tensor, you can use the \n              alternative method <xref href=\"PytorchSharp.Add(PytorchSharp.IntTensor, Int, PytorchSharp.Int)\"></xref>."
  syntax:
    content: public TorchSharp.IntTensor Add (int value);
    parameters:
    - id: value
      type: System.Int32
      description: To be added.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.Add*
  exceptions: []
- uid: TorchSharp.IntTensor.Add(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  id: Add(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Add(IntTensor, Int32, IntTensor)
  nameWithType: IntTensor.Add(IntTensor, Int32, IntTensor)
  fullName: IntTensor.Add(IntTensor, Int32, IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the Add operation on each element of the source with the
                  provided scalar.   The result tensor specified as the last parameters
                  is resized to match the source.
  remarks: >-
    For each element in the <see paramref="source"></see> performs the Add operation
                   with <see paramref="value"></see>.   The result is stored in the <see paramref="result"></see>
                   tensor.
  syntax:
    content: public static void Add (TorchSharp.IntTensor source, int value, TorchSharp.IntTensor result);
    parameters:
    - id: source
      type: TorchSharp.IntTensor
      description: Source tensor on which the operation will take place.
    - id: value
      type: System.Int32
      description: The scalar value that the operation uses.
    - id: result
      type: TorchSharp.IntTensor
      description: The tensor where the result will be placed
  overload: TorchSharp.IntTensor.Add*
  exceptions: []
- uid: TorchSharp.IntTensor.AddBMM(System.Int32,System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)
  id: AddBMM(System.Int32,System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: AddBMM(Int32, Int32, IntTensor, IntTensor)
  nameWithType: IntTensor.AddBMM(Int32, Int32, IntTensor, IntTensor)
  fullName: IntTensor.AddBMM(Int32, Int32, IntTensor, IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs AddBMM of the tensor with the provided \n              <see paramref=\"src1\"></see> and <see paramref=\"src1\"></see> tensors and returns a new tensor with the result."
  remarks: β mat+α (∑i=0bbatch1i@batch2i)
  syntax:
    content: public TorchSharp.IntTensor AddBMM (int beta, int alpha, TorchSharp.IntTensor batch1, TorchSharp.IntTensor batch2);
    parameters:
    - id: beta
      type: System.Int32
      description: Multiplier for this tensor (β).
    - id: alpha
      type: System.Int32
      description: Multiplier for batch1xbatch2 (α)
    - id: batch1
      type: TorchSharp.IntTensor
      description: the first batch of matrices to be multiplied
    - id: batch2
      type: TorchSharp.IntTensor
      description: the second batch of matrices to be multiplied
    return:
      type: TorchSharp.IntTensor
      description: β mat+α (∑i=0bbatch1i@batch2i)
  overload: TorchSharp.IntTensor.AddBMM*
  exceptions: []
- uid: TorchSharp.IntTensor.AddCDiv(System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)
  id: AddCDiv(System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: AddCDiv(Int32, IntTensor, IntTensor)
  nameWithType: IntTensor.AddCDiv(Int32, IntTensor, IntTensor)
  fullName: IntTensor.AddCDiv(Int32, IntTensor, IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs AddCDiv of the tensor with the provided \n              <see paramref=\"src1\"></see> and <see paramref=\"src1\"></see> tensors and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.IntTensor AddCDiv (int value, TorchSharp.IntTensor src1, TorchSharp.IntTensor src2);
    parameters:
    - id: value
      type: System.Int32
      description: To be added.
    - id: src1
      type: TorchSharp.IntTensor
      description: To be added.
    - id: src2
      type: TorchSharp.IntTensor
      description: To be added.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.AddCDiv*
  exceptions: []
- uid: TorchSharp.IntTensor.AddCMul(System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)
  id: AddCMul(System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: AddCMul(Int32, IntTensor, IntTensor)
  nameWithType: IntTensor.AddCMul(Int32, IntTensor, IntTensor)
  fullName: IntTensor.AddCMul(Int32, IntTensor, IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs AddCMul of the tensor with the provided \n              <see paramref=\"src1\"></see> and <see paramref=\"src1\"></see> tensors and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.IntTensor AddCMul (int value, TorchSharp.IntTensor src1, TorchSharp.IntTensor src2);
    parameters:
    - id: value
      type: System.Int32
      description: To be added.
    - id: src1
      type: TorchSharp.IntTensor
      description: To be added.
    - id: src2
      type: TorchSharp.IntTensor
      description: To be added.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.AddCMul*
  exceptions: []
- uid: TorchSharp.IntTensor.AddMM(System.Int32,System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)
  id: AddMM(System.Int32,System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: AddMM(Int32, Int32, IntTensor, IntTensor)
  nameWithType: IntTensor.AddMM(Int32, Int32, IntTensor, IntTensor)
  fullName: IntTensor.AddMM(Int32, Int32, IntTensor, IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs AddMM of the tensor with the provided \n              <see paramref=\"src1\"></see> and <see paramref=\"src1\"></see> tensors and returns a new tensor with the result."
  remarks: β mat+α (mat1i@mat2i)
  syntax:
    content: public TorchSharp.IntTensor AddMM (int beta, int alpha, TorchSharp.IntTensor mat1, TorchSharp.IntTensor mat2);
    parameters:
    - id: beta
      type: System.Int32
      description: Multiplier for this tensor (β).
    - id: alpha
      type: System.Int32
      description: Multiplier for mat1xmat2 (α)
    - id: mat1
      type: TorchSharp.IntTensor
      description: First matrix to  be multiplied
    - id: mat2
      type: TorchSharp.IntTensor
      description: Second matrix to  be multiplied
    return:
      type: TorchSharp.IntTensor
      description: β mat+α (mat1i@mat2i)
  overload: TorchSharp.IntTensor.AddMM*
  exceptions: []
- uid: TorchSharp.IntTensor.AddMV(System.Int32,System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)
  id: AddMV(System.Int32,System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: AddMV(Int32, Int32, IntTensor, IntTensor)
  nameWithType: IntTensor.AddMV(Int32, Int32, IntTensor, IntTensor)
  fullName: IntTensor.AddMV(Int32, Int32, IntTensor, IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs AddMV of the tensor with the provided \n              <see paramref=\"src1\"></see> and <see paramref=\"src1\"></see> tensors and returns a new tensor with the result."
  remarks: β tensor+α (mat@vec)
  syntax:
    content: public TorchSharp.IntTensor AddMV (int beta, int alpha, TorchSharp.IntTensor mat, TorchSharp.IntTensor vec);
    parameters:
    - id: beta
      type: System.Int32
      description: Multiplier for this tensor (β).
    - id: alpha
      type: System.Int32
      description: Multiplier for matxvec (α)
    - id: mat
      type: TorchSharp.IntTensor
      description: Matrix to be multiplied
    - id: vec
      type: TorchSharp.IntTensor
      description: Vector to be multiplied
    return:
      type: TorchSharp.IntTensor
      description: β tensor+α (mat@vec)
  overload: TorchSharp.IntTensor.AddMV*
  exceptions: []
- uid: TorchSharp.IntTensor.AddR(System.Int32,System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)
  id: AddR(System.Int32,System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: AddR(Int32, Int32, IntTensor, IntTensor)
  nameWithType: IntTensor.AddR(Int32, Int32, IntTensor, IntTensor)
  fullName: IntTensor.AddR(Int32, Int32, IntTensor, IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs AddR of the tensor with the provided \n              <see paramref=\"src1\"></see> and <see paramref=\"src1\"></see> tensors and returns a new tensor with the result."
  remarks: β mat+α (vec1⊗vec2)
  syntax:
    content: public TorchSharp.IntTensor AddR (int beta, int alpha, TorchSharp.IntTensor vec1, TorchSharp.IntTensor vec2);
    parameters:
    - id: beta
      type: System.Int32
      description: Multiplier for this tensor (β).
    - id: alpha
      type: System.Int32
      description: Multiplier for vec1xvec2 (α)
    - id: vec1
      type: TorchSharp.IntTensor
      description: the first vector of the outer product
    - id: vec2
      type: TorchSharp.IntTensor
      description: the second vector of the outer product
    return:
      type: TorchSharp.IntTensor
      description: β mat+α (vec1⊗vec2)
  overload: TorchSharp.IntTensor.AddR*
  exceptions: []
- uid: TorchSharp.IntTensor.AddScaled(System.Int32,System.Int32)
  id: AddScaled(System.Int32,System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: AddScaled(Int32, Int32)
  nameWithType: IntTensor.AddScaled(Int32, Int32)
  fullName: IntTensor.AddScaled(Int32, Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an AddScaled of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.IntTensor AddScaled (int value1, int value2);
    parameters:
    - id: value1
      type: System.Int32
      description: To be added.
    - id: value2
      type: System.Int32
      description: To be added.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.AddScaled*
  exceptions: []
- uid: TorchSharp.IntTensor.ARange(System.Int64,System.Int64,System.Int64)
  id: ARange(System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: ARange(Int64, Int64, Int64)
  nameWithType: IntTensor.ARange(Int64, Int64, Int64)
  fullName: IntTensor.ARange(Int64, Int64, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Create a range spanning from xmin to xmax, with 'step' between each value.
  syntax:
    content: public static TorchSharp.IntTensor ARange (long xmin, long xmax, long step);
    parameters:
    - id: xmin
      type: System.Int64
      description: The lower bound of the range.
    - id: xmax
      type: System.Int64
      description: The upper bound of the range.
    - id: step
      type: System.Int64
      description: The value step.
    return:
      type: TorchSharp.IntTensor
      description: To be added.
  overload: TorchSharp.IntTensor.ARange*
  exceptions: []
- uid: TorchSharp.IntTensor.BAddBMM(System.Int32,System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)
  id: BAddBMM(System.Int32,System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: BAddBMM(Int32, Int32, IntTensor, IntTensor)
  nameWithType: IntTensor.BAddBMM(Int32, Int32, IntTensor, IntTensor)
  fullName: IntTensor.BAddBMM(Int32, Int32, IntTensor, IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs BAddBMM of the tensor with the provided \n              <see paramref=\"src1\"></see> and <see paramref=\"src1\"></see> tensors and returns a new tensor with the result."
  remarks: β mati+α (batch1i@batch2i)
  syntax:
    content: public TorchSharp.IntTensor BAddBMM (int beta, int alpha, TorchSharp.IntTensor batch1, TorchSharp.IntTensor batch2);
    parameters:
    - id: beta
      type: System.Int32
      description: Multiplier for this tensor (β).
    - id: alpha
      type: System.Int32
      description: Multiplier for batch1xbatch2 (α)
    - id: batch1
      type: TorchSharp.IntTensor
      description: the first batch of matrices to be multiplied
    - id: batch2
      type: TorchSharp.IntTensor
      description: the second batch of matrices to be multiplied
    return:
      type: TorchSharp.IntTensor
      description: β mati+α (batch1i@batch2i)
  overload: TorchSharp.IntTensor.BAddBMM*
  exceptions: []
- uid: TorchSharp.IntTensor.BitAnd(System.Int32)
  id: BitAnd(System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: BitAnd(Int32)
  nameWithType: IntTensor.BitAnd(Int32)
  fullName: IntTensor.BitAnd(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the BitAnd operation on each element of the tensor with the
                  <see paramref="value"></see> and returns a new tensor with the result.
  remarks: "If you want to avoid the allocation of a new tensor, you can use the \n              alternative method <xref href=\"PytorchSharp.BitAnd(PytorchSharp.IntTensor, Int, PytorchSharp.Int)\"></xref>."
  syntax:
    content: public TorchSharp.IntTensor BitAnd (int value);
    parameters:
    - id: value
      type: System.Int32
      description: To be added.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.BitAnd*
  exceptions: []
- uid: TorchSharp.IntTensor.BitAnd(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  id: BitAnd(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: BitAnd(IntTensor, Int32, IntTensor)
  nameWithType: IntTensor.BitAnd(IntTensor, Int32, IntTensor)
  fullName: IntTensor.BitAnd(IntTensor, Int32, IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the BitAnd operation on each element of the source with the
                  provided scalar.   The result tensor specified as the last parameters
                  is resized to match the source.
  remarks: >-
    For each element in the <see paramref="source"></see> performs the BitAnd operation
                   with <see paramref="value"></see>.   The result is stored in the <see paramref="result"></see>
                   tensor.
  syntax:
    content: public static void BitAnd (TorchSharp.IntTensor source, int value, TorchSharp.IntTensor result);
    parameters:
    - id: source
      type: TorchSharp.IntTensor
      description: Source tensor on which the operation will take place.
    - id: value
      type: System.Int32
      description: The scalar value that the operation uses.
    - id: result
      type: TorchSharp.IntTensor
      description: The tensor where the result will be placed
  overload: TorchSharp.IntTensor.BitAnd*
  exceptions: []
- uid: TorchSharp.IntTensor.BitOr(System.Int32)
  id: BitOr(System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: BitOr(Int32)
  nameWithType: IntTensor.BitOr(Int32)
  fullName: IntTensor.BitOr(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the BitOr operation on each element of the tensor with the
                  <see paramref="value"></see> and returns a new tensor with the result.
  remarks: "If you want to avoid the allocation of a new tensor, you can use the \n              alternative method <xref href=\"PytorchSharp.BitOr(PytorchSharp.IntTensor, Int, PytorchSharp.Int)\"></xref>."
  syntax:
    content: public TorchSharp.IntTensor BitOr (int value);
    parameters:
    - id: value
      type: System.Int32
      description: To be added.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.BitOr*
  exceptions: []
- uid: TorchSharp.IntTensor.BitOr(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  id: BitOr(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: BitOr(IntTensor, Int32, IntTensor)
  nameWithType: IntTensor.BitOr(IntTensor, Int32, IntTensor)
  fullName: IntTensor.BitOr(IntTensor, Int32, IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the BitOr operation on each element of the source with the
                  provided scalar.   The result tensor specified as the last parameters
                  is resized to match the source.
  remarks: >-
    For each element in the <see paramref="source"></see> performs the BitOr operation
                   with <see paramref="value"></see>.   The result is stored in the <see paramref="result"></see>
                   tensor.
  syntax:
    content: public static void BitOr (TorchSharp.IntTensor source, int value, TorchSharp.IntTensor result);
    parameters:
    - id: source
      type: TorchSharp.IntTensor
      description: Source tensor on which the operation will take place.
    - id: value
      type: System.Int32
      description: The scalar value that the operation uses.
    - id: result
      type: TorchSharp.IntTensor
      description: The tensor where the result will be placed
  overload: TorchSharp.IntTensor.BitOr*
  exceptions: []
- uid: TorchSharp.IntTensor.BitXor(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  id: BitXor(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: BitXor(IntTensor, Int32, IntTensor)
  nameWithType: IntTensor.BitXor(IntTensor, Int32, IntTensor)
  fullName: IntTensor.BitXor(IntTensor, Int32, IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the BitXor operation on each element of the source with the
                  provided scalar.   The result tensor specified as the last parameters
                  is resized to match the source.
  remarks: >-
    For each element in the <see paramref="source"></see> performs the BitXor operation
                   with <see paramref="value"></see>.   The result is stored in the <see paramref="result"></see>
                   tensor.
  syntax:
    content: public static void BitXor (TorchSharp.IntTensor source, int value, TorchSharp.IntTensor result);
    parameters:
    - id: source
      type: TorchSharp.IntTensor
      description: Source tensor on which the operation will take place.
    - id: value
      type: System.Int32
      description: The scalar value that the operation uses.
    - id: result
      type: TorchSharp.IntTensor
      description: The tensor where the result will be placed
  overload: TorchSharp.IntTensor.BitXor*
  exceptions: []
- uid: TorchSharp.IntTensor.BitXor(System.Int32)
  id: BitXor(System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: BitXor(Int32)
  nameWithType: IntTensor.BitXor(Int32)
  fullName: IntTensor.BitXor(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the BitXor operation on each element of the tensor with the
                  <see paramref="value"></see> and returns a new tensor with the result.
  remarks: "If you want to avoid the allocation of a new tensor, you can use the \n              alternative method <xref href=\"PytorchSharp.BitXor(PytorchSharp.IntTensor, Int, PytorchSharp.Int)\"></xref>."
  syntax:
    content: public TorchSharp.IntTensor BitXor (int value);
    parameters:
    - id: value
      type: System.Int32
      description: To be added.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.BitXor*
  exceptions: []
- uid: TorchSharp.IntTensor.CAdd(System.Int32,TorchSharp.IntTensor)
  id: CAdd(System.Int32,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: CAdd(Int32, IntTensor)
  nameWithType: IntTensor.CAdd(Int32, IntTensor)
  fullName: IntTensor.CAdd(Int32, IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the CAdd operation on each element of the tensor with the
                  <see paramref="value"></see> and returns a new tensor with the result.
                  where the result is t[idx] + value * src[idx]
  syntax:
    content: public TorchSharp.IntTensor CAdd (int value, TorchSharp.IntTensor src);
    parameters:
    - id: value
      type: System.Int32
      description: To be added.
    - id: src
      type: TorchSharp.IntTensor
      description: To be added.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.CAdd*
  exceptions: []
- uid: TorchSharp.IntTensor.CappedRandom(TorchSharp.RandomGenerator,System.Int64)
  id: CappedRandom(TorchSharp.RandomGenerator,System.Int64)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: CappedRandom(RandomGenerator, Int64)
  nameWithType: IntTensor.CappedRandom(RandomGenerator, Int64)
  fullName: IntTensor.CappedRandom(RandomGenerator, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Populates the tensor with random values from 0 to max, using the provided random source generator.
  syntax:
    content: public void CappedRandom (TorchSharp.RandomGenerator source, long max);
    parameters:
    - id: source
      type: TorchSharp.RandomGenerator
      description: The random generator source
    - id: max
      type: System.Int64
      description: The upper limit for the values to be generated
  overload: TorchSharp.IntTensor.CappedRandom*
  exceptions: []
- uid: TorchSharp.IntTensor.CBitAnd(TorchSharp.IntTensor)
  id: CBitAnd(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: CBitAnd(IntTensor)
  nameWithType: IntTensor.CBitAnd(IntTensor)
  fullName: IntTensor.CBitAnd(IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an CBitAnd of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.IntTensor CBitAnd (TorchSharp.IntTensor src);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.CBitAnd*
  exceptions: []
- uid: TorchSharp.IntTensor.CBitOr(TorchSharp.IntTensor)
  id: CBitOr(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: CBitOr(IntTensor)
  nameWithType: IntTensor.CBitOr(IntTensor)
  fullName: IntTensor.CBitOr(IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an CBitOr of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.IntTensor CBitOr (TorchSharp.IntTensor src);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.CBitOr*
  exceptions: []
- uid: TorchSharp.IntTensor.CBitXor(TorchSharp.IntTensor)
  id: CBitXor(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: CBitXor(IntTensor)
  nameWithType: IntTensor.CBitXor(IntTensor)
  fullName: IntTensor.CBitXor(IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an CBitXor of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.IntTensor CBitXor (TorchSharp.IntTensor src);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.CBitXor*
  exceptions: []
- uid: TorchSharp.IntTensor.CDiv(TorchSharp.IntTensor)
  id: CDiv(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: CDiv(IntTensor)
  nameWithType: IntTensor.CDiv(IntTensor)
  fullName: IntTensor.CDiv(IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an CDiv of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.IntTensor CDiv (TorchSharp.IntTensor src);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.CDiv*
  exceptions: []
- uid: TorchSharp.IntTensor.CFMod(TorchSharp.IntTensor)
  id: CFMod(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: CFMod(IntTensor)
  nameWithType: IntTensor.CFMod(IntTensor)
  fullName: IntTensor.CFMod(IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an CFMod of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.IntTensor CFMod (TorchSharp.IntTensor src);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.CFMod*
  exceptions: []
- uid: TorchSharp.IntTensor.Clamp(System.Int32,System.Int32)
  id: Clamp(System.Int32,System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Clamp(Int32, Int32)
  nameWithType: IntTensor.Clamp(Int32, Int32)
  fullName: IntTensor.Clamp(Int32, Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an Clamp of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.IntTensor Clamp (int value1, int value2);
    parameters:
    - id: value1
      type: System.Int32
      description: To be added.
    - id: value2
      type: System.Int32
      description: To be added.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.Clamp*
  exceptions: []
- uid: TorchSharp.IntTensor.Clamp(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  id: Clamp(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Clamp(IntTensor, Int32, IntTensor)
  nameWithType: IntTensor.Clamp(IntTensor, Int32, IntTensor)
  fullName: IntTensor.Clamp(IntTensor, Int32, IntTensor)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: >-
    Performs the Clamp operation on each element of the source with the
                  provided scalar.   The result tensor specified as the last parameters
                  is resized to match the source.
  remarks: >-
    For each element in the <see paramref="source"></see> performs the Clamp operation
                   with <see paramref="value"></see>.   The result is stored in the <see paramref="result"></see>
                   tensor.
  syntax:
    content: public static void Clamp (TorchSharp.IntTensor source, int value, TorchSharp.IntTensor result);
    parameters:
    - id: source
      type: TorchSharp.IntTensor
      description: Source tensor on which the operation will take place.
    - id: value
      type: System.Int32
      description: The scalar value that the operation uses.
    - id: result
      type: TorchSharp.IntTensor
      description: The tensor where the result will be placed
  overload: TorchSharp.IntTensor.Clamp*
  exceptions: []
- uid: TorchSharp.IntTensor.Clamp(System.Int32)
  id: Clamp(System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Clamp(Int32)
  nameWithType: IntTensor.Clamp(Int32)
  fullName: IntTensor.Clamp(Int32)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: >-
    Performs the Clamp operation on each element of the tensor with the
                  <see paramref="value"></see> and returns a new tensor with the result.
  remarks: "If you want to avoid the allocation of a new tensor, you can use the \n              alternative method <xref href=\"PytorchSharp.Clamp(PytorchSharp.IntTensor, Int, PytorchSharp.Int)\"></xref>."
  syntax:
    content: public TorchSharp.IntTensor Clamp (int value);
    parameters:
    - id: value
      type: System.Int32
      description: To be added.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.Clamp*
  exceptions: []
- uid: TorchSharp.IntTensor.ClampedRandom(TorchSharp.RandomGenerator,System.Int64,System.Int64)
  id: ClampedRandom(TorchSharp.RandomGenerator,System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: ClampedRandom(RandomGenerator, Int64, Int64)
  nameWithType: IntTensor.ClampedRandom(RandomGenerator, Int64, Int64)
  fullName: IntTensor.ClampedRandom(RandomGenerator, Int64, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Populates the tensor with random values from min to max, using the provided random source generator.
  syntax:
    content: public void ClampedRandom (TorchSharp.RandomGenerator source, long min, long max);
    parameters:
    - id: source
      type: TorchSharp.RandomGenerator
      description: The random generator source
    - id: min
      type: System.Int64
      description: The lower limit for the values to be generated
    - id: max
      type: System.Int64
      description: The upper limit for the values to be generated
  overload: TorchSharp.IntTensor.ClampedRandom*
  exceptions: []
- uid: TorchSharp.IntTensor.Clone
  id: Clone
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Clone()
  nameWithType: IntTensor.Clone()
  fullName: IntTensor.Clone()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a deep clone of the tensor
  syntax:
    content: public TorchSharp.IntTensor Clone ();
    parameters: []
    return:
      type: TorchSharp.IntTensor
      description: To be added.
  overload: TorchSharp.IntTensor.Clone*
  exceptions: []
- uid: TorchSharp.IntTensor.CLShift(TorchSharp.IntTensor)
  id: CLShift(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: CLShift(IntTensor)
  nameWithType: IntTensor.CLShift(IntTensor)
  fullName: IntTensor.CLShift(IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an CLShift of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.IntTensor CLShift (TorchSharp.IntTensor src);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.CLShift*
  exceptions: []
- uid: TorchSharp.IntTensor.CMax(TorchSharp.IntTensor)
  id: CMax(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: CMax(IntTensor)
  nameWithType: IntTensor.CMax(IntTensor)
  fullName: IntTensor.CMax(IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an CMax of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.IntTensor CMax (TorchSharp.IntTensor src);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.CMax*
  exceptions: []
- uid: TorchSharp.IntTensor.CMaxValue(System.Int32)
  id: CMaxValue(System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: CMaxValue(Int32)
  nameWithType: IntTensor.CMaxValue(Int32)
  fullName: IntTensor.CMaxValue(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an CMaxValue of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.IntTensor CMaxValue (int src);
    parameters:
    - id: src
      type: System.Int32
      description: The right-hand-side operand.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.CMaxValue*
  exceptions: []
- uid: TorchSharp.IntTensor.CMin(TorchSharp.IntTensor)
  id: CMin(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: CMin(IntTensor)
  nameWithType: IntTensor.CMin(IntTensor)
  fullName: IntTensor.CMin(IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an CMin of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.IntTensor CMin (TorchSharp.IntTensor src);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.CMin*
  exceptions: []
- uid: TorchSharp.IntTensor.CMinValue(System.Int32)
  id: CMinValue(System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: CMinValue(Int32)
  nameWithType: IntTensor.CMinValue(Int32)
  fullName: IntTensor.CMinValue(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an CMinValue of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.IntTensor CMinValue (int src);
    parameters:
    - id: src
      type: System.Int32
      description: The right-hand-side operand.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.CMinValue*
  exceptions: []
- uid: TorchSharp.IntTensor.CMul(TorchSharp.IntTensor)
  id: CMul(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: CMul(IntTensor)
  nameWithType: IntTensor.CMul(IntTensor)
  fullName: IntTensor.CMul(IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an CMul of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.IntTensor CMul (TorchSharp.IntTensor src);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.CMul*
  exceptions: []
- uid: TorchSharp.IntTensor.Concatenate(TorchSharp.IntTensor,System.Int32)
  id: Concatenate(TorchSharp.IntTensor,System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Concatenate(IntTensor, Int32)
  nameWithType: IntTensor.Concatenate(IntTensor, Int32)
  fullName: IntTensor.Concatenate(IntTensor, Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Concatenate tensors along the given dimesion.
  syntax:
    content: public TorchSharp.IntTensor Concatenate (TorchSharp.IntTensor other, int dimension);
    parameters:
    - id: other
      type: TorchSharp.IntTensor
      description: The second tensor.
    - id: dimension
      type: System.Int32
      description: The dimension along which to concatenate.
    return:
      type: TorchSharp.IntTensor
      description: To be added.
  overload: TorchSharp.IntTensor.Concatenate*
  exceptions: []
- uid: TorchSharp.IntTensor.Copy(TorchSharp.IntTensor)
  id: Copy(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Copy(IntTensor)
  nameWithType: IntTensor.Copy(IntTensor)
  fullName: IntTensor.Copy(IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Copies the elements of a tensor into the original tensor. \n              The shape of the tensors must exactly match or an error will be thrown."
  syntax:
    content: public void Copy (TorchSharp.IntTensor src);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: Tensor to copy the data from.
  overload: TorchSharp.IntTensor.Copy*
  exceptions: []
- uid: TorchSharp.IntTensor.CopyByte(TorchSharp.ByteTensor)
  id: CopyByte(TorchSharp.ByteTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: CopyByte(ByteTensor)
  nameWithType: IntTensor.CopyByte(ByteTensor)
  fullName: IntTensor.CopyByte(ByteTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Copies the elements of a byte tensor into the original tensor. \n              The shape of the tensors must exactly match or an error will be thrown."
  syntax:
    content: public void CopyByte (TorchSharp.ByteTensor src);
    parameters:
    - id: src
      type: TorchSharp.ByteTensor
      description: Tensor to copy the data from.
  overload: TorchSharp.IntTensor.CopyByte*
  exceptions: []
- uid: TorchSharp.IntTensor.CopyDouble(TorchSharp.DoubleTensor)
  id: CopyDouble(TorchSharp.DoubleTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: CopyDouble(DoubleTensor)
  nameWithType: IntTensor.CopyDouble(DoubleTensor)
  fullName: IntTensor.CopyDouble(DoubleTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Copies the elements of a double tensor into the original tensor. \n              The shape of the tensors must exactly match or an error will be thrown."
  syntax:
    content: public void CopyDouble (TorchSharp.DoubleTensor src);
    parameters:
    - id: src
      type: TorchSharp.DoubleTensor
      description: Tensor to copy the data from.
  overload: TorchSharp.IntTensor.CopyDouble*
  exceptions: []
- uid: TorchSharp.IntTensor.CopyFloat(TorchSharp.FloatTensor)
  id: CopyFloat(TorchSharp.FloatTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: CopyFloat(FloatTensor)
  nameWithType: IntTensor.CopyFloat(FloatTensor)
  fullName: IntTensor.CopyFloat(FloatTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Copies the elements of a float tensor into the original tensor. \n              The shape of the tensors must exactly match or an error will be thrown."
  syntax:
    content: public void CopyFloat (TorchSharp.FloatTensor src);
    parameters:
    - id: src
      type: TorchSharp.FloatTensor
      description: Tensor to copy the data from.
  overload: TorchSharp.IntTensor.CopyFloat*
  exceptions: []
- uid: TorchSharp.IntTensor.CopyInt(TorchSharp.IntTensor)
  id: CopyInt(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: CopyInt(IntTensor)
  nameWithType: IntTensor.CopyInt(IntTensor)
  fullName: IntTensor.CopyInt(IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Copies the elements of a int tensor into the original tensor. \n              The shape of the tensors must exactly match or an error will be thrown."
  syntax:
    content: public void CopyInt (TorchSharp.IntTensor src);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: Tensor to copy the data from.
  overload: TorchSharp.IntTensor.CopyInt*
  exceptions: []
- uid: TorchSharp.IntTensor.CopyLong(TorchSharp.LongTensor)
  id: CopyLong(TorchSharp.LongTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: CopyLong(LongTensor)
  nameWithType: IntTensor.CopyLong(LongTensor)
  fullName: IntTensor.CopyLong(LongTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Copies the elements of a long tensor into the original tensor. \n              The shape of the tensors must exactly match or an error will be thrown."
  syntax:
    content: public void CopyLong (TorchSharp.LongTensor src);
    parameters:
    - id: src
      type: TorchSharp.LongTensor
      description: Tensor to copy the data from.
  overload: TorchSharp.IntTensor.CopyLong*
  exceptions: []
- uid: TorchSharp.IntTensor.CopyShort(TorchSharp.ShortTensor)
  id: CopyShort(TorchSharp.ShortTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: CopyShort(ShortTensor)
  nameWithType: IntTensor.CopyShort(ShortTensor)
  fullName: IntTensor.CopyShort(ShortTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Copies the elements of a short tensor into the original tensor. \n              The shape of the tensors must exactly match or an error will be thrown."
  syntax:
    content: public void CopyShort (TorchSharp.ShortTensor src);
    parameters:
    - id: src
      type: TorchSharp.ShortTensor
      description: Tensor to copy the data from.
  overload: TorchSharp.IntTensor.CopyShort*
  exceptions: []
- uid: TorchSharp.IntTensor.CPow(TorchSharp.IntTensor)
  id: CPow(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: CPow(IntTensor)
  nameWithType: IntTensor.CPow(IntTensor)
  fullName: IntTensor.CPow(IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an CPow of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.IntTensor CPow (TorchSharp.IntTensor src);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.CPow*
  exceptions: []
- uid: TorchSharp.IntTensor.CRemainder(TorchSharp.IntTensor)
  id: CRemainder(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: CRemainder(IntTensor)
  nameWithType: IntTensor.CRemainder(IntTensor)
  fullName: IntTensor.CRemainder(IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an CRemainder of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.IntTensor CRemainder (TorchSharp.IntTensor src);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.CRemainder*
  exceptions: []
- uid: TorchSharp.IntTensor.CrossProduct(TorchSharp.IntTensor)
  id: CrossProduct(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: CrossProduct(IntTensor)
  nameWithType: IntTensor.CrossProduct(IntTensor)
  fullName: IntTensor.CrossProduct(IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Computes the cross product of two tensors.
  syntax:
    content: public TorchSharp.IntTensor CrossProduct (TorchSharp.IntTensor other);
    parameters:
    - id: other
      type: TorchSharp.IntTensor
      description: The right-hand-side tensor.
    return:
      type: TorchSharp.IntTensor
      description: To be added.
  overload: TorchSharp.IntTensor.CrossProduct*
  exceptions: []
- uid: TorchSharp.IntTensor.CSub(System.Int32,TorchSharp.IntTensor)
  id: CSub(System.Int32,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: CSub(Int32, IntTensor)
  nameWithType: IntTensor.CSub(Int32, IntTensor)
  fullName: IntTensor.CSub(Int32, IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the CSub operation on each element of the tensor with the
                  <see paramref="value"></see> and returns a new tensor with the result.
                  where the result is t[idx] + value * src[idx]
  syntax:
    content: public TorchSharp.IntTensor CSub (int value, TorchSharp.IntTensor src);
    parameters:
    - id: value
      type: System.Int32
      description: To be added.
    - id: src
      type: TorchSharp.IntTensor
      description: To be added.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.CSub*
  exceptions: []
- uid: TorchSharp.IntTensor.CumulativeProd(System.Int32)
  id: CumulativeProd(System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: CumulativeProd(Int32)
  nameWithType: IntTensor.CumulativeProd(Int32)
  fullName: IntTensor.CumulativeProd(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Computes the cumulative product of all the elements of the tensor along the given dimension.
  syntax:
    content: public TorchSharp.IntTensor CumulativeProd (int dimension);
    parameters:
    - id: dimension
      type: System.Int32
      description: The dimension to process along.
    return:
      type: TorchSharp.IntTensor
      description: To be added.
  overload: TorchSharp.IntTensor.CumulativeProd*
  exceptions: []
- uid: TorchSharp.IntTensor.CumulativeSum(System.Int32)
  id: CumulativeSum(System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: CumulativeSum(Int32)
  nameWithType: IntTensor.CumulativeSum(Int32)
  fullName: IntTensor.CumulativeSum(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Computes the cumulative sum of all the elements of the tensor along the given dimension.
  syntax:
    content: public TorchSharp.IntTensor CumulativeSum (int dimension);
    parameters:
    - id: dimension
      type: System.Int32
      description: The dimension to process along.
    return:
      type: TorchSharp.IntTensor
      description: To be added.
  overload: TorchSharp.IntTensor.CumulativeSum*
  exceptions: []
- uid: TorchSharp.IntTensor.Data
  id: Data
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Data
  nameWithType: IntTensor.Data
  fullName: IntTensor.Data
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a pointer to the unmanaged data managed by this tensor.
  syntax:
    content: public int* Data { get; }
    return:
      type: System.Int32*
      description: To be added.
  overload: TorchSharp.IntTensor.Data*
  exceptions: []
- uid: TorchSharp.IntTensor.Diagonal(System.Int32)
  id: Diagonal(System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Diagonal(Int32)
  nameWithType: IntTensor.Diagonal(Int32)
  fullName: IntTensor.Diagonal(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Gets the diagonal of the tensor.
  syntax:
    content: public TorchSharp.IntTensor Diagonal (int k);
    parameters:
    - id: k
      type: System.Int32
      description: To be added.
    return:
      type: TorchSharp.IntTensor
      description: To be added.
  overload: TorchSharp.IntTensor.Diagonal*
  exceptions: []
- uid: TorchSharp.IntTensor.Dimensions
  id: Dimensions
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Dimensions
  nameWithType: IntTensor.Dimensions
  fullName: IntTensor.Dimensions
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns the number of dimensions for this tensor
  syntax:
    content: public int Dimensions { get; }
    return:
      type: System.Int32
      description: To be added.
  overload: TorchSharp.IntTensor.Dimensions*
  exceptions: []
- uid: TorchSharp.IntTensor.Dispose
  id: Dispose
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Dispose()
  nameWithType: IntTensor.Dispose()
  fullName: IntTensor.Dispose()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Releases the tensor and its associated data.
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: TorchSharp.IntTensor.Dispose*
  exceptions: []
- uid: TorchSharp.IntTensor.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: IntTensor.Dispose(Boolean)
  fullName: IntTensor.Dispose(Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Implements the .NET Dispose pattern.
  syntax:
    content: protected void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: To be added.
  overload: TorchSharp.IntTensor.Dispose*
  exceptions: []
- uid: TorchSharp.IntTensor.Div(System.Int32)
  id: Div(System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Div(Int32)
  nameWithType: IntTensor.Div(Int32)
  fullName: IntTensor.Div(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the Div operation on each element of the tensor with the
                  <see paramref="value"></see> and returns a new tensor with the result.
  remarks: "If you want to avoid the allocation of a new tensor, you can use the \n              alternative method <xref href=\"PytorchSharp.Div(PytorchSharp.IntTensor, Int, PytorchSharp.Int)\"></xref>."
  syntax:
    content: public TorchSharp.IntTensor Div (int value);
    parameters:
    - id: value
      type: System.Int32
      description: To be added.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.Div*
  exceptions: []
- uid: TorchSharp.IntTensor.Div(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  id: Div(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Div(IntTensor, Int32, IntTensor)
  nameWithType: IntTensor.Div(IntTensor, Int32, IntTensor)
  fullName: IntTensor.Div(IntTensor, Int32, IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the Div operation on each element of the source with the
                  provided scalar.   The result tensor specified as the last parameters
                  is resized to match the source.
  remarks: >-
    For each element in the <see paramref="source"></see> performs the Div operation
                   with <see paramref="value"></see>.   The result is stored in the <see paramref="result"></see>
                   tensor.
  syntax:
    content: public static void Div (TorchSharp.IntTensor source, int value, TorchSharp.IntTensor result);
    parameters:
    - id: source
      type: TorchSharp.IntTensor
      description: Source tensor on which the operation will take place.
    - id: value
      type: System.Int32
      description: The scalar value that the operation uses.
    - id: result
      type: TorchSharp.IntTensor
      description: The tensor where the result will be placed
  overload: TorchSharp.IntTensor.Div*
  exceptions: []
- uid: TorchSharp.IntTensor.Dot(TorchSharp.IntTensor)
  id: Dot(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Dot(IntTensor)
  nameWithType: IntTensor.Dot(IntTensor)
  fullName: IntTensor.Dot(IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns the tensor product between this tensor and the provided one
  syntax:
    content: public long Dot (TorchSharp.IntTensor src);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: The right-hand-side operand.
    return:
      type: System.Int64
      description: The dot product
  overload: TorchSharp.IntTensor.Dot*
  exceptions: []
- uid: TorchSharp.IntTensor.EqTensor(TorchSharp.IntTensor)
  id: EqTensor(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: EqTensor(IntTensor)
  nameWithType: IntTensor.EqTensor(IntTensor)
  fullName: IntTensor.EqTensor(IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an EqTensor of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.ByteTensor EqTensor (TorchSharp.IntTensor src);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.ByteTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.EqTensor*
  exceptions: []
- uid: TorchSharp.IntTensor.EqTensorT(TorchSharp.IntTensor)
  id: EqTensorT(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: EqTensorT(IntTensor)
  nameWithType: IntTensor.EqTensorT(IntTensor)
  fullName: IntTensor.EqTensorT(IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an EqTensorT of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.IntTensor EqTensorT (TorchSharp.IntTensor src);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.EqTensorT*
  exceptions: []
- uid: TorchSharp.IntTensor.Equal(TorchSharp.IntTensor)
  id: Equal(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Equal(IntTensor)
  nameWithType: IntTensor.Equal(IntTensor)
  fullName: IntTensor.Equal(IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Compare the tensor with another for complete equality.
  syntax:
    content: public bool Equal (TorchSharp.IntTensor other);
    parameters:
    - id: other
      type: TorchSharp.IntTensor
      description: The right-hand-side operand.
    return:
      type: System.Boolean
      description: To be added.
  overload: TorchSharp.IntTensor.Equal*
  exceptions: []
- uid: TorchSharp.IntTensor.EqValue(System.Int32)
  id: EqValue(System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: EqValue(Int32)
  nameWithType: IntTensor.EqValue(Int32)
  fullName: IntTensor.EqValue(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an EqValue of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.ByteTensor EqValue (int src);
    parameters:
    - id: src
      type: System.Int32
      description: The right-hand-side operand.
    return:
      type: TorchSharp.ByteTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.EqValue*
  exceptions: []
- uid: TorchSharp.IntTensor.EqValueT(System.Int32)
  id: EqValueT(System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: EqValueT(Int32)
  nameWithType: IntTensor.EqValueT(Int32)
  fullName: IntTensor.EqValueT(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an EqValueT of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.IntTensor EqValueT (int src);
    parameters:
    - id: src
      type: System.Int32
      description: The right-hand-side operand.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.EqValueT*
  exceptions: []
- uid: TorchSharp.IntTensor.Eye(System.Int64,System.Int64)
  id: Eye(System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Eye(Int64, Int64)
  nameWithType: IntTensor.Eye(Int64, Int64)
  fullName: IntTensor.Eye(Int64, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Eye.
  syntax:
    content: public static TorchSharp.IntTensor Eye (long m, long n);
    parameters:
    - id: m
      type: System.Int64
      description: To be added.
    - id: n
      type: System.Int64
      description: To be added.
    return:
      type: TorchSharp.IntTensor
      description: To be added.
  overload: TorchSharp.IntTensor.Eye*
  exceptions: []
- uid: TorchSharp.IntTensor.Fill(System.Int32)
  id: Fill(System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Fill(Int32)
  nameWithType: IntTensor.Fill(Int32)
  fullName: IntTensor.Fill(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Fills the tensor with the specified value
  syntax:
    content: public void Fill (int value);
    parameters:
    - id: value
      type: System.Int32
      description: To be added.
  overload: TorchSharp.IntTensor.Fill*
  exceptions: []
- uid: TorchSharp.IntTensor.Finalize
  id: Finalize
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Finalize()
  nameWithType: IntTensor.Finalize()
  fullName: IntTensor.Finalize()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Finalizer for ~IntTensor
  syntax:
    content: ~IntTensor ();
    parameters: []
  overload: TorchSharp.IntTensor.Finalize*
  exceptions: []
- uid: TorchSharp.IntTensor.Fmod(System.Int32)
  id: Fmod(System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Fmod(Int32)
  nameWithType: IntTensor.Fmod(Int32)
  fullName: IntTensor.Fmod(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the Fmod operation on each element of the tensor with the
                  <see paramref="value"></see> and returns a new tensor with the result.
  remarks: "If you want to avoid the allocation of a new tensor, you can use the \n              alternative method <xref href=\"PytorchSharp.Fmod(PytorchSharp.IntTensor, Int, PytorchSharp.Int)\"></xref>."
  syntax:
    content: public TorchSharp.IntTensor Fmod (int value);
    parameters:
    - id: value
      type: System.Int32
      description: To be added.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.Fmod*
  exceptions: []
- uid: TorchSharp.IntTensor.Fmod(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  id: Fmod(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Fmod(IntTensor, Int32, IntTensor)
  nameWithType: IntTensor.Fmod(IntTensor, Int32, IntTensor)
  fullName: IntTensor.Fmod(IntTensor, Int32, IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the Fmod operation on each element of the source with the
                  provided scalar.   The result tensor specified as the last parameters
                  is resized to match the source.
  remarks: >-
    For each element in the <see paramref="source"></see> performs the Fmod operation
                   with <see paramref="value"></see>.   The result is stored in the <see paramref="result"></see>
                   tensor.
  syntax:
    content: public static void Fmod (TorchSharp.IntTensor source, int value, TorchSharp.IntTensor result);
    parameters:
    - id: source
      type: TorchSharp.IntTensor
      description: Source tensor on which the operation will take place.
    - id: value
      type: System.Int32
      description: The scalar value that the operation uses.
    - id: result
      type: TorchSharp.IntTensor
      description: The tensor where the result will be placed
  overload: TorchSharp.IntTensor.Fmod*
  exceptions: []
- uid: TorchSharp.IntTensor.Gather(TorchSharp.IntTensor,System.Int32,TorchSharp.LongTensor)
  id: Gather(TorchSharp.IntTensor,System.Int32,TorchSharp.LongTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Gather(IntTensor, Int32, LongTensor)
  nameWithType: IntTensor.Gather(IntTensor, Int32, LongTensor)
  fullName: IntTensor.Gather(IntTensor, Int32, LongTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Gather
  syntax:
    content: public void Gather (TorchSharp.IntTensor src, int dim, TorchSharp.LongTensor index);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: To be added.
    - id: dim
      type: System.Int32
      description: To be added.
    - id: index
      type: TorchSharp.LongTensor
      description: Indices of entries to copy.
  overload: TorchSharp.IntTensor.Gather*
  exceptions: []
- uid: TorchSharp.IntTensor.Geometric(TorchSharp.RandomGenerator,System.Double)
  id: Geometric(TorchSharp.RandomGenerator,System.Double)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Geometric(RandomGenerator, Double)
  nameWithType: IntTensor.Geometric(RandomGenerator, Double)
  fullName: IntTensor.Geometric(RandomGenerator, Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Populates the tensor with random values from 0 to n, using the provided random source generator.
  syntax:
    content: public void Geometric (TorchSharp.RandomGenerator source, double p);
    parameters:
    - id: source
      type: TorchSharp.RandomGenerator
      description: The random generator source
    - id: p
      type: System.Double
      description: To be added.
  overload: TorchSharp.IntTensor.Geometric*
  exceptions: []
- uid: TorchSharp.IntTensor.GeTensor(TorchSharp.IntTensor)
  id: GeTensor(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: GeTensor(IntTensor)
  nameWithType: IntTensor.GeTensor(IntTensor)
  fullName: IntTensor.GeTensor(IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an GeTensor of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.ByteTensor GeTensor (TorchSharp.IntTensor src);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.ByteTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.GeTensor*
  exceptions: []
- uid: TorchSharp.IntTensor.GeTensorT(TorchSharp.IntTensor)
  id: GeTensorT(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: GeTensorT(IntTensor)
  nameWithType: IntTensor.GeTensorT(IntTensor)
  fullName: IntTensor.GeTensorT(IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an GeTensorT of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.IntTensor GeTensorT (TorchSharp.IntTensor src);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.GeTensorT*
  exceptions: []
- uid: TorchSharp.IntTensor.GetTensorDimension(System.Int32)
  id: GetTensorDimension(System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: GetTensorDimension(Int32)
  nameWithType: IntTensor.GetTensorDimension(Int32)
  fullName: IntTensor.GetTensorDimension(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Retrieves the size of the specified dimension in the tensor.
  syntax:
    content: public long GetTensorDimension (int dim);
    parameters:
    - id: dim
      type: System.Int32
      description: To be added.
    return:
      type: System.Int64
      description: To be added.
  overload: TorchSharp.IntTensor.GetTensorDimension*
  exceptions: []
- uid: TorchSharp.IntTensor.GetTensorStride(System.Int32)
  id: GetTensorStride(System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: GetTensorStride(Int32)
  nameWithType: IntTensor.GetTensorStride(Int32)
  fullName: IntTensor.GetTensorStride(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Retrieves the stride of the specified dimension in the tensor.
  syntax:
    content: public long GetTensorStride (int dim);
    parameters:
    - id: dim
      type: System.Int32
      description: To be added.
    return:
      type: System.Int64
      description: To be added.
  overload: TorchSharp.IntTensor.GetTensorStride*
  exceptions: []
- uid: TorchSharp.IntTensor.GeValue(System.Int32)
  id: GeValue(System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: GeValue(Int32)
  nameWithType: IntTensor.GeValue(Int32)
  fullName: IntTensor.GeValue(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an GeValue of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.ByteTensor GeValue (int src);
    parameters:
    - id: src
      type: System.Int32
      description: The right-hand-side operand.
    return:
      type: TorchSharp.ByteTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.GeValue*
  exceptions: []
- uid: TorchSharp.IntTensor.GeValueT(System.Int32)
  id: GeValueT(System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: GeValueT(Int32)
  nameWithType: IntTensor.GeValueT(Int32)
  fullName: IntTensor.GeValueT(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an GeValueT of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.IntTensor GeValueT (int src);
    parameters:
    - id: src
      type: System.Int32
      description: The right-hand-side operand.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.GeValueT*
  exceptions: []
- uid: TorchSharp.IntTensor.GtTensor(TorchSharp.IntTensor)
  id: GtTensor(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: GtTensor(IntTensor)
  nameWithType: IntTensor.GtTensor(IntTensor)
  fullName: IntTensor.GtTensor(IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an GtTensor of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.ByteTensor GtTensor (TorchSharp.IntTensor src);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.ByteTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.GtTensor*
  exceptions: []
- uid: TorchSharp.IntTensor.GtTensorT(TorchSharp.IntTensor)
  id: GtTensorT(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: GtTensorT(IntTensor)
  nameWithType: IntTensor.GtTensorT(IntTensor)
  fullName: IntTensor.GtTensorT(IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an GtTensorT of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.IntTensor GtTensorT (TorchSharp.IntTensor src);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.GtTensorT*
  exceptions: []
- uid: TorchSharp.IntTensor.GtValue(System.Int32)
  id: GtValue(System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: GtValue(Int32)
  nameWithType: IntTensor.GtValue(Int32)
  fullName: IntTensor.GtValue(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an GtValue of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.ByteTensor GtValue (int src);
    parameters:
    - id: src
      type: System.Int32
      description: The right-hand-side operand.
    return:
      type: TorchSharp.ByteTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.GtValue*
  exceptions: []
- uid: TorchSharp.IntTensor.GtValueT(System.Int32)
  id: GtValueT(System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: GtValueT(Int32)
  nameWithType: IntTensor.GtValueT(Int32)
  fullName: IntTensor.GtValueT(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an GtValueT of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.IntTensor GtValueT (int src);
    parameters:
    - id: src
      type: System.Int32
      description: The right-hand-side operand.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.GtValueT*
  exceptions: []
- uid: TorchSharp.IntTensor.IndexAdd(System.Int32,TorchSharp.LongTensor,TorchSharp.IntTensor)
  id: IndexAdd(System.Int32,TorchSharp.LongTensor,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: IndexAdd(Int32, LongTensor, IntTensor)
  nameWithType: IntTensor.IndexAdd(Int32, LongTensor, IntTensor)
  fullName: IntTensor.IndexAdd(Int32, LongTensor, IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Adds the elements of tensor into the original tensor by selecting the indices in the order \n              given in index. The shape of tensor must exactly match the elements indexed or an error will be thrown."
  syntax:
    content: public void IndexAdd (int dim, TorchSharp.LongTensor index, TorchSharp.IntTensor src);
    parameters:
    - id: dim
      type: System.Int32
      description: Dimension to select for the add
    - id: index
      type: TorchSharp.LongTensor
      description: Entries to copy
    - id: src
      type: TorchSharp.IntTensor
      description: Tensor to copy the data from.
  overload: TorchSharp.IntTensor.IndexAdd*
  exceptions: []
- uid: TorchSharp.IntTensor.IndexCopy(System.Int32,TorchSharp.LongTensor,TorchSharp.IntTensor)
  id: IndexCopy(System.Int32,TorchSharp.LongTensor,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: IndexCopy(Int32, LongTensor, IntTensor)
  nameWithType: IntTensor.IndexCopy(Int32, LongTensor, IntTensor)
  fullName: IntTensor.IndexCopy(Int32, LongTensor, IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Copies the elements of tensor into the original tensor by selecting the indices in the order \n              given in index. The shape of tensor must exactly match the elements indexed or an error will be thrown."
  syntax:
    content: public void IndexCopy (int dim, TorchSharp.LongTensor index, TorchSharp.IntTensor src);
    parameters:
    - id: dim
      type: System.Int32
      description: Dimension to select for the copy
    - id: index
      type: TorchSharp.LongTensor
      description: Entries to copy
    - id: src
      type: TorchSharp.IntTensor
      description: Tensor to copy the data from.
  overload: TorchSharp.IntTensor.IndexCopy*
  exceptions: []
- uid: TorchSharp.IntTensor.IndexFill(System.Int32,TorchSharp.LongTensor,System.Int32)
  id: IndexFill(System.Int32,TorchSharp.LongTensor,System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: IndexFill(Int32, LongTensor, Int32)
  nameWithType: IntTensor.IndexFill(Int32, LongTensor, Int32)
  fullName: IntTensor.IndexFill(Int32, LongTensor, Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Uses the given value to overwrite the original tensor by selecting the indices in the order \n              given in index. The shape of tensor must exactly match the elements indexed or an error will be thrown."
  syntax:
    content: public void IndexFill (int dim, TorchSharp.LongTensor index, int value);
    parameters:
    - id: dim
      type: System.Int32
      description: Dimension to select for the fill
    - id: index
      type: TorchSharp.LongTensor
      description: Entries to copy
    - id: value
      type: System.Int32
      description: The value to write.
  overload: TorchSharp.IntTensor.IndexFill*
  exceptions: []
- uid: TorchSharp.IntTensor.IndexSelect(System.Int32,TorchSharp.LongTensor)
  id: IndexSelect(System.Int32,TorchSharp.LongTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: IndexSelect(Int32, LongTensor)
  nameWithType: IntTensor.IndexSelect(Int32, LongTensor)
  fullName: IntTensor.IndexSelect(Int32, LongTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Returns a new Tensor which indexes the original Tensor along dimension dim\n              using the entries in index.  The returned Tensor has the same number of dimensions as the \n              original Tensor. The returned Tensor does not use the same storage as the original Tensor."
  syntax:
    content: public TorchSharp.IntTensor IndexSelect (int dim, TorchSharp.LongTensor index);
    parameters:
    - id: dim
      type: System.Int32
      description: Dimension to select
    - id: index
      type: TorchSharp.LongTensor
      description: Entries to extract
    return:
      type: TorchSharp.IntTensor
      description: To be added.
  overload: TorchSharp.IntTensor.IndexSelect*
  exceptions: []
- uid: TorchSharp.IntTensor.Item(System.Int64)
  id: Item(System.Int64)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Item(Int64)
  nameWithType: IntTensor.Item(Int64)
  fullName: IntTensor.Item(Int64)
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Access to element at the specified position in the tensor
  syntax:
    content: public int this[long x0] { get; set; }
    parameters:
    - id: x0
      type: System.Int64
      description: Index to access.
    return:
      type: System.Int32
      description: To be added.
  overload: TorchSharp.IntTensor.Item*
  exceptions: []
- uid: TorchSharp.IntTensor.Item(System.Int64,System.Int64)
  id: Item(System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Item(Int64, Int64)
  nameWithType: IntTensor.Item(Int64, Int64)
  fullName: IntTensor.Item(Int64, Int64)
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Access to element at the specified position in the tensor
  syntax:
    content: public int this[long x0, long x1] { get; set; }
    parameters:
    - id: x0
      type: System.Int64
      description: Index in the first dimension to access.
    - id: x1
      type: System.Int64
      description: Index in the second dimension to access.
    return:
      type: System.Int32
      description: To be added.
  overload: TorchSharp.IntTensor.Item*
  exceptions: []
- uid: TorchSharp.IntTensor.Item(System.Int64,System.Int64,System.Int64)
  id: Item(System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Item(Int64, Int64, Int64)
  nameWithType: IntTensor.Item(Int64, Int64, Int64)
  fullName: IntTensor.Item(Int64, Int64, Int64)
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Access to element at the specified position in the tensor
  syntax:
    content: public int this[long x0, long x1, long x2] { get; set; }
    parameters:
    - id: x0
      type: System.Int64
      description: Index in the first dimension to access.
    - id: x1
      type: System.Int64
      description: Index in the second dimension to access.
    - id: x2
      type: System.Int64
      description: Index in the third dimension to access.
    return:
      type: System.Int32
      description: To be added.
  overload: TorchSharp.IntTensor.Item*
  exceptions: []
- uid: TorchSharp.IntTensor.Item(System.Int64,System.Int64,System.Int64,System.Int64)
  id: Item(System.Int64,System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Item(Int64, Int64, Int64, Int64)
  nameWithType: IntTensor.Item(Int64, Int64, Int64, Int64)
  fullName: IntTensor.Item(Int64, Int64, Int64, Int64)
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Access to element at the specified position in the tensor
  syntax:
    content: public int this[long x0, long x1, long x2, long x3] { get; set; }
    parameters:
    - id: x0
      type: System.Int64
      description: Index in the first dimension to access.
    - id: x1
      type: System.Int64
      description: Index in the second dimension to access.
    - id: x2
      type: System.Int64
      description: Index in the third dimension to access.
    - id: x3
      type: System.Int64
      description: Index in the fourth dimension to access.
    return:
      type: System.Int32
      description: To be added.
  overload: TorchSharp.IntTensor.Item*
  exceptions: []
- uid: TorchSharp.IntTensor.KthValue(System.Int64,System.Int32,System.Boolean)
  id: KthValue(System.Int64,System.Int32,System.Boolean)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: KthValue(Int64, Int32, Boolean)
  nameWithType: IntTensor.KthValue(Int64, Int32, Boolean)
  fullName: IntTensor.KthValue(Int64, Int32, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Computes the kth value of all the elements of the tensor along the given dimension.
  syntax:
    content: public Tuple<TorchSharp.IntTensor,TorchSharp.LongTensor> KthValue (long k, int dimension, bool keepdim);
    parameters:
    - id: k
      type: System.Int64
      description: The value for 'k' in 'kth'.
    - id: dimension
      type: System.Int32
      description: The dimension to process along.
    - id: keepdim
      type: System.Boolean
      description: true if the reduction dimension should be kept, false otherwise.
    return:
      type: System.Tuple{TorchSharp.IntTensor,TorchSharp.LongTensor}
      description: A tuple containing the values and indices of the kth element of each dimension.
  overload: TorchSharp.IntTensor.KthValue*
  exceptions: []
- uid: TorchSharp.IntTensor.LERP(TorchSharp.IntTensor,System.Int32)
  id: LERP(TorchSharp.IntTensor,System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: LERP(IntTensor, Int32)
  nameWithType: IntTensor.LERP(IntTensor, Int32)
  fullName: IntTensor.LERP(IntTensor, Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: LERP
  syntax:
    content: public TorchSharp.IntTensor LERP (TorchSharp.IntTensor other, int weight);
    parameters:
    - id: other
      type: TorchSharp.IntTensor
      description: The right-hand-side operand.
    - id: weight
      type: System.Int32
      description: To be added.
    return:
      type: TorchSharp.IntTensor
      description: To be added.
  overload: TorchSharp.IntTensor.LERP*
  exceptions: []
- uid: TorchSharp.IntTensor.LeTensor(TorchSharp.IntTensor)
  id: LeTensor(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: LeTensor(IntTensor)
  nameWithType: IntTensor.LeTensor(IntTensor)
  fullName: IntTensor.LeTensor(IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an LeTensor of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.ByteTensor LeTensor (TorchSharp.IntTensor src);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.ByteTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.LeTensor*
  exceptions: []
- uid: TorchSharp.IntTensor.LeTensorT(TorchSharp.IntTensor)
  id: LeTensorT(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: LeTensorT(IntTensor)
  nameWithType: IntTensor.LeTensorT(IntTensor)
  fullName: IntTensor.LeTensorT(IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an LeTensorT of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.IntTensor LeTensorT (TorchSharp.IntTensor src);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.LeTensorT*
  exceptions: []
- uid: TorchSharp.IntTensor.LeValue(System.Int32)
  id: LeValue(System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: LeValue(Int32)
  nameWithType: IntTensor.LeValue(Int32)
  fullName: IntTensor.LeValue(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an LeValue of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.ByteTensor LeValue (int src);
    parameters:
    - id: src
      type: System.Int32
      description: The right-hand-side operand.
    return:
      type: TorchSharp.ByteTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.LeValue*
  exceptions: []
- uid: TorchSharp.IntTensor.LeValueT(System.Int32)
  id: LeValueT(System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: LeValueT(Int32)
  nameWithType: IntTensor.LeValueT(Int32)
  fullName: IntTensor.LeValueT(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an LeValueT of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.IntTensor LeValueT (int src);
    parameters:
    - id: src
      type: System.Int32
      description: The right-hand-side operand.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.LeValueT*
  exceptions: []
- uid: TorchSharp.IntTensor.LShift(System.Int32)
  id: LShift(System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: LShift(Int32)
  nameWithType: IntTensor.LShift(Int32)
  fullName: IntTensor.LShift(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the LShift operation on each element of the tensor with the
                  <see paramref="value"></see> and returns a new tensor with the result.
  remarks: "If you want to avoid the allocation of a new tensor, you can use the \n              alternative method <xref href=\"PytorchSharp.LShift(PytorchSharp.IntTensor, Int, PytorchSharp.Int)\"></xref>."
  syntax:
    content: public TorchSharp.IntTensor LShift (int value);
    parameters:
    - id: value
      type: System.Int32
      description: To be added.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.LShift*
  exceptions: []
- uid: TorchSharp.IntTensor.LShift(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  id: LShift(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: LShift(IntTensor, Int32, IntTensor)
  nameWithType: IntTensor.LShift(IntTensor, Int32, IntTensor)
  fullName: IntTensor.LShift(IntTensor, Int32, IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the LShift operation on each element of the source with the
                  provided scalar.   The result tensor specified as the last parameters
                  is resized to match the source.
  remarks: >-
    For each element in the <see paramref="source"></see> performs the LShift operation
                   with <see paramref="value"></see>.   The result is stored in the <see paramref="result"></see>
                   tensor.
  syntax:
    content: public static void LShift (TorchSharp.IntTensor source, int value, TorchSharp.IntTensor result);
    parameters:
    - id: source
      type: TorchSharp.IntTensor
      description: Source tensor on which the operation will take place.
    - id: value
      type: System.Int32
      description: The scalar value that the operation uses.
    - id: result
      type: TorchSharp.IntTensor
      description: The tensor where the result will be placed
  overload: TorchSharp.IntTensor.LShift*
  exceptions: []
- uid: TorchSharp.IntTensor.LtTensor(TorchSharp.IntTensor)
  id: LtTensor(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: LtTensor(IntTensor)
  nameWithType: IntTensor.LtTensor(IntTensor)
  fullName: IntTensor.LtTensor(IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an LtTensor of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.ByteTensor LtTensor (TorchSharp.IntTensor src);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.ByteTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.LtTensor*
  exceptions: []
- uid: TorchSharp.IntTensor.LtTensorT(TorchSharp.IntTensor)
  id: LtTensorT(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: LtTensorT(IntTensor)
  nameWithType: IntTensor.LtTensorT(IntTensor)
  fullName: IntTensor.LtTensorT(IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an LtTensorT of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.IntTensor LtTensorT (TorchSharp.IntTensor src);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.LtTensorT*
  exceptions: []
- uid: TorchSharp.IntTensor.LtValue(System.Int32)
  id: LtValue(System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: LtValue(Int32)
  nameWithType: IntTensor.LtValue(Int32)
  fullName: IntTensor.LtValue(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an LtValue of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.ByteTensor LtValue (int src);
    parameters:
    - id: src
      type: System.Int32
      description: The right-hand-side operand.
    return:
      type: TorchSharp.ByteTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.LtValue*
  exceptions: []
- uid: TorchSharp.IntTensor.LtValueT(System.Int32)
  id: LtValueT(System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: LtValueT(Int32)
  nameWithType: IntTensor.LtValueT(Int32)
  fullName: IntTensor.LtValueT(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an LtValueT of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.IntTensor LtValueT (int src);
    parameters:
    - id: src
      type: System.Int32
      description: The right-hand-side operand.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.LtValueT*
  exceptions: []
- uid: TorchSharp.IntTensor.MaskedCopy(TorchSharp.ByteTensor,TorchSharp.IntTensor)
  id: MaskedCopy(TorchSharp.ByteTensor,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: MaskedCopy(ByteTensor, IntTensor)
  nameWithType: IntTensor.MaskedCopy(ByteTensor, IntTensor)
  fullName: IntTensor.MaskedCopy(ByteTensor, IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Copies elements from the source tensor to the locations indicated by the mask.
  remarks: There must be at least as many elements in the source tensor as there are 1s in the mask.
  syntax:
    content: public void MaskedCopy (TorchSharp.ByteTensor mask, TorchSharp.IntTensor src);
    parameters:
    - id: mask
      type: TorchSharp.ByteTensor
      description: A byte tensor with values 0 or 1 indicating the locations where in the destination the value should be filled.
    - id: src
      type: TorchSharp.IntTensor
      description: The source tensor.
  overload: TorchSharp.IntTensor.MaskedCopy*
  exceptions: []
- uid: TorchSharp.IntTensor.MaskedFill(TorchSharp.ByteTensor,System.Int32)
  id: MaskedFill(TorchSharp.ByteTensor,System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: MaskedFill(ByteTensor, Int32)
  nameWithType: IntTensor.MaskedFill(ByteTensor, Int32)
  fullName: IntTensor.MaskedFill(ByteTensor, Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Fills the tensor with the specified value at the locations indicated by the mask.
  syntax:
    content: public void MaskedFill (TorchSharp.ByteTensor mask, int value);
    parameters:
    - id: mask
      type: TorchSharp.ByteTensor
      description: A byte tensor with values 0 or 1 indicating the locations where the value should be filled.
    - id: value
      type: System.Int32
      description: The value to write at the indicated locations.
  overload: TorchSharp.IntTensor.MaskedFill*
  exceptions: []
- uid: TorchSharp.IntTensor.MaskedSelect(TorchSharp.ByteTensor,TorchSharp.IntTensor)
  id: MaskedSelect(TorchSharp.ByteTensor,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: MaskedSelect(ByteTensor, IntTensor)
  nameWithType: IntTensor.MaskedSelect(ByteTensor, IntTensor)
  fullName: IntTensor.MaskedSelect(ByteTensor, IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Copies elements from the source tensor at the locations indicated by the mask.
  remarks: >-
    There will be as many elements in the tensor as there are 1s in the mask.
                 There must be at least as many elements in the source tensor as there are 1s in the mask.
  syntax:
    content: public void MaskedSelect (TorchSharp.ByteTensor mask, TorchSharp.IntTensor src);
    parameters:
    - id: mask
      type: TorchSharp.ByteTensor
      description: A byte tensor with values 0 or 1 indicating the locations where in the source the value should be fetched.
    - id: src
      type: TorchSharp.IntTensor
      description: The source tensor.
  overload: TorchSharp.IntTensor.MaskedSelect*
  exceptions: []
- uid: TorchSharp.IntTensor.Match(TorchSharp.IntTensor,System.Int32)
  id: Match(TorchSharp.IntTensor,System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Match(IntTensor, Int32)
  nameWithType: IntTensor.Match(IntTensor, Int32)
  fullName: IntTensor.Match(IntTensor, Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Match
  syntax:
    content: public TorchSharp.IntTensor Match (TorchSharp.IntTensor m2, int gain);
    parameters:
    - id: m2
      type: TorchSharp.IntTensor
      description: To be added.
    - id: gain
      type: System.Int32
      description: To be added.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.Match*
  exceptions: []
- uid: TorchSharp.IntTensor.Max(System.Int32,System.Boolean)
  id: Max(System.Int32,System.Boolean)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Max(Int32, Boolean)
  nameWithType: IntTensor.Max(Int32, Boolean)
  fullName: IntTensor.Max(Int32, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Computes the max of all the elements of the tensor along the given dimension.
  syntax:
    content: public Tuple<TorchSharp.IntTensor,TorchSharp.LongTensor> Max (int dimension, bool keepdim);
    parameters:
    - id: dimension
      type: System.Int32
      description: The dimension to process along.
    - id: keepdim
      type: System.Boolean
      description: true if the reduction dimension should be kept, false otherwise.
    return:
      type: System.Tuple{TorchSharp.IntTensor,TorchSharp.LongTensor}
      description: A tuple containing the values and indices of the resulting elements.
  overload: TorchSharp.IntTensor.Max*
  exceptions: []
- uid: TorchSharp.IntTensor.MaxAll
  id: MaxAll
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: MaxAll()
  nameWithType: IntTensor.MaxAll()
  fullName: IntTensor.MaxAll()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns the maximum value of the elements in the tensor.
  syntax:
    content: public int MaxAll ();
    parameters: []
    return:
      type: System.Int32
      description: The maximum value of the tensor.
  overload: TorchSharp.IntTensor.MaxAll*
  exceptions: []
- uid: TorchSharp.IntTensor.MeanAll
  id: MeanAll
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: MeanAll()
  nameWithType: IntTensor.MeanAll()
  fullName: IntTensor.MeanAll()
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Returns the mean of the elements in the tensor.
  syntax:
    content: public long MeanAll ();
    parameters: []
    return:
      type: System.Int64
      description: The mean of the tensor.
  overload: TorchSharp.IntTensor.MeanAll*
  exceptions: []
- uid: TorchSharp.IntTensor.Median(System.Int32,System.Boolean)
  id: Median(System.Int32,System.Boolean)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Median(Int32, Boolean)
  nameWithType: IntTensor.Median(Int32, Boolean)
  fullName: IntTensor.Median(Int32, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Computes the median of all the elements of the tensor along the given dimension.
  syntax:
    content: public Tuple<TorchSharp.IntTensor,TorchSharp.LongTensor> Median (int dimension, bool keepdim);
    parameters:
    - id: dimension
      type: System.Int32
      description: The dimension to process along.
    - id: keepdim
      type: System.Boolean
      description: true if the reduction dimension should be kept, false otherwise.
    return:
      type: System.Tuple{TorchSharp.IntTensor,TorchSharp.LongTensor}
      description: A tuple containing the values and indices of the resulting elements.
  overload: TorchSharp.IntTensor.Median*
  exceptions: []
- uid: TorchSharp.IntTensor.MedianAll
  id: MedianAll
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: MedianAll()
  nameWithType: IntTensor.MedianAll()
  fullName: IntTensor.MedianAll()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns the median of the elements in the tensor.
  syntax:
    content: public int MedianAll ();
    parameters: []
    return:
      type: System.Int32
      description: The median of the tensor.
  overload: TorchSharp.IntTensor.MedianAll*
  exceptions: []
- uid: TorchSharp.IntTensor.Min(System.Int32,System.Boolean)
  id: Min(System.Int32,System.Boolean)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Min(Int32, Boolean)
  nameWithType: IntTensor.Min(Int32, Boolean)
  fullName: IntTensor.Min(Int32, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Computes the min of all the elements of the tensor along the given dimension.
  syntax:
    content: public Tuple<TorchSharp.IntTensor,TorchSharp.LongTensor> Min (int dimension, bool keepdim);
    parameters:
    - id: dimension
      type: System.Int32
      description: The dimension to process along.
    - id: keepdim
      type: System.Boolean
      description: true if the reduction dimension should be kept, false otherwise.
    return:
      type: System.Tuple{TorchSharp.IntTensor,TorchSharp.LongTensor}
      description: A tuple containing the values and indices of the resulting elements.
  overload: TorchSharp.IntTensor.Min*
  exceptions: []
- uid: TorchSharp.IntTensor.MinAll
  id: MinAll
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: MinAll()
  nameWithType: IntTensor.MinAll()
  fullName: IntTensor.MinAll()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns the minimum value of the elements in the tensor.
  syntax:
    content: public int MinAll ();
    parameters: []
    return:
      type: System.Int32
      description: The minimum value of the tensor.
  overload: TorchSharp.IntTensor.MinAll*
  exceptions: []
- uid: TorchSharp.IntTensor.Mode(System.Int32,System.Boolean)
  id: Mode(System.Int32,System.Boolean)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Mode(Int32, Boolean)
  nameWithType: IntTensor.Mode(Int32, Boolean)
  fullName: IntTensor.Mode(Int32, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Computes the mode of all the elements of the tensor along the given dimension.
  syntax:
    content: public Tuple<TorchSharp.IntTensor,TorchSharp.LongTensor> Mode (int dimension, bool keepdim);
    parameters:
    - id: dimension
      type: System.Int32
      description: The dimension to process along.
    - id: keepdim
      type: System.Boolean
      description: true if the reduction dimension should be kept, false otherwise.
    return:
      type: System.Tuple{TorchSharp.IntTensor,TorchSharp.LongTensor}
      description: A tuple containing the values and indices of the resulting elements.
  overload: TorchSharp.IntTensor.Mode*
  exceptions: []
- uid: TorchSharp.IntTensor.Mul(System.Int32)
  id: Mul(System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Mul(Int32)
  nameWithType: IntTensor.Mul(Int32)
  fullName: IntTensor.Mul(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the Mul operation on each element of the tensor with the
                  <see paramref="value"></see> and returns a new tensor with the result.
  remarks: "If you want to avoid the allocation of a new tensor, you can use the \n              alternative method <xref href=\"PytorchSharp.Mul(PytorchSharp.IntTensor, Int, PytorchSharp.Int)\"></xref>."
  syntax:
    content: public TorchSharp.IntTensor Mul (int value);
    parameters:
    - id: value
      type: System.Int32
      description: To be added.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.Mul*
  exceptions: []
- uid: TorchSharp.IntTensor.Mul(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  id: Mul(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Mul(IntTensor, Int32, IntTensor)
  nameWithType: IntTensor.Mul(IntTensor, Int32, IntTensor)
  fullName: IntTensor.Mul(IntTensor, Int32, IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the Mul operation on each element of the source with the
                  provided scalar.   The result tensor specified as the last parameters
                  is resized to match the source.
  remarks: >-
    For each element in the <see paramref="source"></see> performs the Mul operation
                   with <see paramref="value"></see>.   The result is stored in the <see paramref="result"></see>
                   tensor.
  syntax:
    content: public static void Mul (TorchSharp.IntTensor source, int value, TorchSharp.IntTensor result);
    parameters:
    - id: source
      type: TorchSharp.IntTensor
      description: Source tensor on which the operation will take place.
    - id: value
      type: System.Int32
      description: The scalar value that the operation uses.
    - id: result
      type: TorchSharp.IntTensor
      description: The tensor where the result will be placed
  overload: TorchSharp.IntTensor.Mul*
  exceptions: []
- uid: TorchSharp.IntTensor.Narrow(System.Int32,System.Int64,System.Int64)
  id: Narrow(System.Int32,System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Narrow(Int32, Int64, Int64)
  nameWithType: IntTensor.Narrow(Int32, Int64, Int64)
  fullName: IntTensor.Narrow(Int32, Int64, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: 'Returns a new Tensor which is a narrowed version of the current one: the dimension dim is narrowed from firstIndexto firstIndex+size-1.'
  syntax:
    content: public TorchSharp.IntTensor Narrow (int dim, long firstIndex, long size);
    parameters:
    - id: dim
      type: System.Int32
      description: The dimension to narrow
    - id: firstIndex
      type: System.Int64
      description: Initial index to narrow
    - id: size
      type: System.Int64
      description: Number of elements
    return:
      type: TorchSharp.IntTensor
      description: To be added.
  overload: TorchSharp.IntTensor.Narrow*
  exceptions: []
- uid: TorchSharp.IntTensor.NeTensor(TorchSharp.IntTensor)
  id: NeTensor(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: NeTensor(IntTensor)
  nameWithType: IntTensor.NeTensor(IntTensor)
  fullName: IntTensor.NeTensor(IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an NeTensor of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.ByteTensor NeTensor (TorchSharp.IntTensor src);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.ByteTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.NeTensor*
  exceptions: []
- uid: TorchSharp.IntTensor.NeTensorT(TorchSharp.IntTensor)
  id: NeTensorT(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: NeTensorT(IntTensor)
  nameWithType: IntTensor.NeTensorT(IntTensor)
  fullName: IntTensor.NeTensorT(IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an NeTensorT of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.IntTensor NeTensorT (TorchSharp.IntTensor src);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: The right-hand-side operand.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.NeTensorT*
  exceptions: []
- uid: TorchSharp.IntTensor.NeValue(System.Int32)
  id: NeValue(System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: NeValue(Int32)
  nameWithType: IntTensor.NeValue(Int32)
  fullName: IntTensor.NeValue(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an NeValue of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.ByteTensor NeValue (int src);
    parameters:
    - id: src
      type: System.Int32
      description: The right-hand-side operand.
    return:
      type: TorchSharp.ByteTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.NeValue*
  exceptions: []
- uid: TorchSharp.IntTensor.NeValueT(System.Int32)
  id: NeValueT(System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: NeValueT(Int32)
  nameWithType: IntTensor.NeValueT(Int32)
  fullName: IntTensor.NeValueT(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an NeValueT of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.IntTensor NeValueT (int src);
    parameters:
    - id: src
      type: System.Int32
      description: The right-hand-side operand.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.NeValueT*
  exceptions: []
- uid: TorchSharp.IntTensor.NewWithStorage1d(System.IntPtr,System.Int64,System.Int64)
  id: NewWithStorage1d(System.IntPtr,System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: NewWithStorage1d(IntPtr, Int64, Int64)
  nameWithType: IntTensor.NewWithStorage1d(IntPtr, Int64, Int64)
  fullName: IntTensor.NewWithStorage1d(IntPtr, Int64, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Access to element at the specified position in the tensor
  syntax:
    content: public TorchSharp.IntTensor NewWithStorage1d (IntPtr offset, long size, long stride);
    parameters:
    - id: offset
      type: System.IntPtr
      description: Offset within the input storage the storage of the new tensor will start from.
    - id: size
      type: System.Int64
      description: Size of the first dimension.
    - id: stride
      type: System.Int64
      description: Stride of the first dimension.
    return:
      type: TorchSharp.IntTensor
      description: To be added.
  overload: TorchSharp.IntTensor.NewWithStorage1d*
  exceptions: []
- uid: TorchSharp.IntTensor.NewWithStorage2d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64)
  id: NewWithStorage2d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: NewWithStorage2d(IntPtr, Int64, Int64, Int64, Int64)
  nameWithType: IntTensor.NewWithStorage2d(IntPtr, Int64, Int64, Int64, Int64)
  fullName: IntTensor.NewWithStorage2d(IntPtr, Int64, Int64, Int64, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Access to element at the specified position in the tensor
  syntax:
    content: public TorchSharp.IntTensor NewWithStorage2d (IntPtr offset, long size0, long stride0, long size1, long stride1);
    parameters:
    - id: offset
      type: System.IntPtr
      description: Offset within the input storage the storage of the new tensor will start from.
    - id: size0
      type: System.Int64
      description: Size of the first dimension.
    - id: stride0
      type: System.Int64
      description: Stride of the first dimension.
    - id: size1
      type: System.Int64
      description: Size of the second dimension.
    - id: stride1
      type: System.Int64
      description: Stride of the second dimension.
    return:
      type: TorchSharp.IntTensor
      description: To be added.
  overload: TorchSharp.IntTensor.NewWithStorage2d*
  exceptions: []
- uid: TorchSharp.IntTensor.NewWithStorage3d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
  id: NewWithStorage3d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: NewWithStorage3d(IntPtr, Int64, Int64, Int64, Int64, Int64, Int64)
  nameWithType: IntTensor.NewWithStorage3d(IntPtr, Int64, Int64, Int64, Int64, Int64, Int64)
  fullName: IntTensor.NewWithStorage3d(IntPtr, Int64, Int64, Int64, Int64, Int64, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Access to element at the specified position in the tensor
  syntax:
    content: public TorchSharp.IntTensor NewWithStorage3d (IntPtr offset, long size0, long stride0, long size1, long stride1, long size2, long stride2);
    parameters:
    - id: offset
      type: System.IntPtr
      description: Offset within the input storage the storage of the new tensor will start from.
    - id: size0
      type: System.Int64
      description: Size of the first dimension.
    - id: stride0
      type: System.Int64
      description: Stride of the first dimension.
    - id: size1
      type: System.Int64
      description: Size of the second dimension.
    - id: stride1
      type: System.Int64
      description: Stride of the second dimension.
    - id: size2
      type: System.Int64
      description: Size of the third dimension.
    - id: stride2
      type: System.Int64
      description: Stride of the third dimension.
    return:
      type: TorchSharp.IntTensor
      description: To be added.
  overload: TorchSharp.IntTensor.NewWithStorage3d*
  exceptions: []
- uid: TorchSharp.IntTensor.NewWithStorage4d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
  id: NewWithStorage4d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: NewWithStorage4d(IntPtr, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64)
  nameWithType: IntTensor.NewWithStorage4d(IntPtr, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64)
  fullName: IntTensor.NewWithStorage4d(IntPtr, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Access to element at the specified position in the tensor
  syntax:
    content: public TorchSharp.IntTensor NewWithStorage4d (IntPtr offset, long size0, long stride0, long size1, long stride1, long size2, long stride2, long size3, long stride3);
    parameters:
    - id: offset
      type: System.IntPtr
      description: Offset within the input storage the storage of the new tensor will start from.
    - id: size0
      type: System.Int64
      description: Size of the first dimension.
    - id: stride0
      type: System.Int64
      description: Stride of the first dimension.
    - id: size1
      type: System.Int64
      description: Size of the second dimension.
    - id: stride1
      type: System.Int64
      description: Stride of the second dimension.
    - id: size2
      type: System.Int64
      description: Size of the third dimension.
    - id: stride2
      type: System.Int64
      description: Stride of the third dimension.
    - id: size3
      type: System.Int64
      description: Size of the fourth dimension.
    - id: stride3
      type: System.Int64
      description: Stride of the fourth dimension.
    return:
      type: TorchSharp.IntTensor
      description: To be added.
  overload: TorchSharp.IntTensor.NewWithStorage4d*
  exceptions: []
- uid: TorchSharp.IntTensor.NonZero
  id: NonZero
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: NonZero()
  nameWithType: IntTensor.NonZero()
  fullName: IntTensor.NonZero()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Finds the indices of all non-zero elements.
  syntax:
    content: public TorchSharp.LongTensor NonZero ();
    parameters: []
    return:
      type: TorchSharp.LongTensor
      description: To be added.
  overload: TorchSharp.IntTensor.NonZero*
  exceptions: []
- uid: TorchSharp.IntTensor.NumElements
  id: NumElements
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: NumElements()
  nameWithType: IntTensor.NumElements()
  fullName: IntTensor.NumElements()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Get the number of elements in the tensor.
  syntax:
    content: public long NumElements ();
    parameters: []
    return:
      type: System.Int64
      description: To be added.
  overload: TorchSharp.IntTensor.NumElements*
  exceptions: []
- uid: TorchSharp.IntTensor.Prod(System.Int32,System.Boolean)
  id: Prod(System.Int32,System.Boolean)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Prod(Int32, Boolean)
  nameWithType: IntTensor.Prod(Int32, Boolean)
  fullName: IntTensor.Prod(Int32, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Computes the product of all the elements of the tensor along the given dimension.
  syntax:
    content: public TorchSharp.IntTensor Prod (int dimension, bool keepdim);
    parameters:
    - id: dimension
      type: System.Int32
      description: The dimension to process along.
    - id: keepdim
      type: System.Boolean
      description: true if the reduction dimension should be kept, false otherwise.
    return:
      type: TorchSharp.IntTensor
      description: To be added.
  overload: TorchSharp.IntTensor.Prod*
  exceptions: []
- uid: TorchSharp.IntTensor.ProdAll
  id: ProdAll
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: ProdAll()
  nameWithType: IntTensor.ProdAll()
  fullName: IntTensor.ProdAll()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns the product of the elements in the tensor.
  syntax:
    content: public long ProdAll ();
    parameters: []
    return:
      type: System.Int64
      description: The product of the tensor.
  overload: TorchSharp.IntTensor.ProdAll*
  exceptions: []
- uid: TorchSharp.IntTensor.Put(TorchSharp.LongTensor,TorchSharp.IntTensor,System.Boolean)
  id: Put(TorchSharp.LongTensor,TorchSharp.IntTensor,System.Boolean)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Put(LongTensor, IntTensor, Boolean)
  nameWithType: IntTensor.Put(LongTensor, IntTensor, Boolean)
  fullName: IntTensor.Put(LongTensor, IntTensor, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Put
  syntax:
    content: public void Put (TorchSharp.LongTensor index, TorchSharp.IntTensor src, bool accumulate);
    parameters:
    - id: index
      type: TorchSharp.LongTensor
      description: Indices of entries to copy.
    - id: src
      type: TorchSharp.IntTensor
      description: To be added.
    - id: accumulate
      type: System.Boolean
      description: To be added.
  overload: TorchSharp.IntTensor.Put*
  exceptions: []
- uid: TorchSharp.IntTensor.Random(System.Int64)
  id: Random(System.Int64)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Random(Int64)
  nameWithType: IntTensor.Random(Int64)
  fullName: IntTensor.Random(Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Populates the tensor with random values from 0 to n, using a newly initialized Random number geneator.
  syntax:
    content: public void Random (long n);
    parameters:
    - id: n
      type: System.Int64
      description: The upper limit for the values to be generated
  overload: TorchSharp.IntTensor.Random*
  exceptions: []
- uid: TorchSharp.IntTensor.Random(TorchSharp.RandomGenerator)
  id: Random(TorchSharp.RandomGenerator)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Random(RandomGenerator)
  nameWithType: IntTensor.Random(RandomGenerator)
  fullName: IntTensor.Random(RandomGenerator)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Populates the tensor with random values using the provided random source generator.
  syntax:
    content: public void Random (TorchSharp.RandomGenerator source);
    parameters:
    - id: source
      type: TorchSharp.RandomGenerator
      description: The random generator source
  overload: TorchSharp.IntTensor.Random*
  exceptions: []
- uid: TorchSharp.IntTensor.Random(TorchSharp.RandomGenerator,System.Int64)
  id: Random(TorchSharp.RandomGenerator,System.Int64)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Random(RandomGenerator, Int64)
  nameWithType: IntTensor.Random(RandomGenerator, Int64)
  fullName: IntTensor.Random(RandomGenerator, Int64)
  type: Method
  assemblies: []
  namespace: TorchSharp
  summary: Populates the tensor with random values from 0 to n, using the provided random source generator.
  syntax:
    content: public void Random (TorchSharp.RandomGenerator source, long n);
    parameters:
    - id: source
      type: TorchSharp.RandomGenerator
      description: The random generator source
    - id: n
      type: System.Int64
      description: The upper limit for the values to be generated
  overload: TorchSharp.IntTensor.Random*
  exceptions: []
- uid: TorchSharp.IntTensor.RandPerm(TorchSharp.RandomGenerator,System.Int64)
  id: RandPerm(TorchSharp.RandomGenerator,System.Int64)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: RandPerm(RandomGenerator, Int64)
  nameWithType: IntTensor.RandPerm(RandomGenerator, Int64)
  fullName: IntTensor.RandPerm(RandomGenerator, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Populates the tensor with random values from 0 to n, using the provided random source generator.
  syntax:
    content: public void RandPerm (TorchSharp.RandomGenerator source, long max);
    parameters:
    - id: source
      type: TorchSharp.RandomGenerator
      description: The random generator source
    - id: max
      type: System.Int64
      description: The upper limit for the values to be generated
  overload: TorchSharp.IntTensor.RandPerm*
  exceptions: []
- uid: TorchSharp.IntTensor.Range(System.Int64,System.Int64,System.Int64)
  id: Range(System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Range(Int64, Int64, Int64)
  nameWithType: IntTensor.Range(Int64, Int64, Int64)
  fullName: IntTensor.Range(Int64, Int64, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Create a range spanning from xmin to xmax, with 'step' between each value.
  syntax:
    content: public static TorchSharp.IntTensor Range (long xmin, long xmax, long step);
    parameters:
    - id: xmin
      type: System.Int64
      description: The lower bound of the range.
    - id: xmax
      type: System.Int64
      description: The upper bound of the range.
    - id: step
      type: System.Int64
      description: The value step.
    return:
      type: TorchSharp.IntTensor
      description: To be added.
  overload: TorchSharp.IntTensor.Range*
  exceptions: []
- uid: TorchSharp.IntTensor.Remainder(System.Int32)
  id: Remainder(System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Remainder(Int32)
  nameWithType: IntTensor.Remainder(Int32)
  fullName: IntTensor.Remainder(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the Remainder operation on each element of the tensor with the
                  <see paramref="value"></see> and returns a new tensor with the result.
  remarks: "If you want to avoid the allocation of a new tensor, you can use the \n              alternative method <xref href=\"PytorchSharp.Remainder(PytorchSharp.IntTensor, Int, PytorchSharp.Int)\"></xref>."
  syntax:
    content: public TorchSharp.IntTensor Remainder (int value);
    parameters:
    - id: value
      type: System.Int32
      description: To be added.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.Remainder*
  exceptions: []
- uid: TorchSharp.IntTensor.Remainder(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  id: Remainder(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Remainder(IntTensor, Int32, IntTensor)
  nameWithType: IntTensor.Remainder(IntTensor, Int32, IntTensor)
  fullName: IntTensor.Remainder(IntTensor, Int32, IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the Remainder operation on each element of the source with the
                  provided scalar.   The result tensor specified as the last parameters
                  is resized to match the source.
  remarks: >-
    For each element in the <see paramref="source"></see> performs the Remainder operation
                   with <see paramref="value"></see>.   The result is stored in the <see paramref="result"></see>
                   tensor.
  syntax:
    content: public static void Remainder (TorchSharp.IntTensor source, int value, TorchSharp.IntTensor result);
    parameters:
    - id: source
      type: TorchSharp.IntTensor
      description: Source tensor on which the operation will take place.
    - id: value
      type: System.Int32
      description: The scalar value that the operation uses.
    - id: result
      type: TorchSharp.IntTensor
      description: The tensor where the result will be placed
  overload: TorchSharp.IntTensor.Remainder*
  exceptions: []
- uid: TorchSharp.IntTensor.Resize1d(System.Int64)
  id: Resize1d(System.Int64)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Resize1d(Int64)
  nameWithType: IntTensor.Resize1d(Int64)
  fullName: IntTensor.Resize1d(Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Resizes the tensor to be one dimensional with the specified size, the contents of the tensor after this are undetermined.
  syntax:
    content: public void Resize1d (long size);
    parameters:
    - id: size
      type: System.Int64
      description: The desired new size for the first dimension of the tensor.
  overload: TorchSharp.IntTensor.Resize1d*
  exceptions: []
- uid: TorchSharp.IntTensor.Resize2d(System.Int64,System.Int64)
  id: Resize2d(System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Resize2d(Int64, Int64)
  nameWithType: IntTensor.Resize2d(Int64, Int64)
  fullName: IntTensor.Resize2d(Int64, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Resizes the tensor to be two dimensional with the specified size, the contents of the tensor after this are undetermined.
  syntax:
    content: public void Resize2d (long size0, long size1);
    parameters:
    - id: size0
      type: System.Int64
      description: The desired new size for the first dimension of the tensor.
    - id: size1
      type: System.Int64
      description: The desired new size for the second dimension of the tensor.
  overload: TorchSharp.IntTensor.Resize2d*
  exceptions: []
- uid: TorchSharp.IntTensor.Resize3d(System.Int64,System.Int64,System.Int64)
  id: Resize3d(System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Resize3d(Int64, Int64, Int64)
  nameWithType: IntTensor.Resize3d(Int64, Int64, Int64)
  fullName: IntTensor.Resize3d(Int64, Int64, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Resizes the tensor to be three dimensional with the specified size, the contents of the tensor after this are undetermined.
  syntax:
    content: public void Resize3d (long size0, long size1, long size2);
    parameters:
    - id: size0
      type: System.Int64
      description: The desired new size for the first dimension of the tensor.
    - id: size1
      type: System.Int64
      description: The desired new size for the second dimension of the tensor.
    - id: size2
      type: System.Int64
      description: The desired new size for the third dimension of the tensor.
  overload: TorchSharp.IntTensor.Resize3d*
  exceptions: []
- uid: TorchSharp.IntTensor.Resize4d(System.Int64,System.Int64,System.Int64,System.Int64)
  id: Resize4d(System.Int64,System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Resize4d(Int64, Int64, Int64, Int64)
  nameWithType: IntTensor.Resize4d(Int64, Int64, Int64, Int64)
  fullName: IntTensor.Resize4d(Int64, Int64, Int64, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Resizes the tensor to be four dimensional with the specified size, the contents of the tensor after this are undetermined.
  syntax:
    content: public void Resize4d (long size0, long size1, long size2, long size3);
    parameters:
    - id: size0
      type: System.Int64
      description: The desired new size for the first dimension of the tensor.
    - id: size1
      type: System.Int64
      description: The desired new size for the second dimension of the tensor.
    - id: size2
      type: System.Int64
      description: The desired new size for the third dimension of the tensor.
    - id: size3
      type: System.Int64
      description: The desired new size for the fourth dimension of the tensor.
  overload: TorchSharp.IntTensor.Resize4d*
  exceptions: []
- uid: TorchSharp.IntTensor.Resize5d(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
  id: Resize5d(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Resize5d(Int64, Int64, Int64, Int64, Int64)
  nameWithType: IntTensor.Resize5d(Int64, Int64, Int64, Int64, Int64)
  fullName: IntTensor.Resize5d(Int64, Int64, Int64, Int64, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Resizes the tensor to be five dimensional with the specified size, the contents of the tensor after this are undetermined.
  syntax:
    content: public void Resize5d (long size0, long size1, long size2, long size3, long size4);
    parameters:
    - id: size0
      type: System.Int64
      description: The desired new size for the first dimension of the tensor.
    - id: size1
      type: System.Int64
      description: The desired new size for the second dimension of the tensor.
    - id: size2
      type: System.Int64
      description: The desired new size for the third dimension of the tensor.
    - id: size3
      type: System.Int64
      description: The desired new size for the fourth dimension of the tensor.
    - id: size4
      type: System.Int64
      description: The desired new size for the fifth dimension of the tensor.
  overload: TorchSharp.IntTensor.Resize5d*
  exceptions: []
- uid: TorchSharp.IntTensor.ResizeAs(TorchSharp.IntTensor)
  id: ResizeAs(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: ResizeAs(IntTensor)
  nameWithType: IntTensor.ResizeAs(IntTensor)
  fullName: IntTensor.ResizeAs(IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Resizes the tensor to match the dimensions of the specified src tensor, the contents of the tensor after this are undetermined.
  syntax:
    content: public void ResizeAs (TorchSharp.IntTensor src);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: The source tensor whose shape will be mirrored by this tensor.
  overload: TorchSharp.IntTensor.ResizeAs*
  exceptions: []
- uid: TorchSharp.IntTensor.RShift(System.Int32)
  id: RShift(System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: RShift(Int32)
  nameWithType: IntTensor.RShift(Int32)
  fullName: IntTensor.RShift(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the RShift operation on each element of the tensor with the
                  <see paramref="value"></see> and returns a new tensor with the result.
  remarks: "If you want to avoid the allocation of a new tensor, you can use the \n              alternative method <xref href=\"PytorchSharp.RShift(PytorchSharp.IntTensor, Int, PytorchSharp.Int)\"></xref>."
  syntax:
    content: public TorchSharp.IntTensor RShift (int value);
    parameters:
    - id: value
      type: System.Int32
      description: To be added.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.RShift*
  exceptions: []
- uid: TorchSharp.IntTensor.RShift(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  id: RShift(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: RShift(IntTensor, Int32, IntTensor)
  nameWithType: IntTensor.RShift(IntTensor, Int32, IntTensor)
  fullName: IntTensor.RShift(IntTensor, Int32, IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the RShift operation on each element of the source with the
                  provided scalar.   The result tensor specified as the last parameters
                  is resized to match the source.
  remarks: >-
    For each element in the <see paramref="source"></see> performs the RShift operation
                   with <see paramref="value"></see>.   The result is stored in the <see paramref="result"></see>
                   tensor.
  syntax:
    content: public static void RShift (TorchSharp.IntTensor source, int value, TorchSharp.IntTensor result);
    parameters:
    - id: source
      type: TorchSharp.IntTensor
      description: Source tensor on which the operation will take place.
    - id: value
      type: System.Int32
      description: The scalar value that the operation uses.
    - id: result
      type: TorchSharp.IntTensor
      description: The tensor where the result will be placed
  overload: TorchSharp.IntTensor.RShift*
  exceptions: []
- uid: TorchSharp.IntTensor.Scatter(System.Int32,TorchSharp.LongTensor,TorchSharp.IntTensor)
  id: Scatter(System.Int32,TorchSharp.LongTensor,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Scatter(Int32, LongTensor, IntTensor)
  nameWithType: IntTensor.Scatter(Int32, LongTensor, IntTensor)
  fullName: IntTensor.Scatter(Int32, LongTensor, IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Scatter
  syntax:
    content: public void Scatter (int dim, TorchSharp.LongTensor index, TorchSharp.IntTensor src);
    parameters:
    - id: dim
      type: System.Int32
      description: To be added.
    - id: index
      type: TorchSharp.LongTensor
      description: Indices of entries to copy.
    - id: src
      type: TorchSharp.IntTensor
      description: To be added.
  overload: TorchSharp.IntTensor.Scatter*
  exceptions: []
- uid: TorchSharp.IntTensor.ScatterAdd(System.Int32,TorchSharp.LongTensor,TorchSharp.IntTensor)
  id: ScatterAdd(System.Int32,TorchSharp.LongTensor,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: ScatterAdd(Int32, LongTensor, IntTensor)
  nameWithType: IntTensor.ScatterAdd(Int32, LongTensor, IntTensor)
  fullName: IntTensor.ScatterAdd(Int32, LongTensor, IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: ScatterAdd
  syntax:
    content: public void ScatterAdd (int dim, TorchSharp.LongTensor index, TorchSharp.IntTensor src);
    parameters:
    - id: dim
      type: System.Int32
      description: To be added.
    - id: index
      type: TorchSharp.LongTensor
      description: Indices of entries to copy.
    - id: src
      type: TorchSharp.IntTensor
      description: To be added.
  overload: TorchSharp.IntTensor.ScatterAdd*
  exceptions: []
- uid: TorchSharp.IntTensor.ScatterFill(System.Int32,TorchSharp.LongTensor,System.Int32)
  id: ScatterFill(System.Int32,TorchSharp.LongTensor,System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: ScatterFill(Int32, LongTensor, Int32)
  nameWithType: IntTensor.ScatterFill(Int32, LongTensor, Int32)
  fullName: IntTensor.ScatterFill(Int32, LongTensor, Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: ScatterAdd
  syntax:
    content: public void ScatterFill (int dim, TorchSharp.LongTensor index, int value);
    parameters:
    - id: dim
      type: System.Int32
      description: To be added.
    - id: index
      type: TorchSharp.LongTensor
      description: Indices of entries to copy.
    - id: value
      type: System.Int32
      description: To be added.
  overload: TorchSharp.IntTensor.ScatterFill*
  exceptions: []
- uid: TorchSharp.IntTensor.Select(System.Int32,System.Int64)
  id: Select(System.Int32,System.Int64)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Select(Int32, Int64)
  nameWithType: IntTensor.Select(Int32, Int64)
  fullName: IntTensor.Select(Int32, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a new Tensor which is a tensor slice at the given index in the dimension dim.
  remarks: 'The returned tensor has one less dimension: the dimension dim is removed. As a result, it is not possible to select() on a 1D tensor.'
  syntax:
    content: public TorchSharp.IntTensor Select (int dim, long slideIndex);
    parameters:
    - id: dim
      type: System.Int32
      description: Dimension to select
    - id: slideIndex
      type: System.Int64
      description: Beginning of the tensor slice
    return:
      type: TorchSharp.IntTensor
      description: To be added.
  overload: TorchSharp.IntTensor.Select*
  exceptions: []
- uid: TorchSharp.IntTensor.Set(TorchSharp.IntTensor)
  id: Set(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Set(IntTensor)
  nameWithType: IntTensor.Set(IntTensor)
  fullName: IntTensor.Set(IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: The tensor will use the same storage as the provided source, so any changes to that tensor are visible on this one.
  syntax:
    content: public void Set (TorchSharp.IntTensor src);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: The source tensor which contains the data..
  overload: TorchSharp.IntTensor.Set*
  exceptions: []
- uid: TorchSharp.IntTensor.Shape
  id: Shape
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Shape
  nameWithType: IntTensor.Shape
  fullName: IntTensor.Shape
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns the tensor shape, this is an array whose size determines the number of dimensions on the tensor, and each element is the size of the dimension
  remarks: >-
    An array of size 0 is used for constants, an array of size 1 is used
                    for single-dimension arrays, where the dimension is the value of the
                    first element.   And so on.
  syntax:
    content: public long[] Shape { get; }
    return:
      type: System.Int64[]
      description: To be added.
  overload: TorchSharp.IntTensor.Shape*
  exceptions: []
- uid: TorchSharp.IntTensor.Sign
  id: Sign
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Sign()
  nameWithType: IntTensor.Sign()
  fullName: IntTensor.Sign()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Computes the sign of the tensor.
  syntax:
    content: public TorchSharp.IntTensor Sign ();
    parameters: []
    return:
      type: TorchSharp.IntTensor
      description: To be added.
  overload: TorchSharp.IntTensor.Sign*
  exceptions: []
- uid: TorchSharp.IntTensor.Sort(System.Int32,System.Boolean)
  id: Sort(System.Int32,System.Boolean)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Sort(Int32, Boolean)
  nameWithType: IntTensor.Sort(Int32, Boolean)
  fullName: IntTensor.Sort(Int32, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Sorts the elements of the tensor along the given dimension.
  syntax:
    content: public Tuple<TorchSharp.IntTensor,TorchSharp.LongTensor> Sort (int dimension, bool descending);
    parameters:
    - id: dimension
      type: System.Int32
      description: The dimension to sort along.
    - id: descending
      type: System.Boolean
      description: 0 if ascending, 1 if descending.
    return:
      type: System.Tuple{TorchSharp.IntTensor,TorchSharp.LongTensor}
      description: A tuple containing the values and indices of the sorted elements.
  overload: TorchSharp.IntTensor.Sort*
  exceptions: []
- uid: TorchSharp.IntTensor.Squeeze
  id: Squeeze
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Squeeze()
  nameWithType: IntTensor.Squeeze()
  fullName: IntTensor.Squeeze()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Squeeze the tensor, i.e. remove all 1-sized dimensions.
  syntax:
    content: public void Squeeze ();
    parameters: []
  overload: TorchSharp.IntTensor.Squeeze*
  exceptions: []
- uid: TorchSharp.IntTensor.Squeeze1d(TorchSharp.IntTensor,System.Int32)
  id: Squeeze1d(TorchSharp.IntTensor,System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Squeeze1d(IntTensor, Int32)
  nameWithType: IntTensor.Squeeze1d(IntTensor, Int32)
  fullName: IntTensor.Squeeze1d(IntTensor, Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Squeeze the tensor, by removing the specified dimension.
  syntax:
    content: public void Squeeze1d (TorchSharp.IntTensor src, int dimension);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: The source tensor which contains the data.
    - id: dimension
      type: System.Int32
      description: The dimension to remove.
  overload: TorchSharp.IntTensor.Squeeze1d*
  exceptions: []
- uid: TorchSharp.IntTensor.Storage
  id: Storage
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Storage
  nameWithType: IntTensor.Storage
  fullName: IntTensor.Storage
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns the associated storage for this tensor
  syntax:
    content: public TorchSharp.IntTensor.IntStorage Storage { get; }
    return:
      type: TorchSharp.IntTensor+IntStorage
      description: To be added.
  overload: TorchSharp.IntTensor.Storage*
  exceptions: []
- uid: TorchSharp.IntTensor.Sub(System.Int32)
  id: Sub(System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Sub(Int32)
  nameWithType: IntTensor.Sub(Int32)
  fullName: IntTensor.Sub(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the Sub operation on each element of the tensor with the
                  <see paramref="value"></see> and returns a new tensor with the result.
  remarks: "If you want to avoid the allocation of a new tensor, you can use the \n              alternative method <xref href=\"PytorchSharp.Sub(PytorchSharp.IntTensor, Int, PytorchSharp.Int)\"></xref>."
  syntax:
    content: public TorchSharp.IntTensor Sub (int value);
    parameters:
    - id: value
      type: System.Int32
      description: To be added.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.Sub*
  exceptions: []
- uid: TorchSharp.IntTensor.Sub(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  id: Sub(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Sub(IntTensor, Int32, IntTensor)
  nameWithType: IntTensor.Sub(IntTensor, Int32, IntTensor)
  fullName: IntTensor.Sub(IntTensor, Int32, IntTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Performs the Sub operation on each element of the source with the
                  provided scalar.   The result tensor specified as the last parameters
                  is resized to match the source.
  remarks: >-
    For each element in the <see paramref="source"></see> performs the Sub operation
                   with <see paramref="value"></see>.   The result is stored in the <see paramref="result"></see>
                   tensor.
  syntax:
    content: public static void Sub (TorchSharp.IntTensor source, int value, TorchSharp.IntTensor result);
    parameters:
    - id: source
      type: TorchSharp.IntTensor
      description: Source tensor on which the operation will take place.
    - id: value
      type: System.Int32
      description: The scalar value that the operation uses.
    - id: result
      type: TorchSharp.IntTensor
      description: The tensor where the result will be placed
  overload: TorchSharp.IntTensor.Sub*
  exceptions: []
- uid: TorchSharp.IntTensor.SubScaled(System.Int32,System.Int32)
  id: SubScaled(System.Int32,System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: SubScaled(Int32, Int32)
  nameWithType: IntTensor.SubScaled(Int32, Int32)
  fullName: IntTensor.SubScaled(Int32, Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: "Performs an SubScaled of the tensor with the provided \n              <see paramref=\"src\"></see> tensor and returns a new tensor with the result."
  syntax:
    content: public TorchSharp.IntTensor SubScaled (int value1, int value2);
    parameters:
    - id: value1
      type: System.Int32
      description: To be added.
    - id: value2
      type: System.Int32
      description: To be added.
    return:
      type: TorchSharp.IntTensor
      description: This returns a new tensor with the same shape as the tensor this operates on.
  overload: TorchSharp.IntTensor.SubScaled*
  exceptions: []
- uid: TorchSharp.IntTensor.Sum(System.Int32,System.Boolean)
  id: Sum(System.Int32,System.Boolean)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Sum(Int32, Boolean)
  nameWithType: IntTensor.Sum(Int32, Boolean)
  fullName: IntTensor.Sum(Int32, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Computes the sum of all the elements of the tensor along the given dimension.
  syntax:
    content: public TorchSharp.IntTensor Sum (int dimension, bool keepdim);
    parameters:
    - id: dimension
      type: System.Int32
      description: The dimension to process along.
    - id: keepdim
      type: System.Boolean
      description: true if the reduction dimension should be kept, false otherwise.
    return:
      type: TorchSharp.IntTensor
      description: To be added.
  overload: TorchSharp.IntTensor.Sum*
  exceptions: []
- uid: TorchSharp.IntTensor.SumAll
  id: SumAll
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: SumAll()
  nameWithType: IntTensor.SumAll()
  fullName: IntTensor.SumAll()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns the sum of the elements in the tensor.
  syntax:
    content: public long SumAll ();
    parameters: []
    return:
      type: System.Int64
      description: The sum of the tensor.
  overload: TorchSharp.IntTensor.SumAll*
  exceptions: []
- uid: TorchSharp.IntTensor.Take(TorchSharp.IntTensor,TorchSharp.LongTensor)
  id: Take(TorchSharp.IntTensor,TorchSharp.LongTensor)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Take(IntTensor, LongTensor)
  nameWithType: IntTensor.Take(IntTensor, LongTensor)
  fullName: IntTensor.Take(IntTensor, LongTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Take
  syntax:
    content: public void Take (TorchSharp.IntTensor src, TorchSharp.LongTensor index);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: To be added.
    - id: index
      type: TorchSharp.LongTensor
      description: Indices of entries to copy.
  overload: TorchSharp.IntTensor.Take*
  exceptions: []
- uid: TorchSharp.IntTensor.TopK(System.Int64,System.Int32,System.Int32,System.Boolean)
  id: TopK(System.Int64,System.Int32,System.Int32,System.Boolean)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: TopK(Int64, Int32, Int32, Boolean)
  nameWithType: IntTensor.TopK(Int64, Int32, Int32, Boolean)
  fullName: IntTensor.TopK(Int64, Int32, Int32, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Finds the top k of all the elements of the tensor along the given dimension.
  syntax:
    content: public Tuple<TorchSharp.IntTensor,TorchSharp.LongTensor> TopK (long k, int dim, int dir, bool sorted);
    parameters:
    - id: k
      type: System.Int64
      description: The number of elements to fetch.
    - id: dim
      type: System.Int32
      description: The dimension along which to sort and find k elements.
    - id: dir
      type: System.Int32
      description: 0 if ascending, 1 if descending.
    - id: sorted
      type: System.Boolean
      description: 1 if the result should be sorted, 0 if they should keep their original order.
    return:
      type: System.Tuple{TorchSharp.IntTensor,TorchSharp.LongTensor}
      description: A tuple containing the values and indices of the top 'k' elements.
  overload: TorchSharp.IntTensor.TopK*
  exceptions: []
- uid: TorchSharp.IntTensor.ToString
  id: ToString
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: ToString()
  nameWithType: IntTensor.ToString()
  fullName: IntTensor.ToString()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Get a string representation of the tensor.
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: To be added.
  overload: TorchSharp.IntTensor.ToString*
  exceptions: []
- uid: TorchSharp.IntTensor.Trace
  id: Trace
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Trace()
  nameWithType: IntTensor.Trace()
  fullName: IntTensor.Trace()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Computes the trace of the tensor.
  syntax:
    content: public long Trace ();
    parameters: []
    return:
      type: System.Int64
      description: To be added.
  overload: TorchSharp.IntTensor.Trace*
  exceptions: []
- uid: TorchSharp.IntTensor.Transpose(System.Int32,System.Int32)
  id: Transpose(System.Int32,System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Transpose(Int32, Int32)
  nameWithType: IntTensor.Transpose(Int32, Int32)
  fullName: IntTensor.Transpose(Int32, Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a tensor where dimensions dim1 and dim2 have been swapped.
  syntax:
    content: public TorchSharp.IntTensor Transpose (int dim1, int dim2);
    parameters:
    - id: dim1
      type: System.Int32
      description: First dimension
    - id: dim2
      type: System.Int32
      description: Second dimension
    return:
      type: TorchSharp.IntTensor
      description: To be added.
  overload: TorchSharp.IntTensor.Transpose*
  exceptions: []
- uid: TorchSharp.IntTensor.TriL(System.Int64)
  id: TriL(System.Int64)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: TriL(Int64)
  nameWithType: IntTensor.TriL(Int64)
  fullName: IntTensor.TriL(Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Lower triangle.
  syntax:
    content: public TorchSharp.IntTensor TriL (long k);
    parameters:
    - id: k
      type: System.Int64
      description: To be added.
    return:
      type: TorchSharp.IntTensor
      description: To be added.
  overload: TorchSharp.IntTensor.TriL*
  exceptions: []
- uid: TorchSharp.IntTensor.TriU(System.Int64)
  id: TriU(System.Int64)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: TriU(Int64)
  nameWithType: IntTensor.TriU(Int64)
  fullName: IntTensor.TriU(Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Upper triangle.
  syntax:
    content: public TorchSharp.IntTensor TriU (long k);
    parameters:
    - id: k
      type: System.Int64
      description: To be added.
    return:
      type: TorchSharp.IntTensor
      description: To be added.
  overload: TorchSharp.IntTensor.TriU*
  exceptions: []
- uid: TorchSharp.IntTensor.Unfold(System.Int32,System.Int64,System.Int64)
  id: Unfold(System.Int32,System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Unfold(Int32, Int64, Int64)
  nameWithType: IntTensor.Unfold(Int32, Int64, Int64)
  fullName: IntTensor.Unfold(Int32, Int64, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a tensor which contains all slices of size size in the dimension dim. Step between two slices is given by step.
  syntax:
    content: public TorchSharp.IntTensor Unfold (int dim, long size, long step);
    parameters:
    - id: dim
      type: System.Int32
      description: To be added.
    - id: size
      type: System.Int64
      description: To be added.
    - id: step
      type: System.Int64
      description: To be added.
    return:
      type: TorchSharp.IntTensor
      description: To be added.
  overload: TorchSharp.IntTensor.Unfold*
  exceptions: []
- uid: TorchSharp.IntTensor.Unsqueeze1d(TorchSharp.IntTensor,System.Int32)
  id: Unsqueeze1d(TorchSharp.IntTensor,System.Int32)
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: Unsqueeze1d(IntTensor, Int32)
  nameWithType: IntTensor.Unsqueeze1d(IntTensor, Int32)
  fullName: IntTensor.Unsqueeze1d(IntTensor, Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Unsqueeze the tensor, by inserting the specified dimension of size 1.
  syntax:
    content: public void Unsqueeze1d (TorchSharp.IntTensor src, int dimension);
    parameters:
    - id: src
      type: TorchSharp.IntTensor
      description: The source tensor which contains the data.
    - id: dimension
      type: System.Int32
      description: The dimension to insert.
  overload: TorchSharp.IntTensor.Unsqueeze1d*
  exceptions: []
- uid: TorchSharp.IntTensor.ZeroFill
  id: ZeroFill
  parent: TorchSharp.IntTensor
  langs:
  - csharp
  name: ZeroFill()
  nameWithType: IntTensor.ZeroFill()
  fullName: IntTensor.ZeroFill()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Fills the tensor with zeros
  syntax:
    content: public void ZeroFill ();
    parameters: []
  overload: TorchSharp.IntTensor.ZeroFill*
  exceptions: []
references:
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TorchSharp.IntTensor.#ctor
  parent: TorchSharp.IntTensor
  isExternal: false
  name: IntTensor()
  nameWithType: IntTensor.IntTensor()
  fullName: IntTensor.IntTensor()
- uid: TorchSharp.IntTensor.#ctor(System.Int64)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: IntTensor(Int64)
  nameWithType: IntTensor.IntTensor(Int64)
  fullName: IntTensor.IntTensor(Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: TorchSharp.IntTensor.#ctor(System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: IntTensor(Int64, Int64)
  nameWithType: IntTensor.IntTensor(Int64, Int64)
  fullName: IntTensor.IntTensor(Int64, Int64)
- uid: TorchSharp.IntTensor.#ctor(System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: IntTensor(Int64, Int64, Int64)
  nameWithType: IntTensor.IntTensor(Int64, Int64, Int64)
  fullName: IntTensor.IntTensor(Int64, Int64, Int64)
- uid: TorchSharp.IntTensor.#ctor(System.Int64,System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: IntTensor(Int64, Int64, Int64, Int64)
  nameWithType: IntTensor.IntTensor(Int64, Int64, Int64, Int64)
  fullName: IntTensor.IntTensor(Int64, Int64, Int64, Int64)
- uid: TorchSharp.IntTensor.Add(System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Add(Int32)
  nameWithType: IntTensor.Add(Int32)
  fullName: IntTensor.Add(Int32)
- uid: TorchSharp.IntTensor
  parent: TorchSharp
  isExternal: false
  name: IntTensor
  nameWithType: IntTensor
  fullName: TorchSharp.IntTensor
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TorchSharp.IntTensor.Add(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Add(IntTensor, Int32, IntTensor)
  nameWithType: IntTensor.Add(IntTensor, Int32, IntTensor)
  fullName: IntTensor.Add(IntTensor, Int32, IntTensor)
- uid: TorchSharp.IntTensor.AddBMM(System.Int32,System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: AddBMM(Int32, Int32, IntTensor, IntTensor)
  nameWithType: IntTensor.AddBMM(Int32, Int32, IntTensor, IntTensor)
  fullName: IntTensor.AddBMM(Int32, Int32, IntTensor, IntTensor)
- uid: TorchSharp.IntTensor.AddCDiv(System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: AddCDiv(Int32, IntTensor, IntTensor)
  nameWithType: IntTensor.AddCDiv(Int32, IntTensor, IntTensor)
  fullName: IntTensor.AddCDiv(Int32, IntTensor, IntTensor)
- uid: TorchSharp.IntTensor.AddCMul(System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: AddCMul(Int32, IntTensor, IntTensor)
  nameWithType: IntTensor.AddCMul(Int32, IntTensor, IntTensor)
  fullName: IntTensor.AddCMul(Int32, IntTensor, IntTensor)
- uid: TorchSharp.IntTensor.AddMM(System.Int32,System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: AddMM(Int32, Int32, IntTensor, IntTensor)
  nameWithType: IntTensor.AddMM(Int32, Int32, IntTensor, IntTensor)
  fullName: IntTensor.AddMM(Int32, Int32, IntTensor, IntTensor)
- uid: TorchSharp.IntTensor.AddMV(System.Int32,System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: AddMV(Int32, Int32, IntTensor, IntTensor)
  nameWithType: IntTensor.AddMV(Int32, Int32, IntTensor, IntTensor)
  fullName: IntTensor.AddMV(Int32, Int32, IntTensor, IntTensor)
- uid: TorchSharp.IntTensor.AddR(System.Int32,System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: AddR(Int32, Int32, IntTensor, IntTensor)
  nameWithType: IntTensor.AddR(Int32, Int32, IntTensor, IntTensor)
  fullName: IntTensor.AddR(Int32, Int32, IntTensor, IntTensor)
- uid: TorchSharp.IntTensor.AddScaled(System.Int32,System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: AddScaled(Int32, Int32)
  nameWithType: IntTensor.AddScaled(Int32, Int32)
  fullName: IntTensor.AddScaled(Int32, Int32)
- uid: TorchSharp.IntTensor.ARange(System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: ARange(Int64, Int64, Int64)
  nameWithType: IntTensor.ARange(Int64, Int64, Int64)
  fullName: IntTensor.ARange(Int64, Int64, Int64)
- uid: TorchSharp.IntTensor.BAddBMM(System.Int32,System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: BAddBMM(Int32, Int32, IntTensor, IntTensor)
  nameWithType: IntTensor.BAddBMM(Int32, Int32, IntTensor, IntTensor)
  fullName: IntTensor.BAddBMM(Int32, Int32, IntTensor, IntTensor)
- uid: TorchSharp.IntTensor.BitAnd(System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: BitAnd(Int32)
  nameWithType: IntTensor.BitAnd(Int32)
  fullName: IntTensor.BitAnd(Int32)
- uid: TorchSharp.IntTensor.BitAnd(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: BitAnd(IntTensor, Int32, IntTensor)
  nameWithType: IntTensor.BitAnd(IntTensor, Int32, IntTensor)
  fullName: IntTensor.BitAnd(IntTensor, Int32, IntTensor)
- uid: TorchSharp.IntTensor.BitOr(System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: BitOr(Int32)
  nameWithType: IntTensor.BitOr(Int32)
  fullName: IntTensor.BitOr(Int32)
- uid: TorchSharp.IntTensor.BitOr(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: BitOr(IntTensor, Int32, IntTensor)
  nameWithType: IntTensor.BitOr(IntTensor, Int32, IntTensor)
  fullName: IntTensor.BitOr(IntTensor, Int32, IntTensor)
- uid: TorchSharp.IntTensor.BitXor(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: BitXor(IntTensor, Int32, IntTensor)
  nameWithType: IntTensor.BitXor(IntTensor, Int32, IntTensor)
  fullName: IntTensor.BitXor(IntTensor, Int32, IntTensor)
- uid: TorchSharp.IntTensor.BitXor(System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: BitXor(Int32)
  nameWithType: IntTensor.BitXor(Int32)
  fullName: IntTensor.BitXor(Int32)
- uid: TorchSharp.IntTensor.CAdd(System.Int32,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CAdd(Int32, IntTensor)
  nameWithType: IntTensor.CAdd(Int32, IntTensor)
  fullName: IntTensor.CAdd(Int32, IntTensor)
- uid: TorchSharp.IntTensor.CappedRandom(TorchSharp.RandomGenerator,System.Int64)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CappedRandom(RandomGenerator, Int64)
  nameWithType: IntTensor.CappedRandom(RandomGenerator, Int64)
  fullName: IntTensor.CappedRandom(RandomGenerator, Int64)
- uid: TorchSharp.RandomGenerator
  parent: TorchSharp
  isExternal: false
  name: RandomGenerator
  nameWithType: RandomGenerator
  fullName: TorchSharp.RandomGenerator
- uid: TorchSharp.IntTensor.CBitAnd(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CBitAnd(IntTensor)
  nameWithType: IntTensor.CBitAnd(IntTensor)
  fullName: IntTensor.CBitAnd(IntTensor)
- uid: TorchSharp.IntTensor.CBitOr(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CBitOr(IntTensor)
  nameWithType: IntTensor.CBitOr(IntTensor)
  fullName: IntTensor.CBitOr(IntTensor)
- uid: TorchSharp.IntTensor.CBitXor(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CBitXor(IntTensor)
  nameWithType: IntTensor.CBitXor(IntTensor)
  fullName: IntTensor.CBitXor(IntTensor)
- uid: TorchSharp.IntTensor.CDiv(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CDiv(IntTensor)
  nameWithType: IntTensor.CDiv(IntTensor)
  fullName: IntTensor.CDiv(IntTensor)
- uid: TorchSharp.IntTensor.CFMod(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CFMod(IntTensor)
  nameWithType: IntTensor.CFMod(IntTensor)
  fullName: IntTensor.CFMod(IntTensor)
- uid: TorchSharp.IntTensor.Clamp(System.Int32,System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Clamp(Int32, Int32)
  nameWithType: IntTensor.Clamp(Int32, Int32)
  fullName: IntTensor.Clamp(Int32, Int32)
- uid: TorchSharp.IntTensor.Clamp(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Clamp(IntTensor, Int32, IntTensor)
  nameWithType: IntTensor.Clamp(IntTensor, Int32, IntTensor)
  fullName: IntTensor.Clamp(IntTensor, Int32, IntTensor)
- uid: TorchSharp.IntTensor.Clamp(System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Clamp(Int32)
  nameWithType: IntTensor.Clamp(Int32)
  fullName: IntTensor.Clamp(Int32)
- uid: TorchSharp.IntTensor.ClampedRandom(TorchSharp.RandomGenerator,System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: ClampedRandom(RandomGenerator, Int64, Int64)
  nameWithType: IntTensor.ClampedRandom(RandomGenerator, Int64, Int64)
  fullName: IntTensor.ClampedRandom(RandomGenerator, Int64, Int64)
- uid: TorchSharp.IntTensor.Clone
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Clone()
  nameWithType: IntTensor.Clone()
  fullName: IntTensor.Clone()
- uid: TorchSharp.IntTensor.CLShift(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CLShift(IntTensor)
  nameWithType: IntTensor.CLShift(IntTensor)
  fullName: IntTensor.CLShift(IntTensor)
- uid: TorchSharp.IntTensor.CMax(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CMax(IntTensor)
  nameWithType: IntTensor.CMax(IntTensor)
  fullName: IntTensor.CMax(IntTensor)
- uid: TorchSharp.IntTensor.CMaxValue(System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CMaxValue(Int32)
  nameWithType: IntTensor.CMaxValue(Int32)
  fullName: IntTensor.CMaxValue(Int32)
- uid: TorchSharp.IntTensor.CMin(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CMin(IntTensor)
  nameWithType: IntTensor.CMin(IntTensor)
  fullName: IntTensor.CMin(IntTensor)
- uid: TorchSharp.IntTensor.CMinValue(System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CMinValue(Int32)
  nameWithType: IntTensor.CMinValue(Int32)
  fullName: IntTensor.CMinValue(Int32)
- uid: TorchSharp.IntTensor.CMul(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CMul(IntTensor)
  nameWithType: IntTensor.CMul(IntTensor)
  fullName: IntTensor.CMul(IntTensor)
- uid: TorchSharp.IntTensor.Concatenate(TorchSharp.IntTensor,System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Concatenate(IntTensor, Int32)
  nameWithType: IntTensor.Concatenate(IntTensor, Int32)
  fullName: IntTensor.Concatenate(IntTensor, Int32)
- uid: TorchSharp.IntTensor.Copy(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Copy(IntTensor)
  nameWithType: IntTensor.Copy(IntTensor)
  fullName: IntTensor.Copy(IntTensor)
- uid: TorchSharp.IntTensor.CopyByte(TorchSharp.ByteTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CopyByte(ByteTensor)
  nameWithType: IntTensor.CopyByte(ByteTensor)
  fullName: IntTensor.CopyByte(ByteTensor)
- uid: TorchSharp.ByteTensor
  parent: TorchSharp
  isExternal: false
  name: ByteTensor
  nameWithType: ByteTensor
  fullName: TorchSharp.ByteTensor
- uid: TorchSharp.IntTensor.CopyDouble(TorchSharp.DoubleTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CopyDouble(DoubleTensor)
  nameWithType: IntTensor.CopyDouble(DoubleTensor)
  fullName: IntTensor.CopyDouble(DoubleTensor)
- uid: TorchSharp.DoubleTensor
  parent: TorchSharp
  isExternal: false
  name: DoubleTensor
  nameWithType: DoubleTensor
  fullName: TorchSharp.DoubleTensor
- uid: TorchSharp.IntTensor.CopyFloat(TorchSharp.FloatTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CopyFloat(FloatTensor)
  nameWithType: IntTensor.CopyFloat(FloatTensor)
  fullName: IntTensor.CopyFloat(FloatTensor)
- uid: TorchSharp.FloatTensor
  parent: TorchSharp
  isExternal: false
  name: FloatTensor
  nameWithType: FloatTensor
  fullName: TorchSharp.FloatTensor
- uid: TorchSharp.IntTensor.CopyInt(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CopyInt(IntTensor)
  nameWithType: IntTensor.CopyInt(IntTensor)
  fullName: IntTensor.CopyInt(IntTensor)
- uid: TorchSharp.IntTensor.CopyLong(TorchSharp.LongTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CopyLong(LongTensor)
  nameWithType: IntTensor.CopyLong(LongTensor)
  fullName: IntTensor.CopyLong(LongTensor)
- uid: TorchSharp.LongTensor
  parent: TorchSharp
  isExternal: false
  name: LongTensor
  nameWithType: LongTensor
  fullName: TorchSharp.LongTensor
- uid: TorchSharp.IntTensor.CopyShort(TorchSharp.ShortTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CopyShort(ShortTensor)
  nameWithType: IntTensor.CopyShort(ShortTensor)
  fullName: IntTensor.CopyShort(ShortTensor)
- uid: TorchSharp.ShortTensor
  parent: TorchSharp
  isExternal: false
  name: ShortTensor
  nameWithType: ShortTensor
  fullName: TorchSharp.ShortTensor
- uid: TorchSharp.IntTensor.CPow(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CPow(IntTensor)
  nameWithType: IntTensor.CPow(IntTensor)
  fullName: IntTensor.CPow(IntTensor)
- uid: TorchSharp.IntTensor.CRemainder(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CRemainder(IntTensor)
  nameWithType: IntTensor.CRemainder(IntTensor)
  fullName: IntTensor.CRemainder(IntTensor)
- uid: TorchSharp.IntTensor.CrossProduct(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CrossProduct(IntTensor)
  nameWithType: IntTensor.CrossProduct(IntTensor)
  fullName: IntTensor.CrossProduct(IntTensor)
- uid: TorchSharp.IntTensor.CSub(System.Int32,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CSub(Int32, IntTensor)
  nameWithType: IntTensor.CSub(Int32, IntTensor)
  fullName: IntTensor.CSub(Int32, IntTensor)
- uid: TorchSharp.IntTensor.CumulativeProd(System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CumulativeProd(Int32)
  nameWithType: IntTensor.CumulativeProd(Int32)
  fullName: IntTensor.CumulativeProd(Int32)
- uid: TorchSharp.IntTensor.CumulativeSum(System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CumulativeSum(Int32)
  nameWithType: IntTensor.CumulativeSum(Int32)
  fullName: IntTensor.CumulativeSum(Int32)
- uid: TorchSharp.IntTensor.Data
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Data
  nameWithType: IntTensor.Data
  fullName: IntTensor.Data
- uid: System.Int32*
  parent: System
  isExternal: true
  name: Int32*
  nameWithType: Int32*
  fullName: System.Int32*
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: TorchSharp.IntTensor.Diagonal(System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Diagonal(Int32)
  nameWithType: IntTensor.Diagonal(Int32)
  fullName: IntTensor.Diagonal(Int32)
- uid: TorchSharp.IntTensor.Dimensions
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Dimensions
  nameWithType: IntTensor.Dimensions
  fullName: IntTensor.Dimensions
- uid: TorchSharp.IntTensor.Dispose
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Dispose()
  nameWithType: IntTensor.Dispose()
  fullName: IntTensor.Dispose()
- uid: TorchSharp.IntTensor.Dispose(System.Boolean)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: IntTensor.Dispose(Boolean)
  fullName: IntTensor.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TorchSharp.IntTensor.Div(System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Div(Int32)
  nameWithType: IntTensor.Div(Int32)
  fullName: IntTensor.Div(Int32)
- uid: TorchSharp.IntTensor.Div(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Div(IntTensor, Int32, IntTensor)
  nameWithType: IntTensor.Div(IntTensor, Int32, IntTensor)
  fullName: IntTensor.Div(IntTensor, Int32, IntTensor)
- uid: TorchSharp.IntTensor.Dot(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Dot(IntTensor)
  nameWithType: IntTensor.Dot(IntTensor)
  fullName: IntTensor.Dot(IntTensor)
- uid: TorchSharp.IntTensor.EqTensor(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: EqTensor(IntTensor)
  nameWithType: IntTensor.EqTensor(IntTensor)
  fullName: IntTensor.EqTensor(IntTensor)
- uid: TorchSharp.IntTensor.EqTensorT(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: EqTensorT(IntTensor)
  nameWithType: IntTensor.EqTensorT(IntTensor)
  fullName: IntTensor.EqTensorT(IntTensor)
- uid: TorchSharp.IntTensor.Equal(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Equal(IntTensor)
  nameWithType: IntTensor.Equal(IntTensor)
  fullName: IntTensor.Equal(IntTensor)
- uid: TorchSharp.IntTensor.EqValue(System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: EqValue(Int32)
  nameWithType: IntTensor.EqValue(Int32)
  fullName: IntTensor.EqValue(Int32)
- uid: TorchSharp.IntTensor.EqValueT(System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: EqValueT(Int32)
  nameWithType: IntTensor.EqValueT(Int32)
  fullName: IntTensor.EqValueT(Int32)
- uid: TorchSharp.IntTensor.Eye(System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Eye(Int64, Int64)
  nameWithType: IntTensor.Eye(Int64, Int64)
  fullName: IntTensor.Eye(Int64, Int64)
- uid: TorchSharp.IntTensor.Fill(System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Fill(Int32)
  nameWithType: IntTensor.Fill(Int32)
  fullName: IntTensor.Fill(Int32)
- uid: TorchSharp.IntTensor.Finalize
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Finalize()
  nameWithType: IntTensor.Finalize()
  fullName: IntTensor.Finalize()
- uid: TorchSharp.IntTensor.Fmod(System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Fmod(Int32)
  nameWithType: IntTensor.Fmod(Int32)
  fullName: IntTensor.Fmod(Int32)
- uid: TorchSharp.IntTensor.Fmod(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Fmod(IntTensor, Int32, IntTensor)
  nameWithType: IntTensor.Fmod(IntTensor, Int32, IntTensor)
  fullName: IntTensor.Fmod(IntTensor, Int32, IntTensor)
- uid: TorchSharp.IntTensor.Gather(TorchSharp.IntTensor,System.Int32,TorchSharp.LongTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Gather(IntTensor, Int32, LongTensor)
  nameWithType: IntTensor.Gather(IntTensor, Int32, LongTensor)
  fullName: IntTensor.Gather(IntTensor, Int32, LongTensor)
- uid: TorchSharp.IntTensor.Geometric(TorchSharp.RandomGenerator,System.Double)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Geometric(RandomGenerator, Double)
  nameWithType: IntTensor.Geometric(RandomGenerator, Double)
  fullName: IntTensor.Geometric(RandomGenerator, Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: TorchSharp.IntTensor.GeTensor(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: GeTensor(IntTensor)
  nameWithType: IntTensor.GeTensor(IntTensor)
  fullName: IntTensor.GeTensor(IntTensor)
- uid: TorchSharp.IntTensor.GeTensorT(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: GeTensorT(IntTensor)
  nameWithType: IntTensor.GeTensorT(IntTensor)
  fullName: IntTensor.GeTensorT(IntTensor)
- uid: TorchSharp.IntTensor.GetTensorDimension(System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: GetTensorDimension(Int32)
  nameWithType: IntTensor.GetTensorDimension(Int32)
  fullName: IntTensor.GetTensorDimension(Int32)
- uid: TorchSharp.IntTensor.GetTensorStride(System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: GetTensorStride(Int32)
  nameWithType: IntTensor.GetTensorStride(Int32)
  fullName: IntTensor.GetTensorStride(Int32)
- uid: TorchSharp.IntTensor.GeValue(System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: GeValue(Int32)
  nameWithType: IntTensor.GeValue(Int32)
  fullName: IntTensor.GeValue(Int32)
- uid: TorchSharp.IntTensor.GeValueT(System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: GeValueT(Int32)
  nameWithType: IntTensor.GeValueT(Int32)
  fullName: IntTensor.GeValueT(Int32)
- uid: TorchSharp.IntTensor.GtTensor(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: GtTensor(IntTensor)
  nameWithType: IntTensor.GtTensor(IntTensor)
  fullName: IntTensor.GtTensor(IntTensor)
- uid: TorchSharp.IntTensor.GtTensorT(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: GtTensorT(IntTensor)
  nameWithType: IntTensor.GtTensorT(IntTensor)
  fullName: IntTensor.GtTensorT(IntTensor)
- uid: TorchSharp.IntTensor.GtValue(System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: GtValue(Int32)
  nameWithType: IntTensor.GtValue(Int32)
  fullName: IntTensor.GtValue(Int32)
- uid: TorchSharp.IntTensor.GtValueT(System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: GtValueT(Int32)
  nameWithType: IntTensor.GtValueT(Int32)
  fullName: IntTensor.GtValueT(Int32)
- uid: TorchSharp.IntTensor.IndexAdd(System.Int32,TorchSharp.LongTensor,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: IndexAdd(Int32, LongTensor, IntTensor)
  nameWithType: IntTensor.IndexAdd(Int32, LongTensor, IntTensor)
  fullName: IntTensor.IndexAdd(Int32, LongTensor, IntTensor)
- uid: TorchSharp.IntTensor.IndexCopy(System.Int32,TorchSharp.LongTensor,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: IndexCopy(Int32, LongTensor, IntTensor)
  nameWithType: IntTensor.IndexCopy(Int32, LongTensor, IntTensor)
  fullName: IntTensor.IndexCopy(Int32, LongTensor, IntTensor)
- uid: TorchSharp.IntTensor.IndexFill(System.Int32,TorchSharp.LongTensor,System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: IndexFill(Int32, LongTensor, Int32)
  nameWithType: IntTensor.IndexFill(Int32, LongTensor, Int32)
  fullName: IntTensor.IndexFill(Int32, LongTensor, Int32)
- uid: TorchSharp.IntTensor.IndexSelect(System.Int32,TorchSharp.LongTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: IndexSelect(Int32, LongTensor)
  nameWithType: IntTensor.IndexSelect(Int32, LongTensor)
  fullName: IntTensor.IndexSelect(Int32, LongTensor)
- uid: TorchSharp.IntTensor.Item(System.Int64)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Item(Int64)
  nameWithType: IntTensor.Item(Int64)
  fullName: IntTensor.Item(Int64)
- uid: TorchSharp.IntTensor.Item(System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Item(Int64, Int64)
  nameWithType: IntTensor.Item(Int64, Int64)
  fullName: IntTensor.Item(Int64, Int64)
- uid: TorchSharp.IntTensor.Item(System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Item(Int64, Int64, Int64)
  nameWithType: IntTensor.Item(Int64, Int64, Int64)
  fullName: IntTensor.Item(Int64, Int64, Int64)
- uid: TorchSharp.IntTensor.Item(System.Int64,System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Item(Int64, Int64, Int64, Int64)
  nameWithType: IntTensor.Item(Int64, Int64, Int64, Int64)
  fullName: IntTensor.Item(Int64, Int64, Int64, Int64)
- uid: TorchSharp.IntTensor.KthValue(System.Int64,System.Int32,System.Boolean)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: KthValue(Int64, Int32, Boolean)
  nameWithType: IntTensor.KthValue(Int64, Int32, Boolean)
  fullName: IntTensor.KthValue(Int64, Int32, Boolean)
- uid: System.Tuple`2
  name: Tuple
  nameWithType: Tuple
  fullName: System.Tuple
- uid: System.Tuple{TorchSharp.IntTensor,TorchSharp.LongTensor}
  parent: System
  isExternal: true
  name: Tuple<IntTensor,LongTensor>
  nameWithType: Tuple<IntTensor,LongTensor>
  fullName: System.Tuple<TorchSharp.IntTensor,TorchSharp.LongTensor>
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TorchSharp.IntTensor
    name: IntTensor
    nameWithType: IntTensor
    fullName: TorchSharp.IntTensor
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TorchSharp.LongTensor
    name: LongTensor
    nameWithType: LongTensor
    fullName: TorchSharp.LongTensor
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TorchSharp.IntTensor.LERP(TorchSharp.IntTensor,System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: LERP(IntTensor, Int32)
  nameWithType: IntTensor.LERP(IntTensor, Int32)
  fullName: IntTensor.LERP(IntTensor, Int32)
- uid: TorchSharp.IntTensor.LeTensor(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: LeTensor(IntTensor)
  nameWithType: IntTensor.LeTensor(IntTensor)
  fullName: IntTensor.LeTensor(IntTensor)
- uid: TorchSharp.IntTensor.LeTensorT(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: LeTensorT(IntTensor)
  nameWithType: IntTensor.LeTensorT(IntTensor)
  fullName: IntTensor.LeTensorT(IntTensor)
- uid: TorchSharp.IntTensor.LeValue(System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: LeValue(Int32)
  nameWithType: IntTensor.LeValue(Int32)
  fullName: IntTensor.LeValue(Int32)
- uid: TorchSharp.IntTensor.LeValueT(System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: LeValueT(Int32)
  nameWithType: IntTensor.LeValueT(Int32)
  fullName: IntTensor.LeValueT(Int32)
- uid: TorchSharp.IntTensor.LShift(System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: LShift(Int32)
  nameWithType: IntTensor.LShift(Int32)
  fullName: IntTensor.LShift(Int32)
- uid: TorchSharp.IntTensor.LShift(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: LShift(IntTensor, Int32, IntTensor)
  nameWithType: IntTensor.LShift(IntTensor, Int32, IntTensor)
  fullName: IntTensor.LShift(IntTensor, Int32, IntTensor)
- uid: TorchSharp.IntTensor.LtTensor(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: LtTensor(IntTensor)
  nameWithType: IntTensor.LtTensor(IntTensor)
  fullName: IntTensor.LtTensor(IntTensor)
- uid: TorchSharp.IntTensor.LtTensorT(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: LtTensorT(IntTensor)
  nameWithType: IntTensor.LtTensorT(IntTensor)
  fullName: IntTensor.LtTensorT(IntTensor)
- uid: TorchSharp.IntTensor.LtValue(System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: LtValue(Int32)
  nameWithType: IntTensor.LtValue(Int32)
  fullName: IntTensor.LtValue(Int32)
- uid: TorchSharp.IntTensor.LtValueT(System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: LtValueT(Int32)
  nameWithType: IntTensor.LtValueT(Int32)
  fullName: IntTensor.LtValueT(Int32)
- uid: TorchSharp.IntTensor.MaskedCopy(TorchSharp.ByteTensor,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: MaskedCopy(ByteTensor, IntTensor)
  nameWithType: IntTensor.MaskedCopy(ByteTensor, IntTensor)
  fullName: IntTensor.MaskedCopy(ByteTensor, IntTensor)
- uid: TorchSharp.IntTensor.MaskedFill(TorchSharp.ByteTensor,System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: MaskedFill(ByteTensor, Int32)
  nameWithType: IntTensor.MaskedFill(ByteTensor, Int32)
  fullName: IntTensor.MaskedFill(ByteTensor, Int32)
- uid: TorchSharp.IntTensor.MaskedSelect(TorchSharp.ByteTensor,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: MaskedSelect(ByteTensor, IntTensor)
  nameWithType: IntTensor.MaskedSelect(ByteTensor, IntTensor)
  fullName: IntTensor.MaskedSelect(ByteTensor, IntTensor)
- uid: TorchSharp.IntTensor.Match(TorchSharp.IntTensor,System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Match(IntTensor, Int32)
  nameWithType: IntTensor.Match(IntTensor, Int32)
  fullName: IntTensor.Match(IntTensor, Int32)
- uid: TorchSharp.IntTensor.Max(System.Int32,System.Boolean)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Max(Int32, Boolean)
  nameWithType: IntTensor.Max(Int32, Boolean)
  fullName: IntTensor.Max(Int32, Boolean)
- uid: TorchSharp.IntTensor.MaxAll
  parent: TorchSharp.IntTensor
  isExternal: false
  name: MaxAll()
  nameWithType: IntTensor.MaxAll()
  fullName: IntTensor.MaxAll()
- uid: TorchSharp.IntTensor.MeanAll
  parent: TorchSharp.IntTensor
  isExternal: false
  name: MeanAll()
  nameWithType: IntTensor.MeanAll()
  fullName: IntTensor.MeanAll()
- uid: TorchSharp.IntTensor.Median(System.Int32,System.Boolean)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Median(Int32, Boolean)
  nameWithType: IntTensor.Median(Int32, Boolean)
  fullName: IntTensor.Median(Int32, Boolean)
- uid: TorchSharp.IntTensor.MedianAll
  parent: TorchSharp.IntTensor
  isExternal: false
  name: MedianAll()
  nameWithType: IntTensor.MedianAll()
  fullName: IntTensor.MedianAll()
- uid: TorchSharp.IntTensor.Min(System.Int32,System.Boolean)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Min(Int32, Boolean)
  nameWithType: IntTensor.Min(Int32, Boolean)
  fullName: IntTensor.Min(Int32, Boolean)
- uid: TorchSharp.IntTensor.MinAll
  parent: TorchSharp.IntTensor
  isExternal: false
  name: MinAll()
  nameWithType: IntTensor.MinAll()
  fullName: IntTensor.MinAll()
- uid: TorchSharp.IntTensor.Mode(System.Int32,System.Boolean)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Mode(Int32, Boolean)
  nameWithType: IntTensor.Mode(Int32, Boolean)
  fullName: IntTensor.Mode(Int32, Boolean)
- uid: TorchSharp.IntTensor.Mul(System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Mul(Int32)
  nameWithType: IntTensor.Mul(Int32)
  fullName: IntTensor.Mul(Int32)
- uid: TorchSharp.IntTensor.Mul(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Mul(IntTensor, Int32, IntTensor)
  nameWithType: IntTensor.Mul(IntTensor, Int32, IntTensor)
  fullName: IntTensor.Mul(IntTensor, Int32, IntTensor)
- uid: TorchSharp.IntTensor.Narrow(System.Int32,System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Narrow(Int32, Int64, Int64)
  nameWithType: IntTensor.Narrow(Int32, Int64, Int64)
  fullName: IntTensor.Narrow(Int32, Int64, Int64)
- uid: TorchSharp.IntTensor.NeTensor(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: NeTensor(IntTensor)
  nameWithType: IntTensor.NeTensor(IntTensor)
  fullName: IntTensor.NeTensor(IntTensor)
- uid: TorchSharp.IntTensor.NeTensorT(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: NeTensorT(IntTensor)
  nameWithType: IntTensor.NeTensorT(IntTensor)
  fullName: IntTensor.NeTensorT(IntTensor)
- uid: TorchSharp.IntTensor.NeValue(System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: NeValue(Int32)
  nameWithType: IntTensor.NeValue(Int32)
  fullName: IntTensor.NeValue(Int32)
- uid: TorchSharp.IntTensor.NeValueT(System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: NeValueT(Int32)
  nameWithType: IntTensor.NeValueT(Int32)
  fullName: IntTensor.NeValueT(Int32)
- uid: TorchSharp.IntTensor.NewWithStorage1d(System.IntPtr,System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: NewWithStorage1d(IntPtr, Int64, Int64)
  nameWithType: IntTensor.NewWithStorage1d(IntPtr, Int64, Int64)
  fullName: IntTensor.NewWithStorage1d(IntPtr, Int64, Int64)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: TorchSharp.IntTensor.NewWithStorage2d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: NewWithStorage2d(IntPtr, Int64, Int64, Int64, Int64)
  nameWithType: IntTensor.NewWithStorage2d(IntPtr, Int64, Int64, Int64, Int64)
  fullName: IntTensor.NewWithStorage2d(IntPtr, Int64, Int64, Int64, Int64)
- uid: TorchSharp.IntTensor.NewWithStorage3d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: NewWithStorage3d(IntPtr, Int64, Int64, Int64, Int64, Int64, Int64)
  nameWithType: IntTensor.NewWithStorage3d(IntPtr, Int64, Int64, Int64, Int64, Int64, Int64)
  fullName: IntTensor.NewWithStorage3d(IntPtr, Int64, Int64, Int64, Int64, Int64, Int64)
- uid: TorchSharp.IntTensor.NewWithStorage4d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: NewWithStorage4d(IntPtr, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64)
  nameWithType: IntTensor.NewWithStorage4d(IntPtr, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64)
  fullName: IntTensor.NewWithStorage4d(IntPtr, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64)
- uid: TorchSharp.IntTensor.NonZero
  parent: TorchSharp.IntTensor
  isExternal: false
  name: NonZero()
  nameWithType: IntTensor.NonZero()
  fullName: IntTensor.NonZero()
- uid: TorchSharp.IntTensor.NumElements
  parent: TorchSharp.IntTensor
  isExternal: false
  name: NumElements()
  nameWithType: IntTensor.NumElements()
  fullName: IntTensor.NumElements()
- uid: TorchSharp.IntTensor.Prod(System.Int32,System.Boolean)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Prod(Int32, Boolean)
  nameWithType: IntTensor.Prod(Int32, Boolean)
  fullName: IntTensor.Prod(Int32, Boolean)
- uid: TorchSharp.IntTensor.ProdAll
  parent: TorchSharp.IntTensor
  isExternal: false
  name: ProdAll()
  nameWithType: IntTensor.ProdAll()
  fullName: IntTensor.ProdAll()
- uid: TorchSharp.IntTensor.Put(TorchSharp.LongTensor,TorchSharp.IntTensor,System.Boolean)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Put(LongTensor, IntTensor, Boolean)
  nameWithType: IntTensor.Put(LongTensor, IntTensor, Boolean)
  fullName: IntTensor.Put(LongTensor, IntTensor, Boolean)
- uid: TorchSharp.IntTensor.Random(System.Int64)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Random(Int64)
  nameWithType: IntTensor.Random(Int64)
  fullName: IntTensor.Random(Int64)
- uid: TorchSharp.IntTensor.Random(TorchSharp.RandomGenerator)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Random(RandomGenerator)
  nameWithType: IntTensor.Random(RandomGenerator)
  fullName: IntTensor.Random(RandomGenerator)
- uid: TorchSharp.IntTensor.Random(TorchSharp.RandomGenerator,System.Int64)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Random(RandomGenerator, Int64)
  nameWithType: IntTensor.Random(RandomGenerator, Int64)
  fullName: IntTensor.Random(RandomGenerator, Int64)
- uid: TorchSharp.IntTensor.RandPerm(TorchSharp.RandomGenerator,System.Int64)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: RandPerm(RandomGenerator, Int64)
  nameWithType: IntTensor.RandPerm(RandomGenerator, Int64)
  fullName: IntTensor.RandPerm(RandomGenerator, Int64)
- uid: TorchSharp.IntTensor.Range(System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Range(Int64, Int64, Int64)
  nameWithType: IntTensor.Range(Int64, Int64, Int64)
  fullName: IntTensor.Range(Int64, Int64, Int64)
- uid: TorchSharp.IntTensor.Remainder(System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Remainder(Int32)
  nameWithType: IntTensor.Remainder(Int32)
  fullName: IntTensor.Remainder(Int32)
- uid: TorchSharp.IntTensor.Remainder(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Remainder(IntTensor, Int32, IntTensor)
  nameWithType: IntTensor.Remainder(IntTensor, Int32, IntTensor)
  fullName: IntTensor.Remainder(IntTensor, Int32, IntTensor)
- uid: TorchSharp.IntTensor.Resize1d(System.Int64)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Resize1d(Int64)
  nameWithType: IntTensor.Resize1d(Int64)
  fullName: IntTensor.Resize1d(Int64)
- uid: TorchSharp.IntTensor.Resize2d(System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Resize2d(Int64, Int64)
  nameWithType: IntTensor.Resize2d(Int64, Int64)
  fullName: IntTensor.Resize2d(Int64, Int64)
- uid: TorchSharp.IntTensor.Resize3d(System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Resize3d(Int64, Int64, Int64)
  nameWithType: IntTensor.Resize3d(Int64, Int64, Int64)
  fullName: IntTensor.Resize3d(Int64, Int64, Int64)
- uid: TorchSharp.IntTensor.Resize4d(System.Int64,System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Resize4d(Int64, Int64, Int64, Int64)
  nameWithType: IntTensor.Resize4d(Int64, Int64, Int64, Int64)
  fullName: IntTensor.Resize4d(Int64, Int64, Int64, Int64)
- uid: TorchSharp.IntTensor.Resize5d(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Resize5d(Int64, Int64, Int64, Int64, Int64)
  nameWithType: IntTensor.Resize5d(Int64, Int64, Int64, Int64, Int64)
  fullName: IntTensor.Resize5d(Int64, Int64, Int64, Int64, Int64)
- uid: TorchSharp.IntTensor.ResizeAs(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: ResizeAs(IntTensor)
  nameWithType: IntTensor.ResizeAs(IntTensor)
  fullName: IntTensor.ResizeAs(IntTensor)
- uid: TorchSharp.IntTensor.RShift(System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: RShift(Int32)
  nameWithType: IntTensor.RShift(Int32)
  fullName: IntTensor.RShift(Int32)
- uid: TorchSharp.IntTensor.RShift(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: RShift(IntTensor, Int32, IntTensor)
  nameWithType: IntTensor.RShift(IntTensor, Int32, IntTensor)
  fullName: IntTensor.RShift(IntTensor, Int32, IntTensor)
- uid: TorchSharp.IntTensor.Scatter(System.Int32,TorchSharp.LongTensor,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Scatter(Int32, LongTensor, IntTensor)
  nameWithType: IntTensor.Scatter(Int32, LongTensor, IntTensor)
  fullName: IntTensor.Scatter(Int32, LongTensor, IntTensor)
- uid: TorchSharp.IntTensor.ScatterAdd(System.Int32,TorchSharp.LongTensor,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: ScatterAdd(Int32, LongTensor, IntTensor)
  nameWithType: IntTensor.ScatterAdd(Int32, LongTensor, IntTensor)
  fullName: IntTensor.ScatterAdd(Int32, LongTensor, IntTensor)
- uid: TorchSharp.IntTensor.ScatterFill(System.Int32,TorchSharp.LongTensor,System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: ScatterFill(Int32, LongTensor, Int32)
  nameWithType: IntTensor.ScatterFill(Int32, LongTensor, Int32)
  fullName: IntTensor.ScatterFill(Int32, LongTensor, Int32)
- uid: TorchSharp.IntTensor.Select(System.Int32,System.Int64)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Select(Int32, Int64)
  nameWithType: IntTensor.Select(Int32, Int64)
  fullName: IntTensor.Select(Int32, Int64)
- uid: TorchSharp.IntTensor.Set(TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Set(IntTensor)
  nameWithType: IntTensor.Set(IntTensor)
  fullName: IntTensor.Set(IntTensor)
- uid: TorchSharp.IntTensor.Shape
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Shape
  nameWithType: IntTensor.Shape
  fullName: IntTensor.Shape
- uid: System.Int64[]
  parent: System
  isExternal: true
  name: Int64[]
  nameWithType: Int64[]
  fullName: System.Int64[]
  spec.csharp:
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: TorchSharp.IntTensor.Sign
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Sign()
  nameWithType: IntTensor.Sign()
  fullName: IntTensor.Sign()
- uid: TorchSharp.IntTensor.Sort(System.Int32,System.Boolean)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Sort(Int32, Boolean)
  nameWithType: IntTensor.Sort(Int32, Boolean)
  fullName: IntTensor.Sort(Int32, Boolean)
- uid: TorchSharp.IntTensor.Squeeze
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Squeeze()
  nameWithType: IntTensor.Squeeze()
  fullName: IntTensor.Squeeze()
- uid: TorchSharp.IntTensor.Squeeze1d(TorchSharp.IntTensor,System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Squeeze1d(IntTensor, Int32)
  nameWithType: IntTensor.Squeeze1d(IntTensor, Int32)
  fullName: IntTensor.Squeeze1d(IntTensor, Int32)
- uid: TorchSharp.IntTensor.Storage
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Storage
  nameWithType: IntTensor.Storage
  fullName: IntTensor.Storage
- uid: TorchSharp.IntTensor.Sub(System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Sub(Int32)
  nameWithType: IntTensor.Sub(Int32)
  fullName: IntTensor.Sub(Int32)
- uid: TorchSharp.IntTensor.Sub(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Sub(IntTensor, Int32, IntTensor)
  nameWithType: IntTensor.Sub(IntTensor, Int32, IntTensor)
  fullName: IntTensor.Sub(IntTensor, Int32, IntTensor)
- uid: TorchSharp.IntTensor.SubScaled(System.Int32,System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: SubScaled(Int32, Int32)
  nameWithType: IntTensor.SubScaled(Int32, Int32)
  fullName: IntTensor.SubScaled(Int32, Int32)
- uid: TorchSharp.IntTensor.Sum(System.Int32,System.Boolean)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Sum(Int32, Boolean)
  nameWithType: IntTensor.Sum(Int32, Boolean)
  fullName: IntTensor.Sum(Int32, Boolean)
- uid: TorchSharp.IntTensor.SumAll
  parent: TorchSharp.IntTensor
  isExternal: false
  name: SumAll()
  nameWithType: IntTensor.SumAll()
  fullName: IntTensor.SumAll()
- uid: TorchSharp.IntTensor.Take(TorchSharp.IntTensor,TorchSharp.LongTensor)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Take(IntTensor, LongTensor)
  nameWithType: IntTensor.Take(IntTensor, LongTensor)
  fullName: IntTensor.Take(IntTensor, LongTensor)
- uid: TorchSharp.IntTensor.TopK(System.Int64,System.Int32,System.Int32,System.Boolean)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: TopK(Int64, Int32, Int32, Boolean)
  nameWithType: IntTensor.TopK(Int64, Int32, Int32, Boolean)
  fullName: IntTensor.TopK(Int64, Int32, Int32, Boolean)
- uid: TorchSharp.IntTensor.ToString
  parent: TorchSharp.IntTensor
  isExternal: false
  name: ToString()
  nameWithType: IntTensor.ToString()
  fullName: IntTensor.ToString()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TorchSharp.IntTensor.Trace
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Trace()
  nameWithType: IntTensor.Trace()
  fullName: IntTensor.Trace()
- uid: TorchSharp.IntTensor.Transpose(System.Int32,System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Transpose(Int32, Int32)
  nameWithType: IntTensor.Transpose(Int32, Int32)
  fullName: IntTensor.Transpose(Int32, Int32)
- uid: TorchSharp.IntTensor.TriL(System.Int64)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: TriL(Int64)
  nameWithType: IntTensor.TriL(Int64)
  fullName: IntTensor.TriL(Int64)
- uid: TorchSharp.IntTensor.TriU(System.Int64)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: TriU(Int64)
  nameWithType: IntTensor.TriU(Int64)
  fullName: IntTensor.TriU(Int64)
- uid: TorchSharp.IntTensor.Unfold(System.Int32,System.Int64,System.Int64)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Unfold(Int32, Int64, Int64)
  nameWithType: IntTensor.Unfold(Int32, Int64, Int64)
  fullName: IntTensor.Unfold(Int32, Int64, Int64)
- uid: TorchSharp.IntTensor.Unsqueeze1d(TorchSharp.IntTensor,System.Int32)
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Unsqueeze1d(IntTensor, Int32)
  nameWithType: IntTensor.Unsqueeze1d(IntTensor, Int32)
  fullName: IntTensor.Unsqueeze1d(IntTensor, Int32)
- uid: TorchSharp.IntTensor.ZeroFill
  parent: TorchSharp.IntTensor
  isExternal: false
  name: ZeroFill()
  nameWithType: IntTensor.ZeroFill()
  fullName: IntTensor.ZeroFill()
- uid: TorchSharp.IntTensor.#ctor*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: IntTensor
  nameWithType: IntTensor.IntTensor
  fullName: IntTensor.IntTensor
- uid: TorchSharp.IntTensor.Add*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Add
  nameWithType: IntTensor.Add
  fullName: IntTensor.Add
- uid: TorchSharp.IntTensor.AddBMM*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: AddBMM
  nameWithType: IntTensor.AddBMM
  fullName: IntTensor.AddBMM
- uid: TorchSharp.IntTensor.AddCDiv*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: AddCDiv
  nameWithType: IntTensor.AddCDiv
  fullName: IntTensor.AddCDiv
- uid: TorchSharp.IntTensor.AddCMul*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: AddCMul
  nameWithType: IntTensor.AddCMul
  fullName: IntTensor.AddCMul
- uid: TorchSharp.IntTensor.AddMM*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: AddMM
  nameWithType: IntTensor.AddMM
  fullName: IntTensor.AddMM
- uid: TorchSharp.IntTensor.AddMV*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: AddMV
  nameWithType: IntTensor.AddMV
  fullName: IntTensor.AddMV
- uid: TorchSharp.IntTensor.AddR*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: AddR
  nameWithType: IntTensor.AddR
  fullName: IntTensor.AddR
- uid: TorchSharp.IntTensor.AddScaled*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: AddScaled
  nameWithType: IntTensor.AddScaled
  fullName: IntTensor.AddScaled
- uid: TorchSharp.IntTensor.ARange*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: ARange
  nameWithType: IntTensor.ARange
  fullName: IntTensor.ARange
- uid: TorchSharp.IntTensor.BAddBMM*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: BAddBMM
  nameWithType: IntTensor.BAddBMM
  fullName: IntTensor.BAddBMM
- uid: TorchSharp.IntTensor.BitAnd*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: BitAnd
  nameWithType: IntTensor.BitAnd
  fullName: IntTensor.BitAnd
- uid: TorchSharp.IntTensor.BitOr*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: BitOr
  nameWithType: IntTensor.BitOr
  fullName: IntTensor.BitOr
- uid: TorchSharp.IntTensor.BitXor*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: BitXor
  nameWithType: IntTensor.BitXor
  fullName: IntTensor.BitXor
- uid: TorchSharp.IntTensor.CAdd*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CAdd
  nameWithType: IntTensor.CAdd
  fullName: IntTensor.CAdd
- uid: TorchSharp.IntTensor.CappedRandom*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CappedRandom
  nameWithType: IntTensor.CappedRandom
  fullName: IntTensor.CappedRandom
- uid: TorchSharp.IntTensor.CBitAnd*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CBitAnd
  nameWithType: IntTensor.CBitAnd
  fullName: IntTensor.CBitAnd
- uid: TorchSharp.IntTensor.CBitOr*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CBitOr
  nameWithType: IntTensor.CBitOr
  fullName: IntTensor.CBitOr
- uid: TorchSharp.IntTensor.CBitXor*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CBitXor
  nameWithType: IntTensor.CBitXor
  fullName: IntTensor.CBitXor
- uid: TorchSharp.IntTensor.CDiv*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CDiv
  nameWithType: IntTensor.CDiv
  fullName: IntTensor.CDiv
- uid: TorchSharp.IntTensor.CFMod*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CFMod
  nameWithType: IntTensor.CFMod
  fullName: IntTensor.CFMod
- uid: TorchSharp.IntTensor.Clamp*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Clamp
  nameWithType: IntTensor.Clamp
  fullName: IntTensor.Clamp
- uid: TorchSharp.IntTensor.ClampedRandom*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: ClampedRandom
  nameWithType: IntTensor.ClampedRandom
  fullName: IntTensor.ClampedRandom
- uid: TorchSharp.IntTensor.Clone*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Clone
  nameWithType: IntTensor.Clone
  fullName: IntTensor.Clone
- uid: TorchSharp.IntTensor.CLShift*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CLShift
  nameWithType: IntTensor.CLShift
  fullName: IntTensor.CLShift
- uid: TorchSharp.IntTensor.CMax*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CMax
  nameWithType: IntTensor.CMax
  fullName: IntTensor.CMax
- uid: TorchSharp.IntTensor.CMaxValue*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CMaxValue
  nameWithType: IntTensor.CMaxValue
  fullName: IntTensor.CMaxValue
- uid: TorchSharp.IntTensor.CMin*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CMin
  nameWithType: IntTensor.CMin
  fullName: IntTensor.CMin
- uid: TorchSharp.IntTensor.CMinValue*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CMinValue
  nameWithType: IntTensor.CMinValue
  fullName: IntTensor.CMinValue
- uid: TorchSharp.IntTensor.CMul*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CMul
  nameWithType: IntTensor.CMul
  fullName: IntTensor.CMul
- uid: TorchSharp.IntTensor.Concatenate*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Concatenate
  nameWithType: IntTensor.Concatenate
  fullName: IntTensor.Concatenate
- uid: TorchSharp.IntTensor.Copy*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Copy
  nameWithType: IntTensor.Copy
  fullName: IntTensor.Copy
- uid: TorchSharp.IntTensor.CopyByte*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CopyByte
  nameWithType: IntTensor.CopyByte
  fullName: IntTensor.CopyByte
- uid: TorchSharp.IntTensor.CopyDouble*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CopyDouble
  nameWithType: IntTensor.CopyDouble
  fullName: IntTensor.CopyDouble
- uid: TorchSharp.IntTensor.CopyFloat*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CopyFloat
  nameWithType: IntTensor.CopyFloat
  fullName: IntTensor.CopyFloat
- uid: TorchSharp.IntTensor.CopyInt*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CopyInt
  nameWithType: IntTensor.CopyInt
  fullName: IntTensor.CopyInt
- uid: TorchSharp.IntTensor.CopyLong*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CopyLong
  nameWithType: IntTensor.CopyLong
  fullName: IntTensor.CopyLong
- uid: TorchSharp.IntTensor.CopyShort*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CopyShort
  nameWithType: IntTensor.CopyShort
  fullName: IntTensor.CopyShort
- uid: TorchSharp.IntTensor.CPow*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CPow
  nameWithType: IntTensor.CPow
  fullName: IntTensor.CPow
- uid: TorchSharp.IntTensor.CRemainder*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CRemainder
  nameWithType: IntTensor.CRemainder
  fullName: IntTensor.CRemainder
- uid: TorchSharp.IntTensor.CrossProduct*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CrossProduct
  nameWithType: IntTensor.CrossProduct
  fullName: IntTensor.CrossProduct
- uid: TorchSharp.IntTensor.CSub*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CSub
  nameWithType: IntTensor.CSub
  fullName: IntTensor.CSub
- uid: TorchSharp.IntTensor.CumulativeProd*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CumulativeProd
  nameWithType: IntTensor.CumulativeProd
  fullName: IntTensor.CumulativeProd
- uid: TorchSharp.IntTensor.CumulativeSum*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: CumulativeSum
  nameWithType: IntTensor.CumulativeSum
  fullName: IntTensor.CumulativeSum
- uid: TorchSharp.IntTensor.Data*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Data
  nameWithType: IntTensor.Data
  fullName: IntTensor.Data
- uid: TorchSharp.IntTensor.Diagonal*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Diagonal
  nameWithType: IntTensor.Diagonal
  fullName: IntTensor.Diagonal
- uid: TorchSharp.IntTensor.Dimensions*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Dimensions
  nameWithType: IntTensor.Dimensions
  fullName: IntTensor.Dimensions
- uid: TorchSharp.IntTensor.Dispose*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Dispose
  nameWithType: IntTensor.Dispose
  fullName: IntTensor.Dispose
- uid: TorchSharp.IntTensor.Div*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Div
  nameWithType: IntTensor.Div
  fullName: IntTensor.Div
- uid: TorchSharp.IntTensor.Dot*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Dot
  nameWithType: IntTensor.Dot
  fullName: IntTensor.Dot
- uid: TorchSharp.IntTensor.EqTensor*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: EqTensor
  nameWithType: IntTensor.EqTensor
  fullName: IntTensor.EqTensor
- uid: TorchSharp.IntTensor.EqTensorT*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: EqTensorT
  nameWithType: IntTensor.EqTensorT
  fullName: IntTensor.EqTensorT
- uid: TorchSharp.IntTensor.Equal*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Equal
  nameWithType: IntTensor.Equal
  fullName: IntTensor.Equal
- uid: TorchSharp.IntTensor.EqValue*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: EqValue
  nameWithType: IntTensor.EqValue
  fullName: IntTensor.EqValue
- uid: TorchSharp.IntTensor.EqValueT*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: EqValueT
  nameWithType: IntTensor.EqValueT
  fullName: IntTensor.EqValueT
- uid: TorchSharp.IntTensor.Eye*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Eye
  nameWithType: IntTensor.Eye
  fullName: IntTensor.Eye
- uid: TorchSharp.IntTensor.Fill*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Fill
  nameWithType: IntTensor.Fill
  fullName: IntTensor.Fill
- uid: TorchSharp.IntTensor.Finalize*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Finalize
  nameWithType: IntTensor.Finalize
  fullName: IntTensor.Finalize
- uid: TorchSharp.IntTensor.Fmod*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Fmod
  nameWithType: IntTensor.Fmod
  fullName: IntTensor.Fmod
- uid: TorchSharp.IntTensor.Gather*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Gather
  nameWithType: IntTensor.Gather
  fullName: IntTensor.Gather
- uid: TorchSharp.IntTensor.Geometric*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Geometric
  nameWithType: IntTensor.Geometric
  fullName: IntTensor.Geometric
- uid: TorchSharp.IntTensor.GeTensor*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: GeTensor
  nameWithType: IntTensor.GeTensor
  fullName: IntTensor.GeTensor
- uid: TorchSharp.IntTensor.GeTensorT*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: GeTensorT
  nameWithType: IntTensor.GeTensorT
  fullName: IntTensor.GeTensorT
- uid: TorchSharp.IntTensor.GetTensorDimension*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: GetTensorDimension
  nameWithType: IntTensor.GetTensorDimension
  fullName: IntTensor.GetTensorDimension
- uid: TorchSharp.IntTensor.GetTensorStride*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: GetTensorStride
  nameWithType: IntTensor.GetTensorStride
  fullName: IntTensor.GetTensorStride
- uid: TorchSharp.IntTensor.GeValue*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: GeValue
  nameWithType: IntTensor.GeValue
  fullName: IntTensor.GeValue
- uid: TorchSharp.IntTensor.GeValueT*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: GeValueT
  nameWithType: IntTensor.GeValueT
  fullName: IntTensor.GeValueT
- uid: TorchSharp.IntTensor.GtTensor*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: GtTensor
  nameWithType: IntTensor.GtTensor
  fullName: IntTensor.GtTensor
- uid: TorchSharp.IntTensor.GtTensorT*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: GtTensorT
  nameWithType: IntTensor.GtTensorT
  fullName: IntTensor.GtTensorT
- uid: TorchSharp.IntTensor.GtValue*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: GtValue
  nameWithType: IntTensor.GtValue
  fullName: IntTensor.GtValue
- uid: TorchSharp.IntTensor.GtValueT*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: GtValueT
  nameWithType: IntTensor.GtValueT
  fullName: IntTensor.GtValueT
- uid: TorchSharp.IntTensor.IndexAdd*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: IndexAdd
  nameWithType: IntTensor.IndexAdd
  fullName: IntTensor.IndexAdd
- uid: TorchSharp.IntTensor.IndexCopy*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: IndexCopy
  nameWithType: IntTensor.IndexCopy
  fullName: IntTensor.IndexCopy
- uid: TorchSharp.IntTensor.IndexFill*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: IndexFill
  nameWithType: IntTensor.IndexFill
  fullName: IntTensor.IndexFill
- uid: TorchSharp.IntTensor.IndexSelect*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: IndexSelect
  nameWithType: IntTensor.IndexSelect
  fullName: IntTensor.IndexSelect
- uid: TorchSharp.IntTensor.Item*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Item
  nameWithType: IntTensor.Item
  fullName: IntTensor.Item
- uid: TorchSharp.IntTensor.KthValue*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: KthValue
  nameWithType: IntTensor.KthValue
  fullName: IntTensor.KthValue
- uid: TorchSharp.IntTensor.LERP*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: LERP
  nameWithType: IntTensor.LERP
  fullName: IntTensor.LERP
- uid: TorchSharp.IntTensor.LeTensor*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: LeTensor
  nameWithType: IntTensor.LeTensor
  fullName: IntTensor.LeTensor
- uid: TorchSharp.IntTensor.LeTensorT*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: LeTensorT
  nameWithType: IntTensor.LeTensorT
  fullName: IntTensor.LeTensorT
- uid: TorchSharp.IntTensor.LeValue*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: LeValue
  nameWithType: IntTensor.LeValue
  fullName: IntTensor.LeValue
- uid: TorchSharp.IntTensor.LeValueT*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: LeValueT
  nameWithType: IntTensor.LeValueT
  fullName: IntTensor.LeValueT
- uid: TorchSharp.IntTensor.LShift*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: LShift
  nameWithType: IntTensor.LShift
  fullName: IntTensor.LShift
- uid: TorchSharp.IntTensor.LtTensor*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: LtTensor
  nameWithType: IntTensor.LtTensor
  fullName: IntTensor.LtTensor
- uid: TorchSharp.IntTensor.LtTensorT*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: LtTensorT
  nameWithType: IntTensor.LtTensorT
  fullName: IntTensor.LtTensorT
- uid: TorchSharp.IntTensor.LtValue*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: LtValue
  nameWithType: IntTensor.LtValue
  fullName: IntTensor.LtValue
- uid: TorchSharp.IntTensor.LtValueT*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: LtValueT
  nameWithType: IntTensor.LtValueT
  fullName: IntTensor.LtValueT
- uid: TorchSharp.IntTensor.MaskedCopy*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: MaskedCopy
  nameWithType: IntTensor.MaskedCopy
  fullName: IntTensor.MaskedCopy
- uid: TorchSharp.IntTensor.MaskedFill*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: MaskedFill
  nameWithType: IntTensor.MaskedFill
  fullName: IntTensor.MaskedFill
- uid: TorchSharp.IntTensor.MaskedSelect*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: MaskedSelect
  nameWithType: IntTensor.MaskedSelect
  fullName: IntTensor.MaskedSelect
- uid: TorchSharp.IntTensor.Match*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Match
  nameWithType: IntTensor.Match
  fullName: IntTensor.Match
- uid: TorchSharp.IntTensor.Max*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Max
  nameWithType: IntTensor.Max
  fullName: IntTensor.Max
- uid: TorchSharp.IntTensor.MaxAll*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: MaxAll
  nameWithType: IntTensor.MaxAll
  fullName: IntTensor.MaxAll
- uid: TorchSharp.IntTensor.MeanAll*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: MeanAll
  nameWithType: IntTensor.MeanAll
  fullName: IntTensor.MeanAll
- uid: TorchSharp.IntTensor.Median*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Median
  nameWithType: IntTensor.Median
  fullName: IntTensor.Median
- uid: TorchSharp.IntTensor.MedianAll*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: MedianAll
  nameWithType: IntTensor.MedianAll
  fullName: IntTensor.MedianAll
- uid: TorchSharp.IntTensor.Min*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Min
  nameWithType: IntTensor.Min
  fullName: IntTensor.Min
- uid: TorchSharp.IntTensor.MinAll*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: MinAll
  nameWithType: IntTensor.MinAll
  fullName: IntTensor.MinAll
- uid: TorchSharp.IntTensor.Mode*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Mode
  nameWithType: IntTensor.Mode
  fullName: IntTensor.Mode
- uid: TorchSharp.IntTensor.Mul*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Mul
  nameWithType: IntTensor.Mul
  fullName: IntTensor.Mul
- uid: TorchSharp.IntTensor.Narrow*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Narrow
  nameWithType: IntTensor.Narrow
  fullName: IntTensor.Narrow
- uid: TorchSharp.IntTensor.NeTensor*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: NeTensor
  nameWithType: IntTensor.NeTensor
  fullName: IntTensor.NeTensor
- uid: TorchSharp.IntTensor.NeTensorT*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: NeTensorT
  nameWithType: IntTensor.NeTensorT
  fullName: IntTensor.NeTensorT
- uid: TorchSharp.IntTensor.NeValue*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: NeValue
  nameWithType: IntTensor.NeValue
  fullName: IntTensor.NeValue
- uid: TorchSharp.IntTensor.NeValueT*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: NeValueT
  nameWithType: IntTensor.NeValueT
  fullName: IntTensor.NeValueT
- uid: TorchSharp.IntTensor.NewWithStorage1d*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: NewWithStorage1d
  nameWithType: IntTensor.NewWithStorage1d
  fullName: IntTensor.NewWithStorage1d
- uid: TorchSharp.IntTensor.NewWithStorage2d*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: NewWithStorage2d
  nameWithType: IntTensor.NewWithStorage2d
  fullName: IntTensor.NewWithStorage2d
- uid: TorchSharp.IntTensor.NewWithStorage3d*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: NewWithStorage3d
  nameWithType: IntTensor.NewWithStorage3d
  fullName: IntTensor.NewWithStorage3d
- uid: TorchSharp.IntTensor.NewWithStorage4d*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: NewWithStorage4d
  nameWithType: IntTensor.NewWithStorage4d
  fullName: IntTensor.NewWithStorage4d
- uid: TorchSharp.IntTensor.NonZero*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: NonZero
  nameWithType: IntTensor.NonZero
  fullName: IntTensor.NonZero
- uid: TorchSharp.IntTensor.NumElements*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: NumElements
  nameWithType: IntTensor.NumElements
  fullName: IntTensor.NumElements
- uid: TorchSharp.IntTensor.Prod*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Prod
  nameWithType: IntTensor.Prod
  fullName: IntTensor.Prod
- uid: TorchSharp.IntTensor.ProdAll*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: ProdAll
  nameWithType: IntTensor.ProdAll
  fullName: IntTensor.ProdAll
- uid: TorchSharp.IntTensor.Put*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Put
  nameWithType: IntTensor.Put
  fullName: IntTensor.Put
- uid: TorchSharp.IntTensor.Random*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Random
  nameWithType: IntTensor.Random
  fullName: IntTensor.Random
- uid: TorchSharp.IntTensor.RandPerm*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: RandPerm
  nameWithType: IntTensor.RandPerm
  fullName: IntTensor.RandPerm
- uid: TorchSharp.IntTensor.Range*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Range
  nameWithType: IntTensor.Range
  fullName: IntTensor.Range
- uid: TorchSharp.IntTensor.Remainder*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Remainder
  nameWithType: IntTensor.Remainder
  fullName: IntTensor.Remainder
- uid: TorchSharp.IntTensor.Resize1d*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Resize1d
  nameWithType: IntTensor.Resize1d
  fullName: IntTensor.Resize1d
- uid: TorchSharp.IntTensor.Resize2d*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Resize2d
  nameWithType: IntTensor.Resize2d
  fullName: IntTensor.Resize2d
- uid: TorchSharp.IntTensor.Resize3d*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Resize3d
  nameWithType: IntTensor.Resize3d
  fullName: IntTensor.Resize3d
- uid: TorchSharp.IntTensor.Resize4d*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Resize4d
  nameWithType: IntTensor.Resize4d
  fullName: IntTensor.Resize4d
- uid: TorchSharp.IntTensor.Resize5d*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Resize5d
  nameWithType: IntTensor.Resize5d
  fullName: IntTensor.Resize5d
- uid: TorchSharp.IntTensor.ResizeAs*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: ResizeAs
  nameWithType: IntTensor.ResizeAs
  fullName: IntTensor.ResizeAs
- uid: TorchSharp.IntTensor.RShift*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: RShift
  nameWithType: IntTensor.RShift
  fullName: IntTensor.RShift
- uid: TorchSharp.IntTensor.Scatter*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Scatter
  nameWithType: IntTensor.Scatter
  fullName: IntTensor.Scatter
- uid: TorchSharp.IntTensor.ScatterAdd*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: ScatterAdd
  nameWithType: IntTensor.ScatterAdd
  fullName: IntTensor.ScatterAdd
- uid: TorchSharp.IntTensor.ScatterFill*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: ScatterFill
  nameWithType: IntTensor.ScatterFill
  fullName: IntTensor.ScatterFill
- uid: TorchSharp.IntTensor.Select*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Select
  nameWithType: IntTensor.Select
  fullName: IntTensor.Select
- uid: TorchSharp.IntTensor.Set*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Set
  nameWithType: IntTensor.Set
  fullName: IntTensor.Set
- uid: TorchSharp.IntTensor.Shape*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Shape
  nameWithType: IntTensor.Shape
  fullName: IntTensor.Shape
- uid: TorchSharp.IntTensor.Sign*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Sign
  nameWithType: IntTensor.Sign
  fullName: IntTensor.Sign
- uid: TorchSharp.IntTensor.Sort*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Sort
  nameWithType: IntTensor.Sort
  fullName: IntTensor.Sort
- uid: TorchSharp.IntTensor.Squeeze*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Squeeze
  nameWithType: IntTensor.Squeeze
  fullName: IntTensor.Squeeze
- uid: TorchSharp.IntTensor.Squeeze1d*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Squeeze1d
  nameWithType: IntTensor.Squeeze1d
  fullName: IntTensor.Squeeze1d
- uid: TorchSharp.IntTensor.Storage*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Storage
  nameWithType: IntTensor.Storage
  fullName: IntTensor.Storage
- uid: TorchSharp.IntTensor.Sub*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Sub
  nameWithType: IntTensor.Sub
  fullName: IntTensor.Sub
- uid: TorchSharp.IntTensor.SubScaled*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: SubScaled
  nameWithType: IntTensor.SubScaled
  fullName: IntTensor.SubScaled
- uid: TorchSharp.IntTensor.Sum*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Sum
  nameWithType: IntTensor.Sum
  fullName: IntTensor.Sum
- uid: TorchSharp.IntTensor.SumAll*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: SumAll
  nameWithType: IntTensor.SumAll
  fullName: IntTensor.SumAll
- uid: TorchSharp.IntTensor.Take*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Take
  nameWithType: IntTensor.Take
  fullName: IntTensor.Take
- uid: TorchSharp.IntTensor.TopK*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: TopK
  nameWithType: IntTensor.TopK
  fullName: IntTensor.TopK
- uid: TorchSharp.IntTensor.ToString*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: ToString
  nameWithType: IntTensor.ToString
  fullName: IntTensor.ToString
- uid: TorchSharp.IntTensor.Trace*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Trace
  nameWithType: IntTensor.Trace
  fullName: IntTensor.Trace
- uid: TorchSharp.IntTensor.Transpose*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Transpose
  nameWithType: IntTensor.Transpose
  fullName: IntTensor.Transpose
- uid: TorchSharp.IntTensor.TriL*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: TriL
  nameWithType: IntTensor.TriL
  fullName: IntTensor.TriL
- uid: TorchSharp.IntTensor.TriU*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: TriU
  nameWithType: IntTensor.TriU
  fullName: IntTensor.TriU
- uid: TorchSharp.IntTensor.Unfold*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Unfold
  nameWithType: IntTensor.Unfold
  fullName: IntTensor.Unfold
- uid: TorchSharp.IntTensor.Unsqueeze1d*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: Unsqueeze1d
  nameWithType: IntTensor.Unsqueeze1d
  fullName: IntTensor.Unsqueeze1d
- uid: TorchSharp.IntTensor.ZeroFill*
  parent: TorchSharp.IntTensor
  isExternal: false
  name: ZeroFill
  nameWithType: IntTensor.ZeroFill
  fullName: IntTensor.ZeroFill
- uid: System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
