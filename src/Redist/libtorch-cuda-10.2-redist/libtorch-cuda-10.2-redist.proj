<Project>
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), Directory.Build.props))\Directory.Build.props" />

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <LibName Condition="'$(TargetOS)' == 'windows'">libtorch-win-shared-with-deps$(LibTorchDebug)</LibName>  
    <LibName Condition="'$(TargetOS)' == 'linux'">libtorch-shared-with-deps</LibName> 
    <FileBaseName>$(LibName)-$(LibtorchVersion)</FileBaseName>
    <FileExtension>.zip</FileExtension>
    <ArchiveUrl>https://download.pytorch.org/libtorch/cu$(CudaVersion)/$(FileBaseName)$(FileExtension)</ArchiveUrl>
    <Runtime Condition="'$(TargetOS)' == 'windows'">win-x64</Runtime>
    <Runtime Condition="'$(TargetOS)' == 'linux'">linux-x64</Runtime>

    <DownloadedArchiveFolder>$(MassiveDownloadRoot)$(MSBuildProjectName)\</DownloadedArchiveFolder>
    <DownloadedArchiveFileName>$(FileBaseName)$(FileExtension)</DownloadedArchiveFileName>
    <DownloadedArchive>$(DownloadedArchiveFolder)$(DownloadedArchiveFileName)</DownloadedArchive>
    <ArchiveShaFile>$(IntermediateOutputPath)$(FileBaseName)$(FileExtension).sha</ArchiveShaFile>
    <ExtractDirectory>$(IntermediateOutputPath)$(FileBaseName)</ExtractDirectory>
    <ExtractSemaphore>$(IntermediateOutputPath)$(FileBaseName)\.extracted</ExtractSemaphore>
    <CopyToPackageSemaphore>$(MainPackageFolder)\.copied</CopyToPackageSemaphore>
    <CopySemaphore>$(IntermediateOutputPath)$(FileBaseName)\.extracted</CopySemaphore>
    <LocalShaFile>$(MSBuildProjectDirectory)\$(FileBaseName)$(FileExtension).sha</LocalShaFile>
    <LicenseUrl>https://raw.githubusercontent.com/pytorch/pytorch/master/LICENSE</LicenseUrl>
    <DownloadedLicenseFolder>$(IntermediateOutputPath)</DownloadedLicenseFolder>
    <DownloadedLicenseFileName>LICENSE-LIBTORCH</DownloadedLicenseFileName>
    <DownloadedLicenseFile>$(DownloadedLicenseFolder)$(DownloadedLicenseFileName)</DownloadedLicenseFile>
    <MainPackageFolder>$(PackageAssetsPath)$(MSBuildProjectName)-$(Runtime)</MainPackageFolder>
    <CopyToPackageSemaphore>$(MainPackageFolder)\.copied</CopyToPackageSemaphore>

  </PropertyGroup>
  
  <ItemGroup Condition="'$(TargetOS)' == 'windows'">
    <File Include= "libtorch\lib\asmjit.dll" PackagePart="part1" />
    <File Include= "libtorch\lib\c10.dll" PackagePart="part1" />
    <File Include= "libtorch\lib\c10_cuda.dll" PackagePart="part1" />
    <File Include= "libtorch\lib\caffe2_detectron_ops_gpu.dll" PackagePart="part1" />
    <File Include= "libtorch\lib\caffe2_module_test_dynamic.dll" PackagePart="part1" />
    <File Include= "libtorch\lib\caffe2_nvrtc.dll" PackagePart="part1" />
    <File Include= "libtorch\lib\cublas64_10.dll" PackagePart="part1" />
    <File Include= "libtorch\lib\cublasLt64_10.dll" PackagePart="part1" />
    <File Include= "libtorch\lib\cudart64_102.dll" PackagePart="part1" />
    <File Include= "libtorch\lib\cudnn64_7.dll" PackagePart="part1" />
    <File Include= "libtorch\lib\cufft64_10.dll" PackagePart="part1" />
    <File Include= "libtorch\lib\cufftw64_10.dll" PackagePart="part1" />
    <File Include= "libtorch\lib\curand64_10.dll" PackagePart="part1" />
    <File Include= "libtorch\lib\cusparse64_10.dll" PackagePart="part1" />
    <File Include= "libtorch\lib\fbgemm.dll" PackagePart="part1" />
    <File Include= "libtorch\lib\libiomp5md.dll" PackagePart="part1" />
    <File Include= "libtorch\lib\libiompstubs5md.dll" PackagePart="part1" />
    <File Include= "libtorch\lib\nvrtc64_102_0.dll" PackagePart="part1" />
    <File Include= "libtorch\lib\nvrtc-builtins64_102.dll" PackagePart="part1" />
    <File Include= "libtorch\lib\nvToolsExt64_1.dll" PackagePart="part1" />
    <File Include= "libtorch\lib\torch.dll" PackagePart="part1" />
    <File Include= "libtorch\lib\torch_cpu.dll" PackagePart="part2" />
    <File Include= "libtorch\lib\torch.dll" PackagePart="part1" />
    <File Include= "libtorch\lib\torch_cuda.dll" PackagePart="part3" />
    <File Include= "libtorch\lib\torch_global_deps.dll" PackagePart="part1" />
  </ItemGroup>
  <ItemGroup Condition="'$(TargetOS)' == 'linux'">
    <File Include= "libtorch\lib\libc10.so"  PackagePart="part1"  />
    <File Include= "libtorch\lib\libc10_cuda.so"  PackagePart="part1"  />
    <File Include= "libtorch\lib\libc10d_cuda_test.so"  PackagePart="part1"  />
    <File Include= "libtorch\lib\libcaffe2_detectron_ops_gpu.so"  PackagePart="part1"  />
    <File Include= "libtorch\lib\libcaffe2_module_test_dynamic.so"  PackagePart="part1"  />
    <File Include= "libtorch\lib\libcaffe2_nvrtc.so"  PackagePart="part1"  />
    <File Include= "libtorch\lib\libcaffe2_observers.so"  PackagePart="part1"  />
    <File Include= "libtorch\lib\libfbjni.so"  PackagePart="part1"  />
    <File Include= "libtorch\lib\libnvrtc-builtins.so"  PackagePart="part1"  />
    <File Include= "libtorch\lib\libpytorch_jni.so"  PackagePart="part1"  />
    <File Include= "libtorch\lib\libshm.so"  PackagePart="part1"  />
    <File Include= "libtorch\lib\libtorch.so"  PackagePart="part1"  />
    <File Include= "libtorch\lib\libtorch_cpu.so"  PackagePart="part1"  />
    <File Include= "libtorch\lib\libtorch_cuda.so"  PackagePart="part2"  />
    <File Include= "libtorch\lib\libtorch_global_deps.so" PackagePart="part1"  />
    <File Include= "libtorch\lib\libtorch_python.so" PackagePart="part1"  />
    <File Include= "libtorch\lib\libcudart-80664282.so.10.2" PackagePart="part1"  />
    <File Include= "libtorch\lib\libnvrtc-08c4863f.so.10.2" PackagePart="part1"  />
    <File Include= "libtorch\lib\libgomp-7c85b1e2.so.1" PackagePart="part1"  />
    <File Include= "libtorch\lib\libnvToolsExt-3965bdd0.so.1" PackagePart="part1"  />

  </ItemGroup>

  <UsingTask TaskName="DownloadFilesFromUrl" AssemblyFile="$(ToolsDir)Microsoft.DotNet.Build.Tasks.dll"/>

  <Target Name="DownloadArchive" Inputs="$(MSBuildProjectFile)" Outputs="$(DownloadFile);$(DownloadedLicenseFile)">
    <MakeDir Directories="$(DownloadedArchiveFolder)" />
    <MakeDir Directories="$(DownloadedLicenseFolder)" />
    <DownloadFile  SourceUrl="$(ArchiveUrl)" DestinationFolder="$(DownloadedArchiveFolder)" DestinationFileName="$(DownloadedArchiveFileName)" Condition="!Exists('$(DownloadedArchive)')" />
    <DownloadFile  SourceUrl="$(LicenseUrl)" DestinationFolder="$(DownloadedLicenseFolder)" DestinationFileName="$(DownloadedLicenseFileName)" Condition="!Exists('$(DownloadedLicense)')" />
  </Target>
  
  <UsingTask TaskName="GenerateChecksums" AssemblyFile="$(ToolsDir)Microsoft.DotNet.Build.Tasks.dll"/>
  <UsingTask TaskName="ZipFileExtractToDirectory" AssemblyFile="$(ToolsDir)Microsoft.DotNet.Build.Tasks.dll"/>

  <!-- Validate and extract Archive for Libtorch -->
  <Target Name="ValidateAndExtractArchives" DependsOnTargets="DownloadArchive" Inputs="$(DownloadedArchive)" Outputs="$(ExtractSemaphore)">
    <!-- GenerateChecksums writes a sha checksum to the file specified by DestinationPath metadata -->
    <ItemGroup>
      <_filesToCheckSum Include="$(DownloadedArchive)" DestinationPath="$(ArchiveShaFile)" />
    </ItemGroup>
    <GenerateChecksums Items="@(_filesToCheckSum)" />

    <!-- If specified we'll update the checked in SHAs with the downloaded ones. -->
    <Copy Condition="'$(UpdateSHA)' == 'true'"
          SourceFiles="$(ArchiveShaFile)"
          DestinationFiles="$(LocalShaFile)" />

    <Error Condition="!Exists('$(LocalShaFile)')" Text="SHA file '$(LocalShaFile)' does not exist.  Build with /p:UpdateSHA=true to save it." />

    <!-- Read in the SHAs as metadata on the archive items -->
    <ItemGroup>
      <Archive>
        <LocalSha>$([System.IO.File]::ReadAllText('$(LocalShaFile)'))</LocalSha>
        <DownloadSha>$([System.IO.File]::ReadAllText('$(ArchiveShaFile)'))</DownloadSha>
      </Archive>
    </ItemGroup>

    <!-- Validate that the downloaded SHAs match the expected checked in SHAs -->
    <Error Condition="'%(Archive.LocalSha)' != '%(Archive.DownloadSha)'" Text="Downloaded file '$(DownloadedArchive)' has unexpected SHA.%0A  expected: %(Archive.LocalSha)%0A  actual: %(Archive.DownloadSha)%0ABuild with /p:UpdateSHA=true if you intentionally changed the URL and wish to update the SHAs, otherwise this could indicate an incomplete download or intercerpted URL and should be examined." />

    <!-- The archives are valid, lets extract them, ensuring an empty directory -->
    <RemoveDir Directories="$(ExtractDirectory)" />
    <MakeDir Directories="$(ExtractDirectory)" />
    <ZipFileExtractToDirectory Condition="'$(FileExtension)' == '.zip'"
                               SourceArchive="$(DownloadedArchive)"
                               DestinationDirectory="$(ExtractDirectory)"
                               OverwriteDestination="true" />

    <Message Importance="High" Condition="'$(FileExtension)' == '.tar.gz'" Text="Decompressing '$(DownloadedArchive)' to '$(ExtractDirectory)'." />
    <Exec Condition="'$(FileExtension)' == '.tar.gz'"
          WorkingDirectory="$(ExtractDirectory)"
          Command="tar -xzmf &quot;$([MSBuild]::MakeRelative('$(ExtractDirectory)', '$(DownloadedArchive)'))&quot;" />
    <WriteLinesToFile File="$(ExtractSemaphore)" Lines="done" WriteOnlyWhenDifferent="true" />

    <!-- delete the archive files when running on CI -->
    <Message Importance="High" Text="Deleting '$(DownloadedArchive)' to free up space." Condition="'$(TF_BUILD)' != ''"  />
    <Delete Files="$(DownloadedArchive)"  Condition="'$(TF_BUILD)' != ''" />

  </Target>

  <Target Name="CopyFilesFromArchive" DependsOnTargets="ValidateAndExtractArchives" Outputs="$(CopyToPackageSemaphore)">
    <Message Importance="High" Text="@(FilesFromArchive) -> %(FilesFromArchive.TargetFolder)" />
    <Copy SourceFiles="$(ExtractDirectory)\%(File.Identity)" DestinationFolder="$(MainPackageFolder)-%(File.PackagePart)\runtimes\$(Runtime)\native\" SkipUnchangedFiles="true" />
    <Copy SourceFiles="$(DownloadedLicenseFile)" DestinationFolder="$(MainPackageFolder)\" SkipUnchangedFiles="true"  />
    <WriteLinesToFile File="$(CopyToPackageSemaphore)" Lines="done" WriteOnlyWhenDifferent="true" />
  </Target>

  <!-- Define Build to do the work of downloading and copying assets -->
  <Target Name="Build" DependsOnTargets="CopyFilesFromArchive"  />

  <Target Name="Clean">
    <RemoveDir Directories="$(IntermediateOutputPath)" />
  </Target>
</Project>
