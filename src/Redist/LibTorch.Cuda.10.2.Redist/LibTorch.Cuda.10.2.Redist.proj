<Project>
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), Directory.Build.props))\Directory.Build.props" />

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
  </PropertyGroup>
  
  <ItemGroup>
    <LibtorchGPUConfig Include="windows"
      LibName="libtorch-win-shared-with-deps$(LibTorchDebug)"
      FileExtension=".zip" 
      FilesFromArchive= "libtorch\lib\asmjit.dll;
                        libtorch\lib\c10.dll;
                        libtorch\lib\c10_cuda.dll;
                        libtorch\lib\caffe2_detectron_ops_gpu.dll;
                        libtorch\lib\caffe2_module_test_dynamic.dll;
                        libtorch\lib\caffe2_nvrtc.dll;
                        libtorch\lib\cublas64_10.dll;
                        libtorch\lib\cublasLt64_10.dll;
                        libtorch\lib\cudart64_102.dll;
                        libtorch\lib\cudnn64_7.dll;
                        libtorch\lib\cufft64_10.dll;
                        libtorch\lib\cufftw64_10.dll;
                        libtorch\lib\curand64_10.dll;
                        libtorch\lib\cusparse64_10.dll;
                        libtorch\lib\fbgemm.dll;
                        libtorch\lib\libiomp5md.dll;
                        libtorch\lib\libiompstubs5md.dll;
                        libtorch\lib\nvrtc64_102_0.dll;
                        libtorch\lib\nvrtc-builtins64_102.dll;
                        libtorch\lib\nvToolsExt64_1.dll;
                        libtorch\lib\torch.dll;
                        libtorch\lib\torch_cpu.dll;
                        libtorch\lib\torch.dll;
                        libtorch\lib\torch_cuda.dll;
                        libtorch\lib\torch_global_deps.dll;"

      Runtime="win-x64"/>
    <LibtorchGPUConfig Include="linux" LibName="libtorch-shared-with-deps" FileExtension=".zip" 
      FilesFromArchive= "libtorch\lib\libc10.so;
                        libtorch\lib\libc10_cuda.so;
                        libtorch\lib\libc10d_cuda_test.so;
                        libtorch\lib\libcaffe2_detectron_ops_gpu.so;
                        libtorch\lib\libcaffe2_module_test_dynamic.so;
                        libtorch\lib\libcaffe2_nvrtc.so;
                        libtorch\lib\libcaffe2_observers.so;
                        libtorch\lib\libfbjni.so;
                        libtorch\lib\libnvrtc-builtins.so;
                        libtorch\lib\libpytorch_jni.so;
                        libtorch\lib\libshm.so;
                        libtorch\lib\libtorch.so;
                        libtorch\lib\libtorch_cpu.so;
                        libtorch\lib\libtorch_cuda.so;
                        libtorch\lib\libtorch_global_deps.so;
                        libtorch\lib\libtorch_python.so;
                        libtorch\lib\libcudart-80664282.so.10.2;
                        libtorch\lib\libnvrtc-08c4863f.so.10.2;
                        libtorch\lib\libgomp-7c85b1e2.so.1;
                        libtorch\lib\libnvToolsExt-3965bdd0.so.1;"

      Runtime="linux-x64" />

      <!-- No GPU support for Mac -->

    <AdditionalDownloadFile 
         Include="https://raw.githubusercontent.com/pytorch/pytorch/master/LICENSE" 
         DownloadFile="$(IntermediateOutputPath)LICENSE-LIBTORCH" />
  </ItemGroup>


  <Target Name="PrepareArchives">
    <ItemGroup>

      <LibtorchGPUArchive Condition="'$(PackageRid)' == '%(Runtime)'"
                         Include="@(LibtorchGPUConfig->'https://download.pytorch.org/libtorch/cu$(CudaVersion)/%(LibName)-$(LibtorchVersion)%(FileExtension)')" />
      <!-- set up metdata used by all targets -->
      <LibtorchGPUArchive DownloadFile="$(MassiveDownloadRoot)$(MSBuildProjectName)\%(FileName)%(Extension)"
                         DownloadShaFile="$(IntermediateOutputPath)%(FileName)%(Extension).sha"
                         ExtractDirectory="$(IntermediateOutputPath)%(FileName)"
                         ExtractSemaphore="$(IntermediateOutputPath)%(FileName)\.extracted"
                         LocalShaFile="$(MSBuildProjectDirectory)\%(FileName)%(Extension).sha"/>
    </ItemGroup>
  </Target>

  <UsingTask TaskName="DownloadFilesFromUrl" AssemblyFile="$(ToolsDir)Microsoft.DotNet.Build.Tasks.dll"/>

  <!-- Download libtorch for gpu -->
  <Target Name="DownloadArchives" 
          DependsOnTargets="PrepareArchives"
          Inputs="$(MSBuildProjectFile)"
          Outputs="@(LibtorchGPUArchive->'%(DownloadFile)');@(AdditionalDownloadFile->'%(DownloadFile)';">
    <MakeDir Directories="$(IntermediateOutputPath)" />
    <MakeDir Directories="$(MassiveDownloadRoot)" />
    <ItemGroup>
      <!-- DownloadFilesFromUrl requires Url metadata is set and ignores the identity of the item -->
      <_downloadFiles Include="@(LibtorchGPUArchive);@(AdditionalDownloadFile);" Url="%(Identity)" DestinationFile="%(DownloadFile)" />
    </ItemGroup>
    <Message Importance="High" Text="Downloading '%(_downloadFiles.Url)' to '%(_downloadFiles.DestinationFile)'." Condition="!Exists('%(_downloadFiles.DestinationFile)')" />
    <Message Importance="High" Text="Skipping download of '%(_downloadFiles.Url)' because  '%(_downloadFiles.DestinationFile)' exists." Condition="Exists('%(_downloadFiles.DestinationFile)')" />
    <DownloadFilesFromUrl Items="@(_downloadFiles)"  Condition="!Exists('%(_downloadFiles.DestinationFile)')" />
  </Target>
  
  <UsingTask TaskName="GenerateChecksums" AssemblyFile="$(ToolsDir)Microsoft.DotNet.Build.Tasks.dll"/>
  <UsingTask TaskName="ZipFileExtractToDirectory" AssemblyFile="$(ToolsDir)Microsoft.DotNet.Build.Tasks.dll"/>

  <!-- Validate and extract Archive for Libtorch -->
  <Target Name="ValidateAndExtractArchivesLibtorch" 
          DependsOnTargets="DownloadArchives"
          Inputs="@(LibtorchGPUArchive->'%(DownloadFile)')"
          Outputs="@(LibtorchGPUArchive->'%(ExtractSemaphore)')">
    <!-- GenerateChecksums writes a sha checksum to the file specified by DestinationPath metadata -->
    <ItemGroup>
      <_filesToCheckSum Include="@(LibtorchGPUArchive->'%(DownloadFile)')" DestinationPath="%(DownloadShaFile)" />
    </ItemGroup>
    <GenerateChecksums Items="@(_filesToCheckSum)" />

    <!-- If specified we'll update the checked in SHAs with the downloaded ones. -->
    <Copy Condition="'$(UpdateSHA)' == 'true'"
          SourceFiles="@(LibtorchGPUArchive->'%(DownloadShaFile)')"
          DestinationFiles="@(LibtorchGPUArchive->'%(LocalShaFile)')" />

    <Error Condition="!Exists('%(LibtorchGPUArchive.LocalShaFile)')" Text="SHA file '%(LibtorchGPUArchive.LocalShaFile)' does not exist.  Build with /p:UpdateSHA=true to save it." />

    <!-- Read in the SHAs as metadata on the archive items -->
    <ItemGroup>
      <LibtorchGPUArchive>
        <LocalSha>$([System.IO.File]::ReadAllText('%(LocalShaFile)'))</LocalSha>
        <DownloadSha>$([System.IO.File]::ReadAllText('%(DownloadShaFile)'))</DownloadSha>
      </LibtorchGPUArchive>
    </ItemGroup>
    <!-- Validate that the downloaded SHAs match the expected checked in SHAs -->
    <Error Condition="'%(LibtorchGPUArchive.LocalSha)' != '%(LibtorchGPUArchive.DownloadSha)'" Text="Downloaded file '%(LibtorchGPUArchive.DownloadFile)' has unexpected SHA.%0A  expected: %(_downloadedLibtorchGPUArchive.LocalSha)%0A  actual: %(_downloadedLibtorchGPUArchive.DownloadSha)%0ABuild with /p:UpdateSHA=true if you intentionally changed the URL and wish to update the SHAs, otherwise this could indicate an incomplete download or intercerpted URL and should be examined." />

    <!-- The archives are valid, lets extract them, ensuring an empty directory -->
    <RemoveDir Directories="@(LibtorchGPUArchive->'%(ExtractDirectory)')" />
    <MakeDir Directories="@(LibtorchGPUArchive->'%(ExtractDirectory)')" />
    <ZipFileExtractToDirectory Condition="'%(LibtorchGPUArchive.FileExtension)' == '.zip'"
                               SourceArchive="%(LibtorchGPUArchive.DownloadFile)"
                               DestinationDirectory="%(LibtorchGPUArchive.ExtractDirectory)"
                               OverwriteDestination="true" />

    <Message Importance="High" Condition="'%(LibtorchGPUArchive.FileExtension)' == '.tar.gz'" Text="Decompressing '%(LibtorchGPUArchive.DownloadFile)' to '%(LibtorchGPUArchive.ExtractDirectory)'." />
    <Exec Condition="'%(LibtorchGPUArchive.FileExtension)' == '.tar.gz'"
          WorkingDirectory="%(LibtorchGPUArchive.ExtractDirectory)"
          Command="tar -xzmf &quot;$([MSBuild]::MakeRelative('%(LibtorchGPUArchive.ExtractDirectory)', '%(LibtorchGPUArchive.DownloadFile)'))&quot;" />
    <WriteLinesToFile File="@(LibtorchGPUArchive->'%(ExtractSemaphore)')" Lines="done" WriteOnlyWhenDifferent="true" />
  </Target>

  <!-- Select the files we want to copy out of each archive. -->
  <Target Name="GetFilesFromArchive"
          DependsOnTargets="ValidateAndExtractArchivesLibtorch" >
    <ItemGroup>
      <!-- batch rather than transform so that we can split FilesFromArchive metadata -->
      <_fileFromArchive Include="%(LibtorchGPUArchive.FilesFromArchive)" ExtractDirectory="%(LibtorchGPUArchive.ExtractDirectory)" Runtime="%(LibtorchGPUArchive.Runtime)" />
      <_fileFromArchive DestinationFile="%(FileName)%(Extension)"/>
      <!-- rename the .so to .dylib since CORECLR's DLLImport convention requires dylib -->
      <!-- <_fileFromArchive Condition="'%(Runtime)' == 'osx-x64' AND '%(Extension)' == '.so'" DestinationFile="%(FileName).dylib" /> -->
      <_fileFromArchive PackagePath="runtimes\%(_fileFromArchive.Runtime)\native\%(_fileFromArchive.DestinationFile)" />

      <!-- LICENSE from the package is actually THIRD_PARTY_NOTICES-->
      <_fileFromArchive Condition="'%(DestinationFile)' == 'LICENSE-LIBTORCH'" PackagePath="THIRD_PARTY_NOTICES_LIBTORCH.txt" Runtime="" />

      <!-- copy to packaging location -->
      <FilesFromArchive Include="@(_fileFromArchive->'%(ExtractDirectory)\%(Identity)')" 
                        TargetPath="$(PackageAssetsPath)$(MSBuildProjectName)\%(PackagePath)" />
      <!-- include LICENSE that was downloaded from GitHub -->
      <FilesFromArchive Include="$(IntermediateOutputPath)\LICENSE-LIBTORCH"
                        TargetPath="$(PackageAssetsPath)$(MSBuildProjectName)\LICENSE-LIBTORCH.txt" />
    </ItemGroup>
  </Target>

  <Target Name="CopyFilesFromArchive"
          DependsOnTargets="GetFilesFromArchive">
    <Message Importance="High" Text="@(FilesFromArchive) -> %(FilesFromArchive.TargetPath)" />
    <Copy SourceFiles="@(FilesFromArchive)"
          DestinationFiles="@(FilesFromArchive->'%(TargetPath)')" />
  </Target>

  <!-- Define Build to do the work of downloading and copying assets -->
  <Target Name="Build"
          DependsOnTargets="CopyFilesFromArchive"  />

  <Target Name="Clean">
    <RemoveDir Directories="$(IntermediateOutputPath)" />
  </Target>
</Project>
