// Copyright (c) Microsoft Corporation and contributors.  All Rights Reserved.  See License.txt in the project root for license information.
#pragma once

#include "../Stdafx.h"

#include "torch/script.h"

#include "Utils.h"

// Copied from libtorch to share the type as an int8_t.
enum TypeKind : int8_t {
#define DEFINE_TYPE(T) T,
    C10_FORALL_TYPES(DEFINE_TYPE)
#undef DEFINE_TYPE
};

// API.

// Loads a TorchScript module from a file.
EXPORT_API(JITModule) THSJIT_loadModule(const char* filename);

// Gets the number of submodules contained into the source module.
EXPORT_API(long) THSJIT_getNumModules(const JITModule module);

// Gets the sub-module contained into the input wrapper with the given name.
EXPORT_API(JITModule) THSJIT_getModuleFromName(const JITModule module, const char* name);

// Returns the number of inputs expected by the input module.
EXPORT_API(int) THSJIT_getNumberOfInputs(const JITModule module);

// Returns the number of outputs generated by the input module.
EXPORT_API(int) THSJIT_getNumberOfOutputs(const JITModule module);

// Returns the type of the nth-input.
EXPORT_API(JITType) THSJIT_getInputType(const JITModule module, const int n);

// Returns the type of the nth-output.
EXPORT_API(JITType) THSJIT_getOutputType(const JITModule module, const int n);

// Forward pass over the input module using the input tensor.
EXPORT_API(Tensor) THSJIT_forward(const JITModule module, const Tensor * tensorPtrs, const int length);

// Disposes the module.
EXPORT_API(void) THSJIT_moduleDispose(const JITModule module);

// Disposes the type.
EXPORT_API(void) THSJIT_typeDispose(const JITType type);
