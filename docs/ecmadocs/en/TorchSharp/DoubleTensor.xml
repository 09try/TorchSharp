<Type Name="DoubleTensor" FullName="TorchSharp.DoubleTensor">
  <TypeSignature Language="C#" Value="public class DoubleTensor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DoubleTensor extends System.Object implements class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>TorchSharp</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
              Tensor of type Double.
            </summary>
    <remarks>
      <para>
                Use the default constructor to create an empty tensor, or invoke one of the
                constructors with one (1D), two (2D), three (3D), or four parameters (4D) to x
                create a tensor for the desired number of dimensions.
              </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DoubleTensor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
               Creates an empty tensor.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DoubleTensor (long size0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 size0) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="size0" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size0">Size for the first dimension.</param>
        <summary>
               Creates a 1D tensor of the specified size.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DoubleTensor (long size0, long size1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 size0, int64 size1) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="size0" Type="System.Int64" />
        <Parameter Name="size1" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size0">Size for the first dimension.</param>
        <param name="size1">Size for the second dimension.</param>
        <summary>
               Creates a 2D tensor of the specified size.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DoubleTensor (long size0, long size1, long size2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 size0, int64 size1, int64 size2) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="size0" Type="System.Int64" />
        <Parameter Name="size1" Type="System.Int64" />
        <Parameter Name="size2" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size0">Size for the first dimension.</param>
        <param name="size1">Size for the second dimension.</param>
        <param name="size2">Size for the third dimension.</param>
        <summary>
               Creates a 3D tensor of the specified size.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DoubleTensor (long size0, long size1, long size2, long size3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 size0, int64 size1, int64 size2, int64 size3) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="size0" Type="System.Int64" />
        <Parameter Name="size1" Type="System.Int64" />
        <Parameter Name="size2" Type="System.Int64" />
        <Parameter Name="size3" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size0">Size for the first dimension.</param>
        <param name="size1">Size for the second dimension.</param>
        <param name="size2">Size for the third dimension.</param>
        <param name="size3">Size for the fourth dimension.</param>
        <summary>
               Creates a 4D tensor of the specified size.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Abs ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Abs() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Abs of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Abs (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Abs(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Abs of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Acos ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Acos() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Acos of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Acos (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Acos(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Acos of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Add (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Add(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
              Performs the Add operation on each element of the tensor with the
              <see paramref="value" /> and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>
              If you want to avoid the allocation of a new tensor, you can use the 
              alternative method <see cref="M:PytorchSharp.Add(PytorchSharp.DoubleTensor, Double, PytorchSharp.Double)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static void Add (TorchSharp.DoubleTensor source, double value, TorchSharp.DoubleTensor result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Add(class TorchSharp.DoubleTensor source, float64 value, class TorchSharp.DoubleTensor result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.DoubleTensor" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="result" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="source">Source tensor on which the operation will take place.</param>
        <param name="value">The scalar value that the operation uses.</param>
        <param name="result">The tensor where the result will be placed</param>
        <summary>
              Performs the Add operation on each element of the source with the
              provided scalar.   The result tensor specified as the last parameters
              is resized to match the source.
            </summary>
        <remarks>
               For each element in the <see paramref="source" /> performs the Add operation
               with <see paramref="value" />.   The result is stored in the <see paramref="result" />
               tensor.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddBMM">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor AddBMM (double beta, double alpha, TorchSharp.DoubleTensor batch1, TorchSharp.DoubleTensor batch2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor AddBMM(float64 beta, float64 alpha, class TorchSharp.DoubleTensor batch1, class TorchSharp.DoubleTensor batch2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beta" Type="System.Double" />
        <Parameter Name="alpha" Type="System.Double" />
        <Parameter Name="batch1" Type="TorchSharp.DoubleTensor" />
        <Parameter Name="batch2" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="beta">Multiplier for this tensor (β).</param>
        <param name="alpha">Multiplier for batch1xbatch2 (α)</param>
        <param name="batch1">the first batch of matrices to be multiplied</param>
        <param name="batch2">the second batch of matrices to be multiplied</param>
        <summary>
              Performs AddBMM of the tensor with the provided 
              <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
            </summary>
        <returns>
              β mat+α (∑i=0bbatch1i@batch2i)
            </returns>
        <remarks>
            β mat+α (∑i=0bbatch1i@batch2i)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCDiv">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor AddCDiv (double value, TorchSharp.DoubleTensor src1, TorchSharp.DoubleTensor src2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor AddCDiv(float64 value, class TorchSharp.DoubleTensor src1, class TorchSharp.DoubleTensor src2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="src1" Type="TorchSharp.DoubleTensor" />
        <Parameter Name="src2" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="value">
        </param>
        <param name="src1">
        </param>
        <param name="src2">
        </param>
        <summary>
              Performs AddCDiv of the tensor with the provided 
              <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCMul">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor AddCMul (double value, TorchSharp.DoubleTensor src1, TorchSharp.DoubleTensor src2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor AddCMul(float64 value, class TorchSharp.DoubleTensor src1, class TorchSharp.DoubleTensor src2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="src1" Type="TorchSharp.DoubleTensor" />
        <Parameter Name="src2" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="value">
        </param>
        <param name="src1">
        </param>
        <param name="src2">
        </param>
        <summary>
              Performs AddCMul of the tensor with the provided 
              <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMM">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor AddMM (double beta, double alpha, TorchSharp.DoubleTensor mat1, TorchSharp.DoubleTensor mat2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor AddMM(float64 beta, float64 alpha, class TorchSharp.DoubleTensor mat1, class TorchSharp.DoubleTensor mat2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beta" Type="System.Double" />
        <Parameter Name="alpha" Type="System.Double" />
        <Parameter Name="mat1" Type="TorchSharp.DoubleTensor" />
        <Parameter Name="mat2" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="beta">Multiplier for this tensor (β).</param>
        <param name="alpha">Multiplier for mat1xmat2 (α)</param>
        <param name="mat1">First matrix to  be multiplied</param>
        <param name="mat2">Second matrix to  be multiplied</param>
        <summary>
              Performs AddMM of the tensor with the provided 
              <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
            </summary>
        <returns>
              β mat+α (mat1i@mat2i)
            </returns>
        <remarks>
            β mat+α (mat1i@mat2i)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMV">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor AddMV (double beta, double alpha, TorchSharp.DoubleTensor mat, TorchSharp.DoubleTensor vec);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor AddMV(float64 beta, float64 alpha, class TorchSharp.DoubleTensor mat, class TorchSharp.DoubleTensor vec) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beta" Type="System.Double" />
        <Parameter Name="alpha" Type="System.Double" />
        <Parameter Name="mat" Type="TorchSharp.DoubleTensor" />
        <Parameter Name="vec" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="beta">Multiplier for this tensor (β).</param>
        <param name="alpha">Multiplier for matxvec (α)</param>
        <param name="mat">Matrix to be multiplied</param>
        <param name="vec">Vector to be multiplied</param>
        <summary>
              Performs AddMV of the tensor with the provided 
              <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
            </summary>
        <returns>
              β tensor+α (mat@vec)
            </returns>
        <remarks>
            β tensor+α (mat@vec)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddR">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor AddR (double beta, double alpha, TorchSharp.DoubleTensor vec1, TorchSharp.DoubleTensor vec2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor AddR(float64 beta, float64 alpha, class TorchSharp.DoubleTensor vec1, class TorchSharp.DoubleTensor vec2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beta" Type="System.Double" />
        <Parameter Name="alpha" Type="System.Double" />
        <Parameter Name="vec1" Type="TorchSharp.DoubleTensor" />
        <Parameter Name="vec2" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="beta">Multiplier for this tensor (β).</param>
        <param name="alpha">Multiplier for vec1xvec2 (α)</param>
        <param name="vec1">the first vector of the outer product</param>
        <param name="vec2">the second vector of the outer product</param>
        <summary>
              Performs AddR of the tensor with the provided 
              <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
            </summary>
        <returns>
              β mat+α (vec1⊗vec2)
            </returns>
        <remarks>
            β mat+α (vec1⊗vec2)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddScaled">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor AddScaled (double value1, double value2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor AddScaled(float64 value1, float64 value2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value1" Type="System.Double" />
        <Parameter Name="value2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value1">
        </param>
        <param name="value2">
        </param>
        <summary>
              Performs an AddScaled of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ARange">
      <MemberSignature Language="C#" Value="public static TorchSharp.DoubleTensor ARange (double xmin, double xmax, double step);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class TorchSharp.DoubleTensor ARange(float64 xmin, float64 xmax, float64 step) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmin" Type="System.Double" />
        <Parameter Name="xmax" Type="System.Double" />
        <Parameter Name="step" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="xmin">The lower bound of the range.</param>
        <param name="xmax">The upper bound of the range.</param>
        <param name="step">The value step.</param>
        <summary>
              Create a range spanning from xmin to xmax, with 'step' between each value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Asin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Asin() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Asin of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Asin (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Asin(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Asin of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Atan ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Atan() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Atan of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Atan (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Atan(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Atan of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan2">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Atan2 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Atan2() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Atan2 of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan2">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Atan2 (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Atan2(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Atan2 of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BAddBMM">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor BAddBMM (double beta, double alpha, TorchSharp.DoubleTensor batch1, TorchSharp.DoubleTensor batch2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor BAddBMM(float64 beta, float64 alpha, class TorchSharp.DoubleTensor batch1, class TorchSharp.DoubleTensor batch2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beta" Type="System.Double" />
        <Parameter Name="alpha" Type="System.Double" />
        <Parameter Name="batch1" Type="TorchSharp.DoubleTensor" />
        <Parameter Name="batch2" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="beta">Multiplier for this tensor (β).</param>
        <param name="alpha">Multiplier for batch1xbatch2 (α)</param>
        <param name="batch1">the first batch of matrices to be multiplied</param>
        <param name="batch2">the second batch of matrices to be multiplied</param>
        <summary>
              Performs BAddBMM of the tensor with the provided 
              <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
            </summary>
        <returns>
              β mati+α (batch1i@batch2i)
            </returns>
        <remarks>
            β mati+α (batch1i@batch2i)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BHistc">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor BHistc (long nbins, double minvalue, double maxvalue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor BHistc(int64 nbins, float64 minvalue, float64 maxvalue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nbins" Type="System.Int64" />
        <Parameter Name="minvalue" Type="System.Double" />
        <Parameter Name="maxvalue" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="nbins">The number of bins in the output histogram.</param>
        <param name="minvalue">Only consider values equal to or greater than this.</param>
        <param name="maxvalue">Only consider values equal to or less than this.</param>
        <summary>
              Create a histogram of all tensor elements. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitAnd">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor BitAnd (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor BitAnd(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
              Performs the BitAnd operation on each element of the tensor with the
              <see paramref="value" /> and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>
              If you want to avoid the allocation of a new tensor, you can use the 
              alternative method <see cref="M:PytorchSharp.BitAnd(PytorchSharp.DoubleTensor, Double, PytorchSharp.Double)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitAnd">
      <MemberSignature Language="C#" Value="public static void BitAnd (TorchSharp.DoubleTensor source, double value, TorchSharp.DoubleTensor result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BitAnd(class TorchSharp.DoubleTensor source, float64 value, class TorchSharp.DoubleTensor result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.DoubleTensor" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="result" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="source">Source tensor on which the operation will take place.</param>
        <param name="value">The scalar value that the operation uses.</param>
        <param name="result">The tensor where the result will be placed</param>
        <summary>
              Performs the BitAnd operation on each element of the source with the
              provided scalar.   The result tensor specified as the last parameters
              is resized to match the source.
            </summary>
        <remarks>
               For each element in the <see paramref="source" /> performs the BitAnd operation
               with <see paramref="value" />.   The result is stored in the <see paramref="result" />
               tensor.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CAdd">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor CAdd (double value, TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor CAdd(float64 value, class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="src">To be added.</param>
        <summary>
              Performs the CAdd operation on each element of the tensor with the
              <see paramref="value" /> and returns a new tensor with the result.
              where the result is t[idx] + value * src[idx]
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CappedRandom">
      <MemberSignature Language="C#" Value="public void CappedRandom (TorchSharp.RandomGenerator source, long max);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CappedRandom(class TorchSharp.RandomGenerator source, int64 max) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.RandomGenerator" />
        <Parameter Name="max" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="source">The random generator source</param>
        <param name="max">The upper limit for the values to be generated</param>
        <summary>
             Populates the tensor with random values from 0 to max, using the provided random source generator.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cauchy">
      <MemberSignature Language="C#" Value="public void Cauchy (TorchSharp.RandomGenerator source, double median, double sigma);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Cauchy(class TorchSharp.RandomGenerator source, float64 median, float64 sigma) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.RandomGenerator" />
        <Parameter Name="median" Type="System.Double" />
        <Parameter Name="sigma" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="source">The random generator source</param>
        <param name="median">
        </param>
        <param name="sigma">
        </param>
        <summary>
              Fills the tensor with values according to a Cauchy-Lorentz distribution.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CBitAnd">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor CBitAnd (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor CBitAnd(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an CBitAnd of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CBitOr">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor CBitOr (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor CBitOr(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an CBitOr of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CBitXor">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor CBitXor (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor CBitXor(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an CBitXor of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CDiv">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor CDiv (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor CDiv(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an CDiv of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceil">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Ceil ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Ceil() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Ceil of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceil">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Ceil (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Ceil(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Ceil of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CFMod">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor CFMod (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor CFMod(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an CFMod of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="cinv">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor cinv ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor cinv() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the cinv of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="cinv">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor cinv (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor cinv(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the cinv of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Clamp (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Clamp(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
              Performs the Clamp operation on each element of the tensor with the
              <see paramref="value" /> and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>
              If you want to avoid the allocation of a new tensor, you can use the 
              alternative method <see cref="M:PytorchSharp.Clamp(PytorchSharp.DoubleTensor, Double, PytorchSharp.Double)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Clamp (double value1, double value2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Clamp(float64 value1, float64 value2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value1" Type="System.Double" />
        <Parameter Name="value2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value1">
        </param>
        <param name="value2">
        </param>
        <summary>
              Performs an Clamp of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static void Clamp (TorchSharp.DoubleTensor source, double value, TorchSharp.DoubleTensor result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Clamp(class TorchSharp.DoubleTensor source, float64 value, class TorchSharp.DoubleTensor result) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.DoubleTensor" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="result" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="source">Source tensor on which the operation will take place.</param>
        <param name="value">The scalar value that the operation uses.</param>
        <param name="result">The tensor where the result will be placed</param>
        <summary>
              Performs the Clamp operation on each element of the source with the
              provided scalar.   The result tensor specified as the last parameters
              is resized to match the source.
            </summary>
        <remarks>
               For each element in the <see paramref="source" /> performs the Clamp operation
               with <see paramref="value" />.   The result is stored in the <see paramref="result" />
               tensor.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClampedRandom">
      <MemberSignature Language="C#" Value="public void ClampedRandom (TorchSharp.RandomGenerator source, long min, long max);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClampedRandom(class TorchSharp.RandomGenerator source, int64 min, int64 max) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.RandomGenerator" />
        <Parameter Name="min" Type="System.Int64" />
        <Parameter Name="max" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="source">The random generator source</param>
        <param name="min">The lower limit for the values to be generated</param>
        <param name="max">The upper limit for the values to be generated</param>
        <summary>
             Populates the tensor with random values from min to max, using the provided random source generator.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a deep clone of the tensor
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CLShift">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor CLShift (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor CLShift(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an CLShift of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CMax">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor CMax (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor CMax(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an CMax of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CMaxValue">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor CMaxValue (double src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor CMaxValue(float64 src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an CMaxValue of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CMin">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor CMin (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor CMin(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an CMin of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CMinValue">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor CMinValue (double src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor CMinValue(float64 src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an CMinValue of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CMul">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor CMul (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor CMul(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an CMul of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Concatenate">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Concatenate (TorchSharp.DoubleTensor other, int dimension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Concatenate(class TorchSharp.DoubleTensor other, int32 dimension) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="TorchSharp.DoubleTensor" />
        <Parameter Name="dimension" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="other">The second tensor.</param>
        <param name="dimension">The dimension along which to concatenate.</param>
        <summary>
              Concatenate tensors along the given dimesion.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public void Copy (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Copy(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">Tensor to copy the data from.</param>
        <summary>
              Copies the elements of a tensor into the original tensor. 
              The shape of the tensors must exactly match or an error will be thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyByte">
      <MemberSignature Language="C#" Value="public void CopyByte (TorchSharp.ByteTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyByte(class TorchSharp.ByteTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.ByteTensor" />
      </Parameters>
      <Docs>
        <param name="src">Tensor to copy the data from.</param>
        <summary>
              Copies the elements of a byte tensor into the original tensor. 
              The shape of the tensors must exactly match or an error will be thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyDouble">
      <MemberSignature Language="C#" Value="public void CopyDouble (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyDouble(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">Tensor to copy the data from.</param>
        <summary>
              Copies the elements of a double tensor into the original tensor. 
              The shape of the tensors must exactly match or an error will be thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyFloat">
      <MemberSignature Language="C#" Value="public void CopyFloat (TorchSharp.FloatTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFloat(class TorchSharp.FloatTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.FloatTensor" />
      </Parameters>
      <Docs>
        <param name="src">Tensor to copy the data from.</param>
        <summary>
              Copies the elements of a float tensor into the original tensor. 
              The shape of the tensors must exactly match or an error will be thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyInt">
      <MemberSignature Language="C#" Value="public void CopyInt (TorchSharp.IntTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyInt(class TorchSharp.IntTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.IntTensor" />
      </Parameters>
      <Docs>
        <param name="src">Tensor to copy the data from.</param>
        <summary>
              Copies the elements of a int tensor into the original tensor. 
              The shape of the tensors must exactly match or an error will be thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyLong">
      <MemberSignature Language="C#" Value="public void CopyLong (TorchSharp.LongTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyLong(class TorchSharp.LongTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.LongTensor" />
      </Parameters>
      <Docs>
        <param name="src">Tensor to copy the data from.</param>
        <summary>
              Copies the elements of a long tensor into the original tensor. 
              The shape of the tensors must exactly match or an error will be thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyShort">
      <MemberSignature Language="C#" Value="public void CopyShort (TorchSharp.ShortTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyShort(class TorchSharp.ShortTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.ShortTensor" />
      </Parameters>
      <Docs>
        <param name="src">Tensor to copy the data from.</param>
        <summary>
              Copies the elements of a short tensor into the original tensor. 
              The shape of the tensors must exactly match or an error will be thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cos">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Cos ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Cos() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Cos of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cos">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Cos (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Cos(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Cos of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Cosh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Cosh() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Cosh of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Cosh (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Cosh(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Cosh of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CPow">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor CPow (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor CPow(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an CPow of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CRemainder">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor CRemainder (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor CRemainder(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an CRemainder of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CrossProduct">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor CrossProduct (TorchSharp.DoubleTensor other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor CrossProduct(class TorchSharp.DoubleTensor other) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="other">The right-hand-side tensor.</param>
        <summary>
              Computes the cross product of two tensors. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CSub">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor CSub (double value, TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor CSub(float64 value, class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="src">To be added.</param>
        <summary>
              Performs the CSub operation on each element of the tensor with the
              <see paramref="value" /> and returns a new tensor with the result.
              where the result is t[idx] + value * src[idx]
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CumulativeProd">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor CumulativeProd (int dimension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor CumulativeProd(int32 dimension) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dimension">The dimension to process along.</param>
        <summary>
              Computes the cumulative product of all the elements of the tensor along the given dimension. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CumulativeSum">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor CumulativeSum (int dimension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor CumulativeSum(int32 dimension) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dimension">The dimension to process along.</param>
        <summary>
              Computes the cumulative sum of all the elements of the tensor along the given dimension. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public double* Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64* Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double*</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Returns a pointer to the unmanaged data managed by this tensor.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Diagonal">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Diagonal (int k);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Diagonal(int32 k) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="k" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="k">
        </param>
        <summary>
              Gets the diagonal of the tensor. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Digamma">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Digamma ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Digamma() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Digamma of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Digamma">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Digamma (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Digamma(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Digamma of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dimensions">
      <MemberSignature Language="C#" Value="public int Dimensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Dimensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Returns the number of dimensions for this tensor
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DirichletGrad">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor DirichletGrad (TorchSharp.DoubleTensor alpha, TorchSharp.DoubleTensor total);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor DirichletGrad(class TorchSharp.DoubleTensor alpha, class TorchSharp.DoubleTensor total) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alpha" Type="TorchSharp.DoubleTensor" />
        <Parameter Name="total" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="alpha">
        </param>
        <param name="total">
        </param>
        <summary>
               DirichletGrad
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Releases the tensor and its associated data.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>
              Implements the .NET Dispose pattern.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dist">
      <MemberSignature Language="C#" Value="public double Dist (TorchSharp.DoubleTensor other, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 Dist(class TorchSharp.DoubleTensor other, float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="TorchSharp.DoubleTensor" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="other">The other tensor.</param>
        <param name="value">
        </param>
        <summary>
              Compute the dist of all tensor elements along the given dimension. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Div">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Div (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Div(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
              Performs the Div operation on each element of the tensor with the
              <see paramref="value" /> and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>
              If you want to avoid the allocation of a new tensor, you can use the 
              alternative method <see cref="M:PytorchSharp.Div(PytorchSharp.DoubleTensor, Double, PytorchSharp.Double)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Div">
      <MemberSignature Language="C#" Value="public static void Div (TorchSharp.DoubleTensor source, double value, TorchSharp.DoubleTensor result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Div(class TorchSharp.DoubleTensor source, float64 value, class TorchSharp.DoubleTensor result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.DoubleTensor" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="result" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="source">Source tensor on which the operation will take place.</param>
        <param name="value">The scalar value that the operation uses.</param>
        <param name="result">The tensor where the result will be placed</param>
        <summary>
              Performs the Div operation on each element of the source with the
              provided scalar.   The result tensor specified as the last parameters
              is resized to match the source.
            </summary>
        <remarks>
               For each element in the <see paramref="source" /> performs the Div operation
               with <see paramref="value" />.   The result is stored in the <see paramref="result" />
               tensor.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dot">
      <MemberSignature Language="C#" Value="public double Dot (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 Dot(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Returns the tensor product between this tensor and the provided one
            </summary>
        <returns>
              The dot product
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqTensor">
      <MemberSignature Language="C#" Value="public TorchSharp.ByteTensor EqTensor (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.ByteTensor EqTensor(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.ByteTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an EqTensor of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqTensorT">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor EqTensorT (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor EqTensorT(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an EqTensorT of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equal">
      <MemberSignature Language="C#" Value="public bool Equal (TorchSharp.DoubleTensor other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equal(class TorchSharp.DoubleTensor other) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="other">The right-hand-side operand.</param>
        <summary>
              Compare the tensor with another for complete equality.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqValue">
      <MemberSignature Language="C#" Value="public TorchSharp.ByteTensor EqValue (double src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.ByteTensor EqValue(float64 src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.ByteTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an EqValue of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqValueT">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor EqValueT (double src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor EqValueT(float64 src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an EqValueT of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Erf">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Erf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Erf() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Erf of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Erf">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Erf (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Erf(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Erf of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Erfc">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Erfc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Erfc() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Erfc of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Erfc">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Erfc (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Erfc(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Erfc of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Erfinv">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Erfinv ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Erfinv() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Erfinv of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Erfinv">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Erfinv (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Erfinv(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Erfinv of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exp">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Exp ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Exp() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Exp of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exp">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Exp (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Exp(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Exp of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expm1">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Expm1 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Expm1() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Expm1 of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expm1">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Expm1 (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Expm1(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Expm1 of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exponential">
      <MemberSignature Language="C#" Value="public void Exponential (TorchSharp.RandomGenerator source, double lambda);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Exponential(class TorchSharp.RandomGenerator source, float64 lambda) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.RandomGenerator" />
        <Parameter Name="lambda" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="source">The random generator source</param>
        <param name="lambda">
        </param>
        <summary>
              Fills the tensor with values according to a exponential distribution.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Eye">
      <MemberSignature Language="C#" Value="public static TorchSharp.DoubleTensor Eye (long m, long n);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class TorchSharp.DoubleTensor Eye(int64 m, int64 n) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Int64" />
        <Parameter Name="n" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="m">
        </param>
        <param name="n">
        </param>
        <summary>
              Eye. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public void Fill (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Fill(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
             Fills the tensor with the specified value
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~DoubleTensor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
             Finalizer for ~DoubleTensor
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Floor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Floor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Floor of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Floor (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Floor(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Floor of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fmod">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Fmod (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Fmod(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
              Performs the Fmod operation on each element of the tensor with the
              <see paramref="value" /> and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>
              If you want to avoid the allocation of a new tensor, you can use the 
              alternative method <see cref="M:PytorchSharp.Fmod(PytorchSharp.DoubleTensor, Double, PytorchSharp.Double)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fmod">
      <MemberSignature Language="C#" Value="public static void Fmod (TorchSharp.DoubleTensor source, double value, TorchSharp.DoubleTensor result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fmod(class TorchSharp.DoubleTensor source, float64 value, class TorchSharp.DoubleTensor result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.DoubleTensor" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="result" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="source">Source tensor on which the operation will take place.</param>
        <param name="value">The scalar value that the operation uses.</param>
        <param name="result">The tensor where the result will be placed</param>
        <summary>
              Performs the Fmod operation on each element of the source with the
              provided scalar.   The result tensor specified as the last parameters
              is resized to match the source.
            </summary>
        <remarks>
               For each element in the <see paramref="source" /> performs the Fmod operation
               with <see paramref="value" />.   The result is stored in the <see paramref="result" />
               tensor.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Frac">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Frac ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Frac() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Frac of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Frac">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Frac (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Frac(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Frac of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gather">
      <MemberSignature Language="C#" Value="public void Gather (TorchSharp.DoubleTensor src, int dim, TorchSharp.LongTensor index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Gather(class TorchSharp.DoubleTensor src, int32 dim, class TorchSharp.LongTensor index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
        <Parameter Name="dim" Type="System.Int32" />
        <Parameter Name="index" Type="TorchSharp.LongTensor" />
      </Parameters>
      <Docs>
        <param name="src">
        </param>
        <param name="dim">
        </param>
        <param name="index">Indices of entries to copy.</param>
        <summary>
              Gather
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Geometric">
      <MemberSignature Language="C#" Value="public void Geometric (TorchSharp.RandomGenerator source, double p);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Geometric(class TorchSharp.RandomGenerator source, float64 p) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.RandomGenerator" />
        <Parameter Name="p" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="source">The random generator source</param>
        <param name="p">
        </param>
        <summary>
             Populates the tensor with random values from 0 to n, using the provided random source generator.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GeTensor">
      <MemberSignature Language="C#" Value="public TorchSharp.ByteTensor GeTensor (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.ByteTensor GeTensor(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.ByteTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an GeTensor of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GeTensorT">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor GeTensorT (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor GeTensorT(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an GeTensorT of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTensorDimension">
      <MemberSignature Language="C#" Value="public long GetTensorDimension (int dim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 GetTensorDimension(int32 dim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dim" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dim">To be added.</param>
        <summary>
             Retrieves the size of the specified dimension in the tensor.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTensorStride">
      <MemberSignature Language="C#" Value="public long GetTensorStride (int dim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 GetTensorStride(int32 dim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dim" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dim">To be added.</param>
        <summary>
             Retrieves the stride of the specified dimension in the tensor.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GeValue">
      <MemberSignature Language="C#" Value="public TorchSharp.ByteTensor GeValue (double src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.ByteTensor GeValue(float64 src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.ByteTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an GeValue of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GeValueT">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor GeValueT (double src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor GeValueT(float64 src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an GeValueT of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GtTensor">
      <MemberSignature Language="C#" Value="public TorchSharp.ByteTensor GtTensor (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.ByteTensor GtTensor(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.ByteTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an GtTensor of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GtTensorT">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor GtTensorT (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor GtTensorT(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an GtTensorT of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GtValue">
      <MemberSignature Language="C#" Value="public TorchSharp.ByteTensor GtValue (double src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.ByteTensor GtValue(float64 src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.ByteTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an GtValue of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GtValueT">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor GtValueT (double src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor GtValueT(float64 src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an GtValueT of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Histc">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Histc (long nbins, double minvalue, double maxvalue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Histc(int64 nbins, float64 minvalue, float64 maxvalue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nbins" Type="System.Int64" />
        <Parameter Name="minvalue" Type="System.Double" />
        <Parameter Name="maxvalue" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="nbins">The number of bins in the output histogram.</param>
        <param name="minvalue">Only consider values equal to or greater than this.</param>
        <param name="maxvalue">Only consider values equal to or less than this.</param>
        <summary>
              Create a histogram of all tensor elements. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexAdd">
      <MemberSignature Language="C#" Value="public void IndexAdd (int dim, TorchSharp.LongTensor index, TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IndexAdd(int32 dim, class TorchSharp.LongTensor index, class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dim" Type="System.Int32" />
        <Parameter Name="index" Type="TorchSharp.LongTensor" />
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="dim">Dimension to select for the add</param>
        <param name="index">Entries to copy</param>
        <param name="src">Tensor to copy the data from.</param>
        <summary>
              Adds the elements of tensor into the original tensor by selecting the indices in the order 
              given in index. The shape of tensor must exactly match the elements indexed or an error will be thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexCopy">
      <MemberSignature Language="C#" Value="public void IndexCopy (int dim, TorchSharp.LongTensor index, TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IndexCopy(int32 dim, class TorchSharp.LongTensor index, class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dim" Type="System.Int32" />
        <Parameter Name="index" Type="TorchSharp.LongTensor" />
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="dim">Dimension to select for the copy</param>
        <param name="index">Entries to copy</param>
        <param name="src">Tensor to copy the data from.</param>
        <summary>
              Copies the elements of tensor into the original tensor by selecting the indices in the order 
              given in index. The shape of tensor must exactly match the elements indexed or an error will be thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexFill">
      <MemberSignature Language="C#" Value="public void IndexFill (int dim, TorchSharp.LongTensor index, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IndexFill(int32 dim, class TorchSharp.LongTensor index, float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dim" Type="System.Int32" />
        <Parameter Name="index" Type="TorchSharp.LongTensor" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="dim">Dimension to select for the fill</param>
        <param name="index">Entries to copy</param>
        <param name="value">The value to write.</param>
        <summary>
              Uses the given value to overwrite the original tensor by selecting the indices in the order 
              given in index. The shape of tensor must exactly match the elements indexed or an error will be thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexSelect">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor IndexSelect (int dim, TorchSharp.LongTensor index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor IndexSelect(int32 dim, class TorchSharp.LongTensor index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dim" Type="System.Int32" />
        <Parameter Name="index" Type="TorchSharp.LongTensor" />
      </Parameters>
      <Docs>
        <param name="dim">Dimension to select</param>
        <param name="index">Entries to extract</param>
        <summary>
              Returns a new Tensor which indexes the original Tensor along dimension dim
              using the entries in index.  The returned Tensor has the same number of dimensions as the 
              original Tensor. The returned Tensor does not use the same storage as the original Tensor.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public double this[long x0] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Item(int64)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x0" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="x0">Index to access.</param>
        <summary>
              Access to element at the specified position in the tensor
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public double this[long x0, long x1] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Item(int64, int64)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x0" Type="System.Int64" />
        <Parameter Name="x1" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="x0">Index in the first dimension to access.</param>
        <param name="x1">Index in the second dimension to access.</param>
        <summary>
              Access to element at the specified position in the tensor
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public double this[long x0, long x1, long x2] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Item(int64, int64, int64)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x0" Type="System.Int64" />
        <Parameter Name="x1" Type="System.Int64" />
        <Parameter Name="x2" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="x0">Index in the first dimension to access.</param>
        <param name="x1">Index in the second dimension to access.</param>
        <param name="x2">Index in the third dimension to access.</param>
        <summary>
              Access to element at the specified position in the tensor
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public double this[long x0, long x1, long x2, long x3] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Item(int64, int64, int64, int64)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x0" Type="System.Int64" />
        <Parameter Name="x1" Type="System.Int64" />
        <Parameter Name="x2" Type="System.Int64" />
        <Parameter Name="x3" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="x0">Index in the first dimension to access.</param>
        <param name="x1">Index in the second dimension to access.</param>
        <param name="x2">Index in the third dimension to access.</param>
        <param name="x3">Index in the fourth dimension to access.</param>
        <summary>
              Access to element at the specified position in the tensor
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KthValue">
      <MemberSignature Language="C#" Value="public Tuple&lt;TorchSharp.DoubleTensor,TorchSharp.LongTensor&gt; KthValue (long k, int dimension, bool keepdim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Tuple`2&lt;class TorchSharp.DoubleTensor, class TorchSharp.LongTensor&gt; KthValue(int64 k, int32 dimension, bool keepdim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;TorchSharp.DoubleTensor,TorchSharp.LongTensor&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="k" Type="System.Int64" />
        <Parameter Name="dimension" Type="System.Int32" />
        <Parameter Name="keepdim" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="k">The value for 'k' in 'kth'.</param>
        <param name="dimension">The dimension to process along.</param>
        <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
        <summary>
              Computes the kth value of all the elements of the tensor along the given dimension. 
            </summary>
        <returns>A tuple containing the values and indices of the kth element of each dimension.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LERP">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor LERP (TorchSharp.DoubleTensor other, double weight);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor LERP(class TorchSharp.DoubleTensor other, float64 weight) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="TorchSharp.DoubleTensor" />
        <Parameter Name="weight" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="other">The right-hand-side operand.</param>
        <param name="weight">
        </param>
        <summary>
              LERP
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeTensor">
      <MemberSignature Language="C#" Value="public TorchSharp.ByteTensor LeTensor (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.ByteTensor LeTensor(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.ByteTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an LeTensor of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeTensorT">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor LeTensorT (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor LeTensorT(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an LeTensorT of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeValue">
      <MemberSignature Language="C#" Value="public TorchSharp.ByteTensor LeValue (double src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.ByteTensor LeValue(float64 src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.ByteTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an LeValue of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeValueT">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor LeValueT (double src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor LeValueT(float64 src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an LeValueT of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lgamma">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Lgamma ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Lgamma() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Lgamma of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lgamma">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Lgamma (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Lgamma(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Lgamma of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Linspace">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Linspace (double a, double b, long n);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Linspace(float64 a, float64 b, int64 n) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
        <Parameter Name="b" Type="System.Double" />
        <Parameter Name="n" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="a">
        </param>
        <param name="b">
        </param>
        <param name="n">
        </param>
        <summary>
              Performs Linspace of the tensor with the provided 
              <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Log ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Log() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Log of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Log (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Log(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Log of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Log10 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Log10() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Log10 of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Log10 (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Log10(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Log10 of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log1p">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Log1p ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Log1p() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Log1p of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log1p">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Log1p (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Log1p(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Log1p of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log2">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Log2 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Log2() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Log2 of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log2">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Log2 (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Log2(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Log2 of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNormal">
      <MemberSignature Language="C#" Value="public void LogNormal (TorchSharp.RandomGenerator source, double mean, double stdv);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LogNormal(class TorchSharp.RandomGenerator source, float64 mean, float64 stdv) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.RandomGenerator" />
        <Parameter Name="mean" Type="System.Double" />
        <Parameter Name="stdv" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="source">The random generator source</param>
        <param name="mean">The mean of the distribution.</param>
        <param name="stdv">The standard deviation of the distribution.</param>
        <summary>
              Fills the tensor with values according to a log-normal distribution.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Logspace">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Logspace (double a, double b, long n);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Logspace(float64 a, float64 b, int64 n) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
        <Parameter Name="b" Type="System.Double" />
        <Parameter Name="n" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="a">
        </param>
        <param name="b">
        </param>
        <param name="n">
        </param>
        <summary>
              Performs Logspace of the tensor with the provided 
              <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LShift">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor LShift (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor LShift(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
              Performs the LShift operation on each element of the tensor with the
              <see paramref="value" /> and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>
              If you want to avoid the allocation of a new tensor, you can use the 
              alternative method <see cref="M:PytorchSharp.LShift(PytorchSharp.DoubleTensor, Double, PytorchSharp.Double)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LShift">
      <MemberSignature Language="C#" Value="public static void LShift (TorchSharp.DoubleTensor source, double value, TorchSharp.DoubleTensor result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LShift(class TorchSharp.DoubleTensor source, float64 value, class TorchSharp.DoubleTensor result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.DoubleTensor" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="result" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="source">Source tensor on which the operation will take place.</param>
        <param name="value">The scalar value that the operation uses.</param>
        <param name="result">The tensor where the result will be placed</param>
        <summary>
              Performs the LShift operation on each element of the source with the
              provided scalar.   The result tensor specified as the last parameters
              is resized to match the source.
            </summary>
        <remarks>
               For each element in the <see paramref="source" /> performs the LShift operation
               with <see paramref="value" />.   The result is stored in the <see paramref="result" />
               tensor.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LtTensor">
      <MemberSignature Language="C#" Value="public TorchSharp.ByteTensor LtTensor (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.ByteTensor LtTensor(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.ByteTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an LtTensor of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LtTensorT">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor LtTensorT (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor LtTensorT(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an LtTensorT of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LtValue">
      <MemberSignature Language="C#" Value="public TorchSharp.ByteTensor LtValue (double src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.ByteTensor LtValue(float64 src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.ByteTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an LtValue of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LtValueT">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor LtValueT (double src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor LtValueT(float64 src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an LtValueT of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaskedCopy">
      <MemberSignature Language="C#" Value="public void MaskedCopy (TorchSharp.ByteTensor mask, TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MaskedCopy(class TorchSharp.ByteTensor mask, class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mask" Type="TorchSharp.ByteTensor" />
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="mask">A byte tensor with values 0 or 1 indicating the locations where in the destination the value should be filled.</param>
        <param name="src">The source tensor.</param>
        <summary>
             Copies elements from the source tensor to the locations indicated by the mask.
            </summary>
        <remarks>
             There must be at least as many elements in the source tensor as there are 1s in the mask.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaskedFill">
      <MemberSignature Language="C#" Value="public void MaskedFill (TorchSharp.ByteTensor mask, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MaskedFill(class TorchSharp.ByteTensor mask, float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mask" Type="TorchSharp.ByteTensor" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="mask">A byte tensor with values 0 or 1 indicating the locations where the value should be filled.</param>
        <param name="value">The value to write at the indicated locations.</param>
        <summary>
             Fills the tensor with the specified value at the locations indicated by the mask.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaskedSelect">
      <MemberSignature Language="C#" Value="public void MaskedSelect (TorchSharp.ByteTensor mask, TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MaskedSelect(class TorchSharp.ByteTensor mask, class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mask" Type="TorchSharp.ByteTensor" />
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="mask">A byte tensor with values 0 or 1 indicating the locations where in the source the value should be fetched.</param>
        <param name="src">The source tensor.</param>
        <summary>
             Copies elements from the source tensor at the locations indicated by the mask.
            </summary>
        <remarks>
             There will be as many elements in the tensor as there are 1s in the mask.
             There must be at least as many elements in the source tensor as there are 1s in the mask.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Match (TorchSharp.DoubleTensor m2, double gain);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Match(class TorchSharp.DoubleTensor m2, float64 gain) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m2" Type="TorchSharp.DoubleTensor" />
        <Parameter Name="gain" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="m2">
        </param>
        <param name="gain">
        </param>
        <summary>
              Match
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public Tuple&lt;TorchSharp.DoubleTensor,TorchSharp.LongTensor&gt; Max (int dimension, bool keepdim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Tuple`2&lt;class TorchSharp.DoubleTensor, class TorchSharp.LongTensor&gt; Max(int32 dimension, bool keepdim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;TorchSharp.DoubleTensor,TorchSharp.LongTensor&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
        <Parameter Name="keepdim" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dimension">The dimension to process along.</param>
        <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
        <summary>
              Computes the max of all the elements of the tensor along the given dimension. 
            </summary>
        <returns>A tuple containing the values and indices of the resulting elements.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxAll">
      <MemberSignature Language="C#" Value="public double MaxAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 MaxAll() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns the maximum value of the elements in the tensor.
            </summary>
        <returns>
              The maximum value of the tensor.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Mean">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Mean (int dimension, bool keepdim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Mean(int32 dimension, bool keepdim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
        <Parameter Name="keepdim" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dimension">The dimension to process along.</param>
        <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
        <summary>
              Compute the mean of all tensor elements along the given dimension. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MeanAll">
      <MemberSignature Language="C#" Value="public double MeanAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 MeanAll() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Compute the mean of all tensor elements. 
            </summary>
        <returns>
              The mean of the tensor.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Median">
      <MemberSignature Language="C#" Value="public Tuple&lt;TorchSharp.DoubleTensor,TorchSharp.LongTensor&gt; Median (int dimension, bool keepdim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Tuple`2&lt;class TorchSharp.DoubleTensor, class TorchSharp.LongTensor&gt; Median(int32 dimension, bool keepdim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;TorchSharp.DoubleTensor,TorchSharp.LongTensor&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
        <Parameter Name="keepdim" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dimension">The dimension to process along.</param>
        <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
        <summary>
              Computes the median of all the elements of the tensor along the given dimension. 
            </summary>
        <returns>A tuple containing the values and indices of the resulting elements.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MedianAll">
      <MemberSignature Language="C#" Value="public double MedianAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 MedianAll() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns the median of the elements in the tensor.
            </summary>
        <returns>
              The median of the tensor.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public Tuple&lt;TorchSharp.DoubleTensor,TorchSharp.LongTensor&gt; Min (int dimension, bool keepdim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Tuple`2&lt;class TorchSharp.DoubleTensor, class TorchSharp.LongTensor&gt; Min(int32 dimension, bool keepdim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;TorchSharp.DoubleTensor,TorchSharp.LongTensor&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
        <Parameter Name="keepdim" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dimension">The dimension to process along.</param>
        <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
        <summary>
              Computes the min of all the elements of the tensor along the given dimension. 
            </summary>
        <returns>A tuple containing the values and indices of the resulting elements.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinAll">
      <MemberSignature Language="C#" Value="public double MinAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 MinAll() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns the minimum value of the elements in the tensor.
            </summary>
        <returns>
              The minimum value of the tensor.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public Tuple&lt;TorchSharp.DoubleTensor,TorchSharp.LongTensor&gt; Mode (int dimension, bool keepdim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Tuple`2&lt;class TorchSharp.DoubleTensor, class TorchSharp.LongTensor&gt; Mode(int32 dimension, bool keepdim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;TorchSharp.DoubleTensor,TorchSharp.LongTensor&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
        <Parameter Name="keepdim" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dimension">The dimension to process along.</param>
        <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
        <summary>
              Computes the mode of all the elements of the tensor along the given dimension. 
            </summary>
        <returns>A tuple containing the values and indices of the resulting elements.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Mul (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Mul(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
              Performs the Mul operation on each element of the tensor with the
              <see paramref="value" /> and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>
              If you want to avoid the allocation of a new tensor, you can use the 
              alternative method <see cref="M:PytorchSharp.Mul(PytorchSharp.DoubleTensor, Double, PytorchSharp.Double)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul">
      <MemberSignature Language="C#" Value="public static void Mul (TorchSharp.DoubleTensor source, double value, TorchSharp.DoubleTensor result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Mul(class TorchSharp.DoubleTensor source, float64 value, class TorchSharp.DoubleTensor result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.DoubleTensor" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="result" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="source">Source tensor on which the operation will take place.</param>
        <param name="value">The scalar value that the operation uses.</param>
        <param name="result">The tensor where the result will be placed</param>
        <summary>
              Performs the Mul operation on each element of the source with the
              provided scalar.   The result tensor specified as the last parameters
              is resized to match the source.
            </summary>
        <remarks>
               For each element in the <see paramref="source" /> performs the Mul operation
               with <see paramref="value" />.   The result is stored in the <see paramref="result" />
               tensor.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Multinomial">
      <MemberSignature Language="C#" Value="public void Multinomial (TorchSharp.RandomGenerator source, TorchSharp.DoubleTensor prob_dist, int n_sample, int with_replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Multinomial(class TorchSharp.RandomGenerator source, class TorchSharp.DoubleTensor prob_dist, int32 n_sample, int32 with_replacement) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.RandomGenerator" />
        <Parameter Name="prob_dist" Type="TorchSharp.DoubleTensor" />
        <Parameter Name="n_sample" Type="System.Int32" />
        <Parameter Name="with_replacement" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">The random generator source</param>
        <param name="prob_dist">The probability for each bucket.</param>
        <param name="n_sample">The number of samples to generate.</param>
        <param name="with_replacement">
        </param>
        <summary>
              Fills the tensor with values according to a multinomial distribution.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Narrow">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Narrow (int dim, long firstIndex, long size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Narrow(int32 dim, int64 firstIndex, int64 size) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dim" Type="System.Int32" />
        <Parameter Name="firstIndex" Type="System.Int64" />
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dim">The dimension to narrow</param>
        <param name="firstIndex">Initial index to narrow</param>
        <param name="size">Number of elements</param>
        <summary>
            Returns a new Tensor which is a narrowed version of the current one: the dimension dim is narrowed from firstIndexto firstIndex+size-1.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="neg">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor neg ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor neg() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the neg of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="neg">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor neg (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor neg(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the neg of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NeTensor">
      <MemberSignature Language="C#" Value="public TorchSharp.ByteTensor NeTensor (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.ByteTensor NeTensor(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.ByteTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an NeTensor of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NeTensorT">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor NeTensorT (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor NeTensorT(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an NeTensorT of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NeValue">
      <MemberSignature Language="C#" Value="public TorchSharp.ByteTensor NeValue (double src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.ByteTensor NeValue(float64 src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.ByteTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an NeValue of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NeValueT">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor NeValueT (double src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor NeValueT(float64 src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="src">The right-hand-side operand.</param>
        <summary>
              Performs an NeValueT of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewWithStorage1d">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor NewWithStorage1d (IntPtr offset, long size, long stride);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor NewWithStorage1d(native int offset, int64 size, int64 stride) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.IntPtr" />
        <Parameter Name="size" Type="System.Int64" />
        <Parameter Name="stride" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param>
        <param name="size">Size of the first dimension.</param>
        <param name="stride">Stride of the first dimension.</param>
        <summary>
              Access to element at the specified position in the tensor
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewWithStorage2d">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor NewWithStorage2d (IntPtr offset, long size0, long stride0, long size1, long stride1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor NewWithStorage2d(native int offset, int64 size0, int64 stride0, int64 size1, int64 stride1) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.IntPtr" />
        <Parameter Name="size0" Type="System.Int64" />
        <Parameter Name="stride0" Type="System.Int64" />
        <Parameter Name="size1" Type="System.Int64" />
        <Parameter Name="stride1" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param>
        <param name="size0">Size of the first dimension.</param>
        <param name="stride0">Stride of the first dimension.</param>
        <param name="size1">Size of the second dimension.</param>
        <param name="stride1">Stride of the second dimension.</param>
        <summary>
              Access to element at the specified position in the tensor
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewWithStorage3d">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor NewWithStorage3d (IntPtr offset, long size0, long stride0, long size1, long stride1, long size2, long stride2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor NewWithStorage3d(native int offset, int64 size0, int64 stride0, int64 size1, int64 stride1, int64 size2, int64 stride2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.IntPtr" />
        <Parameter Name="size0" Type="System.Int64" />
        <Parameter Name="stride0" Type="System.Int64" />
        <Parameter Name="size1" Type="System.Int64" />
        <Parameter Name="stride1" Type="System.Int64" />
        <Parameter Name="size2" Type="System.Int64" />
        <Parameter Name="stride2" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param>
        <param name="size0">Size of the first dimension.</param>
        <param name="stride0">Stride of the first dimension.</param>
        <param name="size1">Size of the second dimension.</param>
        <param name="stride1">Stride of the second dimension.</param>
        <param name="size2">Size of the third dimension.</param>
        <param name="stride2">Stride of the third dimension.</param>
        <summary>
              Access to element at the specified position in the tensor
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewWithStorage4d">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor NewWithStorage4d (IntPtr offset, long size0, long stride0, long size1, long stride1, long size2, long stride2, long size3, long stride3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor NewWithStorage4d(native int offset, int64 size0, int64 stride0, int64 size1, int64 stride1, int64 size2, int64 stride2, int64 size3, int64 stride3) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.IntPtr" />
        <Parameter Name="size0" Type="System.Int64" />
        <Parameter Name="stride0" Type="System.Int64" />
        <Parameter Name="size1" Type="System.Int64" />
        <Parameter Name="stride1" Type="System.Int64" />
        <Parameter Name="size2" Type="System.Int64" />
        <Parameter Name="stride2" Type="System.Int64" />
        <Parameter Name="size3" Type="System.Int64" />
        <Parameter Name="stride3" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param>
        <param name="size0">Size of the first dimension.</param>
        <param name="stride0">Stride of the first dimension.</param>
        <param name="size1">Size of the second dimension.</param>
        <param name="stride1">Stride of the second dimension.</param>
        <param name="size2">Size of the third dimension.</param>
        <param name="stride2">Stride of the third dimension.</param>
        <param name="size3">Size of the fourth dimension.</param>
        <param name="stride3">Stride of the fourth dimension.</param>
        <summary>
              Access to element at the specified position in the tensor
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NonZero">
      <MemberSignature Language="C#" Value="public TorchSharp.LongTensor NonZero ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.LongTensor NonZero() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.LongTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
             Finds the indices of all non-zero elements.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Norm (double value, int dimension, bool keepdim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Norm(float64 value, int32 dimension, bool keepdim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="dimension" Type="System.Int32" />
        <Parameter Name="keepdim" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
        </param>
        <param name="dimension">The dimension to process along.</param>
        <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
        <summary>
              Compute the norm of all tensor elements along the given dimension. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Normal">
      <MemberSignature Language="C#" Value="public void Normal (TorchSharp.RandomGenerator source, double mean, double stdv);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Normal(class TorchSharp.RandomGenerator source, float64 mean, float64 stdv) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.RandomGenerator" />
        <Parameter Name="mean" Type="System.Double" />
        <Parameter Name="stdv" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="source">The random generator source</param>
        <param name="mean">The mean of the distribution.</param>
        <param name="stdv">The standard deviation of the distribution.</param>
        <summary>
              Fills the tensor with values according to a normal distribution.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NormAll">
      <MemberSignature Language="C#" Value="public double NormAll (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 NormAll(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
        </param>
        <summary>
              Compute the norm of all tensor elements. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NormalMeans">
      <MemberSignature Language="C#" Value="public void NormalMeans (TorchSharp.RandomGenerator source, TorchSharp.DoubleTensor means, double stdv);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void NormalMeans(class TorchSharp.RandomGenerator source, class TorchSharp.DoubleTensor means, float64 stdv) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.RandomGenerator" />
        <Parameter Name="means" Type="TorchSharp.DoubleTensor" />
        <Parameter Name="stdv" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="source">The random generator source</param>
        <param name="means">The means of the distribution.</param>
        <param name="stdv">The standard deviation of the distribution.</param>
        <summary>
              Fills the tensor with values according to a normal distribution. This version uses multiple means.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NormalMeansStdvs">
      <MemberSignature Language="C#" Value="public void NormalMeansStdvs (TorchSharp.RandomGenerator source, TorchSharp.DoubleTensor means, TorchSharp.DoubleTensor stdvs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void NormalMeansStdvs(class TorchSharp.RandomGenerator source, class TorchSharp.DoubleTensor means, class TorchSharp.DoubleTensor stdvs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.RandomGenerator" />
        <Parameter Name="means" Type="TorchSharp.DoubleTensor" />
        <Parameter Name="stdvs" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="source">The random generator source</param>
        <param name="means">The means of the distribution.</param>
        <param name="stdvs">The standards deviation of the distribution.</param>
        <summary>
              Fills the tensor with values according to a normal distribution. This version uses multiple means and standard deviations.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NormalStdvs">
      <MemberSignature Language="C#" Value="public void NormalStdvs (TorchSharp.RandomGenerator source, double mean, TorchSharp.DoubleTensor stdvs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void NormalStdvs(class TorchSharp.RandomGenerator source, float64 mean, class TorchSharp.DoubleTensor stdvs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.RandomGenerator" />
        <Parameter Name="mean" Type="System.Double" />
        <Parameter Name="stdvs" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="source">The random generator source</param>
        <param name="mean">The mean of the distribution.</param>
        <param name="stdvs">The standard deviations of the distribution.</param>
        <summary>
              Fills the tensor with values according to a normal distribution. This version uses multiple standard deviations.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumElements">
      <MemberSignature Language="C#" Value="public long NumElements ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 NumElements() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
             Get the number of elements in the tensor.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnesLike">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor OnesLike ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor OnesLike() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the OnesLike of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Polygamma">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Polygamma ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Polygamma() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Polygamma of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Polygamma">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Polygamma (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Polygamma(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Polygamma of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pow">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Pow (double y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Pow(float64 y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="y">The exponent.</param>
        <summary>
              Returns a new tensor with <see paramref="this" /> raised to the power of <see paramref="y" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prod">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Prod (int dimension, bool keepdim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Prod(int32 dimension, bool keepdim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
        <Parameter Name="keepdim" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dimension">The dimension to process along.</param>
        <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
        <summary>
              Computes the product of all the elements of the tensor along the given dimension. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProdAll">
      <MemberSignature Language="C#" Value="public double ProdAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 ProdAll() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns the product of the elements in the tensor.
            </summary>
        <returns>
              The product of the tensor.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Put">
      <MemberSignature Language="C#" Value="public void Put (TorchSharp.LongTensor index, TorchSharp.DoubleTensor src, bool accumulate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Put(class TorchSharp.LongTensor index, class TorchSharp.DoubleTensor src, bool accumulate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="TorchSharp.LongTensor" />
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
        <Parameter Name="accumulate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="index">Indices of entries to copy.</param>
        <param name="src">
        </param>
        <param name="accumulate">
        </param>
        <summary>
              Put
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Random">
      <MemberSignature Language="C#" Value="public void Random (long n);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Random(int64 n) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="n">The upper limit for the values to be generated</param>
        <summary>
             Populates the tensor with random values from 0 to n, using a newly initialized Random number geneator.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Random">
      <MemberSignature Language="C#" Value="public void Random (TorchSharp.RandomGenerator source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Random(class TorchSharp.RandomGenerator source) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.RandomGenerator" />
      </Parameters>
      <Docs>
        <param name="source">The random generator source</param>
        <summary>
             Populates the tensor with random values using the provided random source generator.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Random">
      <MemberSignature Language="C#" Value="public void Random (TorchSharp.RandomGenerator source, long n);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Random(class TorchSharp.RandomGenerator source, int64 n) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.RandomGenerator" />
        <Parameter Name="n" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="source">The random generator source</param>
        <param name="n">The upper limit for the values to be generated</param>
        <summary>
             Populates the tensor with random values from 0 to n, using the provided random source generator.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RandPerm">
      <MemberSignature Language="C#" Value="public void RandPerm (TorchSharp.RandomGenerator source, long max);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RandPerm(class TorchSharp.RandomGenerator source, int64 max) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.RandomGenerator" />
        <Parameter Name="max" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="source">The random generator source</param>
        <param name="max">The upper limit for the values to be generated</param>
        <summary>
             Populates the tensor with random values from 0 to n, using the provided random source generator.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Range">
      <MemberSignature Language="C#" Value="public static TorchSharp.DoubleTensor Range (double xmin, double xmax, double step);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class TorchSharp.DoubleTensor Range(float64 xmin, float64 xmax, float64 step) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmin" Type="System.Double" />
        <Parameter Name="xmax" Type="System.Double" />
        <Parameter Name="step" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="xmin">The lower bound of the range.</param>
        <param name="xmax">The upper bound of the range.</param>
        <param name="step">The value step.</param>
        <summary>
              Create a range spanning from xmin to xmax, with 'step' between each value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remainder">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Remainder (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Remainder(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
              Performs the Remainder operation on each element of the tensor with the
              <see paramref="value" /> and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>
              If you want to avoid the allocation of a new tensor, you can use the 
              alternative method <see cref="M:PytorchSharp.Remainder(PytorchSharp.DoubleTensor, Double, PytorchSharp.Double)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remainder">
      <MemberSignature Language="C#" Value="public static void Remainder (TorchSharp.DoubleTensor source, double value, TorchSharp.DoubleTensor result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Remainder(class TorchSharp.DoubleTensor source, float64 value, class TorchSharp.DoubleTensor result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.DoubleTensor" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="result" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="source">Source tensor on which the operation will take place.</param>
        <param name="value">The scalar value that the operation uses.</param>
        <param name="result">The tensor where the result will be placed</param>
        <summary>
              Performs the Remainder operation on each element of the source with the
              provided scalar.   The result tensor specified as the last parameters
              is resized to match the source.
            </summary>
        <remarks>
               For each element in the <see paramref="source" /> performs the Remainder operation
               with <see paramref="value" />.   The result is stored in the <see paramref="result" />
               tensor.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Renorm">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Renorm (double value, int dimension, double maxnorm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Renorm(float64 value, int32 dimension, float64 maxnorm) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="dimension" Type="System.Int32" />
        <Parameter Name="maxnorm" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
        </param>
        <param name="dimension">The dimension to process along.</param>
        <param name="maxnorm">
        </param>
        <summary>
              Compute the renorm of all tensor elements along the given dimension. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resize1d">
      <MemberSignature Language="C#" Value="public void Resize1d (long size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resize1d(int64 size) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size">The desired new size for the first dimension of the tensor.</param>
        <summary>
              Resizes the tensor to be one dimensional with the specified size, the contents of the tensor after this are undetermined.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resize2d">
      <MemberSignature Language="C#" Value="public void Resize2d (long size0, long size1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resize2d(int64 size0, int64 size1) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size0" Type="System.Int64" />
        <Parameter Name="size1" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size0">The desired new size for the first dimension of the tensor.</param>
        <param name="size1">The desired new size for the second dimension of the tensor.</param>
        <summary>
              Resizes the tensor to be two dimensional with the specified size, the contents of the tensor after this are undetermined.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resize3d">
      <MemberSignature Language="C#" Value="public void Resize3d (long size0, long size1, long size2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resize3d(int64 size0, int64 size1, int64 size2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size0" Type="System.Int64" />
        <Parameter Name="size1" Type="System.Int64" />
        <Parameter Name="size2" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size0">The desired new size for the first dimension of the tensor.</param>
        <param name="size1">The desired new size for the second dimension of the tensor.</param>
        <param name="size2">The desired new size for the third dimension of the tensor.</param>
        <summary>
              Resizes the tensor to be three dimensional with the specified size, the contents of the tensor after this are undetermined.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resize4d">
      <MemberSignature Language="C#" Value="public void Resize4d (long size0, long size1, long size2, long size3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resize4d(int64 size0, int64 size1, int64 size2, int64 size3) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size0" Type="System.Int64" />
        <Parameter Name="size1" Type="System.Int64" />
        <Parameter Name="size2" Type="System.Int64" />
        <Parameter Name="size3" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size0">The desired new size for the first dimension of the tensor.</param>
        <param name="size1">The desired new size for the second dimension of the tensor.</param>
        <param name="size2">The desired new size for the third dimension of the tensor.</param>
        <param name="size3">The desired new size for the fourth dimension of the tensor.</param>
        <summary>
              Resizes the tensor to be four dimensional with the specified size, the contents of the tensor after this are undetermined.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resize5d">
      <MemberSignature Language="C#" Value="public void Resize5d (long size0, long size1, long size2, long size3, long size4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resize5d(int64 size0, int64 size1, int64 size2, int64 size3, int64 size4) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size0" Type="System.Int64" />
        <Parameter Name="size1" Type="System.Int64" />
        <Parameter Name="size2" Type="System.Int64" />
        <Parameter Name="size3" Type="System.Int64" />
        <Parameter Name="size4" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size0">The desired new size for the first dimension of the tensor.</param>
        <param name="size1">The desired new size for the second dimension of the tensor.</param>
        <param name="size2">The desired new size for the third dimension of the tensor.</param>
        <param name="size3">The desired new size for the fourth dimension of the tensor.</param>
        <param name="size4">The desired new size for the fifth dimension of the tensor.</param>
        <summary>
              Resizes the tensor to be five dimensional with the specified size, the contents of the tensor after this are undetermined.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResizeAs">
      <MemberSignature Language="C#" Value="public void ResizeAs (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResizeAs(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">The source tensor whose shape will be mirrored by this tensor.</param>
        <summary>
              Resizes the tensor to match the dimensions of the specified src tensor, the contents of the tensor after this are undetermined.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Round ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Round() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Round of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Round (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Round(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Round of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RShift">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor RShift (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor RShift(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
              Performs the RShift operation on each element of the tensor with the
              <see paramref="value" /> and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>
              If you want to avoid the allocation of a new tensor, you can use the 
              alternative method <see cref="M:PytorchSharp.RShift(PytorchSharp.DoubleTensor, Double, PytorchSharp.Double)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RShift">
      <MemberSignature Language="C#" Value="public static void RShift (TorchSharp.DoubleTensor source, double value, TorchSharp.DoubleTensor result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RShift(class TorchSharp.DoubleTensor source, float64 value, class TorchSharp.DoubleTensor result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.DoubleTensor" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="result" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="source">Source tensor on which the operation will take place.</param>
        <param name="value">The scalar value that the operation uses.</param>
        <param name="result">The tensor where the result will be placed</param>
        <summary>
              Performs the RShift operation on each element of the source with the
              provided scalar.   The result tensor specified as the last parameters
              is resized to match the source.
            </summary>
        <remarks>
               For each element in the <see paramref="source" /> performs the RShift operation
               with <see paramref="value" />.   The result is stored in the <see paramref="result" />
               tensor.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rsqrt">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Rsqrt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Rsqrt() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Rsqrt of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rsqrt">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Rsqrt (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Rsqrt(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Rsqrt of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scatter">
      <MemberSignature Language="C#" Value="public void Scatter (int dim, TorchSharp.LongTensor index, TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scatter(int32 dim, class TorchSharp.LongTensor index, class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dim" Type="System.Int32" />
        <Parameter Name="index" Type="TorchSharp.LongTensor" />
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="dim">
        </param>
        <param name="index">Indices of entries to copy.</param>
        <param name="src">
        </param>
        <summary>
              Scatter
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScatterAdd">
      <MemberSignature Language="C#" Value="public void ScatterAdd (int dim, TorchSharp.LongTensor index, TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScatterAdd(int32 dim, class TorchSharp.LongTensor index, class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dim" Type="System.Int32" />
        <Parameter Name="index" Type="TorchSharp.LongTensor" />
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="dim">
        </param>
        <param name="index">Indices of entries to copy.</param>
        <param name="src">
        </param>
        <summary>
              ScatterAdd
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScatterFill">
      <MemberSignature Language="C#" Value="public void ScatterFill (int dim, TorchSharp.LongTensor index, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScatterFill(int32 dim, class TorchSharp.LongTensor index, float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dim" Type="System.Int32" />
        <Parameter Name="index" Type="TorchSharp.LongTensor" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="dim">
        </param>
        <param name="index">Indices of entries to copy.</param>
        <param name="value">
        </param>
        <summary>
              ScatterAdd
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Select (int dim, long slideIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Select(int32 dim, int64 slideIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dim" Type="System.Int32" />
        <Parameter Name="slideIndex" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dim">Dimension to select</param>
        <param name="slideIndex">Beginning of the tensor slice</param>
        <summary>
              Returns a new Tensor which is a tensor slice at the given index in the dimension dim. 
            </summary>
        <returns>To be added.</returns>
        <remarks>
              The returned tensor has one less dimension: the dimension dim is removed. As a result, it is not possible to select() on a 1D tensor.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public void Set (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Set(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">The source tensor which contains the data..</param>
        <summary>
              The tensor will use the same storage as the provided source, so any changes to that tensor are visible on this one.   
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Shape">
      <MemberSignature Language="C#" Value="public long[] Shape { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64[] Shape" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns the tensor shape, this is an array whose size determines the number of dimensions on the tensor, and each element is the size of the dimension
            </summary>
        <value>To be added.</value>
        <remarks>
                An array of size 0 is used for constants, an array of size 1 is used
                for single-dimension arrays, where the dimension is the value of the
                first element.   And so on.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sigmoid">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Sigmoid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Sigmoid() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Sigmoid of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sigmoid">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Sigmoid (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Sigmoid(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Sigmoid of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Sign ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Sign() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Computes the sign of the tensor. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sin">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Sin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Sin() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Sin of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sin">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Sin (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Sin(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Sin of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Sinh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Sinh() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Sinh of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Sinh (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Sinh(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Sinh of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public Tuple&lt;TorchSharp.DoubleTensor,TorchSharp.LongTensor&gt; Sort (int dimension, bool descending);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Tuple`2&lt;class TorchSharp.DoubleTensor, class TorchSharp.LongTensor&gt; Sort(int32 dimension, bool descending) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;TorchSharp.DoubleTensor,TorchSharp.LongTensor&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
        <Parameter Name="descending" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dimension">The dimension to sort along.</param>
        <param name="descending">0 if ascending, 1 if descending.</param>
        <summary>
              Sorts the elements of the tensor along the given dimension. 
            </summary>
        <returns>A tuple containing the values and indices of the sorted elements.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sqrt">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Sqrt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Sqrt() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Sqrt of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sqrt">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Sqrt (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Sqrt(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Sqrt of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Squeeze">
      <MemberSignature Language="C#" Value="public void Squeeze ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Squeeze() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Squeeze the tensor, i.e. remove all 1-sized dimensions.   
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Squeeze1d">
      <MemberSignature Language="C#" Value="public void Squeeze1d (TorchSharp.DoubleTensor src, int dimension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Squeeze1d(class TorchSharp.DoubleTensor src, int32 dimension) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
        <Parameter Name="dimension" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="src">The source tensor which contains the data.</param>
        <param name="dimension">The dimension to remove.</param>
        <summary>
              Squeeze the tensor, by removing the specified dimension.   
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Std">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Std (int dimension, bool biased, bool keepdim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Std(int32 dimension, bool biased, bool keepdim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
        <Parameter Name="biased" Type="System.Boolean" />
        <Parameter Name="keepdim" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dimension">The dimension to process along.</param>
        <param name="biased">
        </param>
        <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
        <summary>
              Compute the standard deviation of all tensor elements along the given dimension. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StdAll">
      <MemberSignature Language="C#" Value="public double StdAll (bool biased);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 StdAll(bool biased) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="biased" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="biased">
        </param>
        <summary>
              Compute the standard deviation of all tensor elements. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Storage">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor.DoubleStorage Storage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class TorchSharp.DoubleTensor/DoubleStorage Storage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor+DoubleStorage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Returns the associated storage for this tensor
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Sub (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Sub(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
              Performs the Sub operation on each element of the tensor with the
              <see paramref="value" /> and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>
              If you want to avoid the allocation of a new tensor, you can use the 
              alternative method <see cref="M:PytorchSharp.Sub(PytorchSharp.DoubleTensor, Double, PytorchSharp.Double)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub">
      <MemberSignature Language="C#" Value="public static void Sub (TorchSharp.DoubleTensor source, double value, TorchSharp.DoubleTensor result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sub(class TorchSharp.DoubleTensor source, float64 value, class TorchSharp.DoubleTensor result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.DoubleTensor" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="result" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="source">Source tensor on which the operation will take place.</param>
        <param name="value">The scalar value that the operation uses.</param>
        <param name="result">The tensor where the result will be placed</param>
        <summary>
              Performs the Sub operation on each element of the source with the
              provided scalar.   The result tensor specified as the last parameters
              is resized to match the source.
            </summary>
        <remarks>
               For each element in the <see paramref="source" /> performs the Sub operation
               with <see paramref="value" />.   The result is stored in the <see paramref="result" />
               tensor.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubScaled">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor SubScaled (double value1, double value2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor SubScaled(float64 value1, float64 value2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value1" Type="System.Double" />
        <Parameter Name="value2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value1">
        </param>
        <param name="value2">
        </param>
        <summary>
              Performs an SubScaled of the tensor with the provided 
              <see paramref="src" /> tensor and returns a new tensor with the result.
            </summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Sum (int dimension, bool keepdim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Sum(int32 dimension, bool keepdim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
        <Parameter Name="keepdim" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dimension">The dimension to process along.</param>
        <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
        <summary>
              Computes the sum of all the elements of the tensor along the given dimension. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SumAll">
      <MemberSignature Language="C#" Value="public double SumAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 SumAll() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns the sum of the elements in the tensor.
            </summary>
        <returns>
              The sum of the tensor.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Take">
      <MemberSignature Language="C#" Value="public void Take (TorchSharp.DoubleTensor src, TorchSharp.LongTensor index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Take(class TorchSharp.DoubleTensor src, class TorchSharp.LongTensor index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
        <Parameter Name="index" Type="TorchSharp.LongTensor" />
      </Parameters>
      <Docs>
        <param name="src">
        </param>
        <param name="index">Indices of entries to copy.</param>
        <summary>
              Take
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tan">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Tan ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Tan() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Tan of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tan">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Tan (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Tan(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Tan of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Tanh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Tanh() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Tanh of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Tanh (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Tanh(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Tanh of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TopK">
      <MemberSignature Language="C#" Value="public Tuple&lt;TorchSharp.DoubleTensor,TorchSharp.LongTensor&gt; TopK (long k, int dim, int dir, bool sorted);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Tuple`2&lt;class TorchSharp.DoubleTensor, class TorchSharp.LongTensor&gt; TopK(int64 k, int32 dim, int32 dir, bool sorted) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;TorchSharp.DoubleTensor,TorchSharp.LongTensor&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="k" Type="System.Int64" />
        <Parameter Name="dim" Type="System.Int32" />
        <Parameter Name="dir" Type="System.Int32" />
        <Parameter Name="sorted" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="k">The number of elements to fetch.</param>
        <param name="dim">The dimension along which to sort and find k elements.</param>
        <param name="dir">0 if ascending, 1 if descending.</param>
        <param name="sorted">1 if the result should be sorted, 0 if they should keep their original order.</param>
        <summary>
              Finds the top k of all the elements of the tensor along the given dimension. 
            </summary>
        <returns>A tuple containing the values and indices of the top 'k' elements.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Get a string representation of the tensor.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TPow">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor TPow (double x);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor TPow(float64 x) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x">The base.</param>
        <summary>
              Returns a new tensor with <see paramref="x" /> raised to the power of <see paramref="this" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trace">
      <MemberSignature Language="C#" Value="public double Trace ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 Trace() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Computes the trace of the tensor. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Transpose">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Transpose (int dim1, int dim2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Transpose(int32 dim1, int32 dim2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dim1" Type="System.Int32" />
        <Parameter Name="dim2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dim1">First dimension</param>
        <param name="dim2">Second dimension</param>
        <summary>
            Returns a tensor where dimensions dim1 and dim2 have been swapped. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trigamma">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Trigamma ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Trigamma() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Trigamma of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trigamma">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Trigamma (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Trigamma(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Trigamma of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TriL">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor TriL (long k);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor TriL(int64 k) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="k" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="k">
        </param>
        <summary>
              Lower triangle. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TriU">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor TriU (long k);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor TriU(int64 k) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="k" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="k">
        </param>
        <summary>
              Upper triangle. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trunc">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Trunc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Trunc() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the Trunc of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trunc">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Trunc (TorchSharp.DoubleTensor src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Trunc(class TorchSharp.DoubleTensor src) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>
              Returns a new tensor with the Trunc of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unfold">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Unfold (int dim, long size, long step);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Unfold(int32 dim, int64 size, int64 step) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dim" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int64" />
        <Parameter Name="step" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dim">
        </param>
        <param name="size">
        </param>
        <param name="step">
        </param>
        <summary>
              Returns a tensor which contains all slices of size size in the dimension dim. Step between two slices is given by step.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Uniform">
      <MemberSignature Language="C#" Value="public void Uniform (TorchSharp.RandomGenerator source, double min, double max);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Uniform(class TorchSharp.RandomGenerator source, float64 min, float64 max) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TorchSharp.RandomGenerator" />
        <Parameter Name="min" Type="System.Double" />
        <Parameter Name="max" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="source">The random generator source</param>
        <param name="min">The lower bound for the random number range.</param>
        <param name="max">The upper bound for the random number range.</param>
        <summary>
              Fills the tensor with values according to a Bernoulli distribution.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unsqueeze1d">
      <MemberSignature Language="C#" Value="public void Unsqueeze1d (TorchSharp.DoubleTensor src, int dimension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unsqueeze1d(class TorchSharp.DoubleTensor src, int32 dimension) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="TorchSharp.DoubleTensor" />
        <Parameter Name="dimension" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="src">The source tensor which contains the data.</param>
        <param name="dimension">The dimension to insert.</param>
        <summary>
              Unsqueeze the tensor, by inserting the specified dimension of size 1.   
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Var">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor Var (int dimension, bool biased, bool keepdim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor Var(int32 dimension, bool biased, bool keepdim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
        <Parameter Name="biased" Type="System.Boolean" />
        <Parameter Name="keepdim" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dimension">The dimension to process along.</param>
        <param name="biased">
        </param>
        <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
        <summary>
              Compute the variance of all tensor elements along the given dimension. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VarAll">
      <MemberSignature Language="C#" Value="public double VarAll (bool biased);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 VarAll(bool biased) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="biased" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="biased">
        </param>
        <summary>
              Compute the variance of all tensor elements. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZeroFill">
      <MemberSignature Language="C#" Value="public void ZeroFill ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ZeroFill() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
             Fills the tensor with zeros
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZerosLike">
      <MemberSignature Language="C#" Value="public TorchSharp.DoubleTensor ZerosLike ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TorchSharp.DoubleTensor ZerosLike() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.DoubleTensor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Returns a new tensor with the ZerosLike of the elements of <see paramref="src" /></summary>
        <returns>
              This returns a new tensor with the same shape as the tensor this operates on.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
