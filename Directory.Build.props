<Project>
  <!-- Directory.Build.props contains the common build settings for all projects in the repo. -->

  <Import Project="build/BranchInfo.props" />
  <Import Project="build/Dependencies.props" />

  <PropertyGroup>
    <Configuration Condition="'$(Configuration)'==''">Debug</Configuration>
    <Configurations>Debug;Release</Configurations>
    <Platform Condition="'$(Platform)'==''">x64</Platform>
    <TargetArchitecture Condition="'$(TargetArchitecture)' == ''">x64</TargetArchitecture>
    <NativeTargetArchitecture Condition="'$(NativeTargetArchitecture)' == ''">$(TargetArchitecture)</NativeTargetArchitecture>
    <PlatformConfig>$(Platform).$(Configuration)</PlatformConfig>
  </PropertyGroup>

  <PropertyGroup>
    <RestoreSources>
      https://api.nuget.org/v3/index.json;
      https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json;
      https://dotnet.myget.org/F/dotnet-core/api/v3/index.json;
      https://dotnet.myget.org/F/roslyn-analyzers/api/v3/index.json;
    </RestoreSources>
  </PropertyGroup>

  <!-- Common repo directories -->
  <PropertyGroup>
    <RepoRoot>$(MSBuildThisFileDirectory)</RepoRoot>
    <SourceDir>$(RepoRoot)src/</SourceDir>
    <PkgDir>$(RepoRoot)pkg/</PkgDir>

    <!-- when building on local machines the massive downloads get placed up one directory -->
    <!-- so we can clean without triggering a re-download-->
    <MassiveDownloadRoot>$(RepoRoot)../</MassiveDownloadRoot>
    <MassiveDownloadRoot Condition="'$(BUILD_BUILDNUMBER )' != ''">(RepoRoot)bin/downloads/</MassiveDownloadRoot>

    <!-- Output directories -->
    <BinDir Condition="'$(BinDir)'==''">$(RepoRoot)bin/</BinDir>
    <BaseOutputPath Condition="'$(BaseOutputPath)'==''">$(BinDir)</BaseOutputPath>
    <ObjDir Condition="'$(ObjDir)'==''">$(BinDir)obj/</ObjDir>
    <RootIntermediateOutputPath Condition="'$(RootIntermediateOutputPath)'==''">$(ObjDir)</RootIntermediateOutputPath>

    <IntermediateOutputRootPath Condition="'$(IntermediateOutputRootPath)' == ''">$(RootIntermediateOutputPath)$(PlatformConfig)\</IntermediateOutputRootPath>
    <IntermediateOutputPath Condition="'$(IntermediateOutputPath)' == ''">$(IntermediateOutputRootPath)$(MSBuildProjectName)\</IntermediateOutputPath>
    <BaseIntermediateOutputPath Condition="'$(BaseIntermediateOutputPath)' == ''">$(IntermediateOutputPath)</BaseIntermediateOutputPath>

    <OutputPath Condition="'$(OutputPath)'==''">$(BaseOutputPath)$(PlatformConfig)\$(MSBuildProjectName)\</OutputPath>

    <PackageAssetsPath>$(ObjDir)/packages/</PackageAssetsPath>
    
    <PackageOutputPath Condition="'$(PackageOutputPath)'=='' and '$(NonShippingPackage)' == 'true'">$(BinDir)packages_noship/</PackageOutputPath>
    <PackageOutputPath Condition="'$(PackageOutputPath)'==''">$(BinDir)packages/</PackageOutputPath>

    <!-- On Unix we currently hard code LibTorchSharp as Release - there is a (possibly flawed) assumption -->
    <!-- that it needs to be built in Release because LibTorch itself is in release. -->
    <!-- On windows a debug version of LibTorch is available for download-->
    <NativeConfiguration>Release</NativeConfiguration>
    <NativeConfiguration Condition="'$(OS)' == 'Windows_NT' OR '$(AssumeOS)' == 'windows'">$(Configuration)</NativeConfiguration>

    <!-- on windows separate debug binaries are available-->
    <LibTorchDebug Condition="('$(NativeConfiguration)' == 'Debug') AND ('$(OS)' == 'Windows_NT' OR '$(AssumeOS)' == 'windows')">-debug</LibTorchDebug>

    <NativeOutputPath>$(BaseOutputPath)$(NativeTargetArchitecture).$(NativeConfiguration)\Native\</NativeOutputPath>

    <!-- Input Directories -->
    <ToolsDir Condition="'$(ToolsDir)'==''">$(RepoRoot)Tools/</ToolsDir>
  </PropertyGroup>

  <!-- Version properties -->
  <PropertyGroup>
    <VersionPrefix>$(MajorVersion).$(MinorVersion).$(PatchVersion)</VersionPrefix>
    <VersionSuffix></VersionSuffix>
  </PropertyGroup>

  <!-- SourceLink properties used by dotnet/buildtools - need to be set before importing $(ToolsDir)versioning.props -->
  <PropertyGroup>
    <UseSourceLink>true</UseSourceLink>
    <GitHubRepositoryName>machinelearning</GitHubRepositoryName>
  </PropertyGroup>

  <!--
  Source code control properties used by the .NET Core SDK to inject SCC info into the NuGet package.
  In future versions, these will be used for SourceLink and to generate AssemblyInfo.
  -->
  <PropertyGroup>
    <PrivateRepositoryUrl>https://github.com/dotnet/$(GitHubRepositoryName)</PrivateRepositoryUrl>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <SourceRevisionId>$(LatestCommit)</SourceRevisionId>
  </PropertyGroup>

  <!-- Language configuration -->
  <PropertyGroup>
    <LangVersion>latest</LangVersion> <!-- default to allowing all language features -->
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
  </PropertyGroup>
 
  <!-- Signing properties -->
  <PropertyGroup>
    <AssemblyOriginatorKeyFile Condition="'$(AssemblyOriginatorKeyFile)' == ''">$(ToolsDir)Open.snk</AssemblyOriginatorKeyFile>
    <SignAssembly>true</SignAssembly>
    <PublicSign Condition="'$(OS)' != 'Windows_NT'">true</PublicSign>
  </PropertyGroup>

  <!-- Need to explicitly set these properties for the -Intrinsics or -Netfx configurations becuase they are typically based off 'Debug' or 'Release' configs -->
  <!-- Taken from https://github.com/dotnet/sdk/blob/073c98b92c81066c6c2e17c3674adbb6e833409a/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.props#L41-L47 -->
  <PropertyGroup Condition="$(Configuration.StartsWith('Debug'))">
    <DebugSymbols>true</DebugSymbols>
    <DefineConstants>$(DefineContants);DEBUG</DefineConstants>
    <Optimize>false</Optimize>
  </PropertyGroup>
  <PropertyGroup Condition="$(Configuration.StartsWith('Release'))">
    <Optimize>true</Optimize>
  </PropertyGroup>

  <PropertyGroup>
    <CustomAfterMicrosoftCommonTargets>$(RepoRoot)build\AfterCommonTargets.targets</CustomAfterMicrosoftCommonTargets>
  </PropertyGroup>
</Project>
