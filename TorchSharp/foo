<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TypeGeneration</name>
    </assembly>
    <members>
        <member name="T:TorchSharp.ByteTensor">
             <summary>
               Tensor of type Byte.
             </summary>
             <remarks>
               <para>
                 Use the default constructor to create an empty tensor, or invoke one of the
                 constructors with one (1D), two (2D), three (3D), or four parameters (4D) to x
                 create a tensor for the desired number of dimensions.
               </para>
             </remarks>
            </member>
        <member name="T:TorchSharp.ByteTensor.ByteStorage">
             <summary>
                The storage class provides a mechanism to access the underlying data representation for tensors.
             </summary>
            </member>
        <member name="M:TorchSharp.ByteTensor.ByteStorage.#ctor">
             <summary>
               Initializes an empty ByteStorage instance.
             </summary>
            </member>
        <member name="M:TorchSharp.ByteTensor.ByteStorage.#ctor(System.Int64)">
             <summary>
               Initializes a ByteStorage instance with the specified size.
             </summary>        
             <param name="size">The desired number of elements in the storage</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.ByteStorage.Finalize">
             <summary>
             Finalizer
             </summary>
            </member>
        <member name="M:TorchSharp.ByteTensor.ByteStorage.Dispose">
             <summary>
               Releases the storage.
             </summary>        
            </member>
        <member name="M:TorchSharp.ByteTensor.ByteStorage.Dispose(System.Boolean)">
             <summary>
               Implements the .NET Dispose pattern.
             </summary>
            </member>
        <member name="P:TorchSharp.ByteTensor.ByteStorage.Item(System.Int64)">
             <summary>
             </summary>
            </member>
        <member name="M:TorchSharp.ByteTensor.ByteStorage.Resize(System.UInt64)">
             <summary>
               Changes the size of this storage to the new requested size.
             </summary>
             <param name="size">The desired new size.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.ByteStorage.Fill(System.Byte)">
             <summary>
               Fills every element of the storage with the specified value.
             </summary>
             <param name="value">Value used for each element</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.#ctor">
             <summary>
                Creates an empty tensor.
             </summary>
            </member>
        <member name="M:TorchSharp.ByteTensor.#ctor(System.Int64)">
             <summary>
                Creates a 1D tensor of the specified size.
             </summary>    
             <param name="size0">Size for the first dimension.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.#ctor(System.Int64,System.Int64)">
             <summary>
                Creates a 2D tensor of the specified size.
             </summary>        
             <param name="size0">Size for the first dimension.</param>
             <param name="size1">Size for the second dimension.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.#ctor(System.Int64,System.Int64,System.Int64)">
             <summary>
                Creates a 3D tensor of the specified size.
             </summary>        
             <param name="size0">Size for the first dimension.</param>
             <param name="size1">Size for the second dimension.</param>
             <param name="size2">Size for the third dimension.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.#ctor(System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
                Creates a 4D tensor of the specified size.
             </summary>
             <param name="size0">Size for the first dimension.</param>
             <param name="size1">Size for the second dimension.</param>
             <param name="size2">Size for the third dimension.</param>
             <param name="size3">Size for the fourth dimension.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Finalize">
             <summary>
              Finalizer for ~ByteTensor
             </summary>
            </member>
        <member name="M:TorchSharp.ByteTensor.Dispose">
             <summary>
               Releases the tensor and its associated data.
             </summary>        
            </member>
        <member name="M:TorchSharp.ByteTensor.Dispose(System.Boolean)">
             <summary>
               Implements the .NET Dispose pattern.
             </summary>
            </member>
        <member name="M:TorchSharp.ByteTensor.NumElements">
             <summary>
              Get the number of elements in the tensor.
             </summary>
            </member>
        <member name="M:TorchSharp.ByteTensor.ZeroFill">
             <summary>
              Fills the tensor with zeros
             </summary>
            </member>
        <member name="M:TorchSharp.ByteTensor.Fill(System.Byte)">
             <summary>
              Fills the tensor with the specified value
             </summary>
            </member>
        <member name="M:TorchSharp.ByteTensor.NonZero">
             <summary>
              Finds the indices of all non-zero elements.
             </summary>
            </member>
        <member name="M:TorchSharp.ByteTensor.MaskedFill(TorchSharp.ByteTensor,System.Byte)">
             <summary>
              Fills the tensor with the specified value at the locations indicated by the mask.
             </summary>
             <param name="mask">A byte tensor with values 0 or 1 indicating the locations where the value should be filled.</param>
             <param name="value">The value to write at the indicated locations.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.MaskedCopy(TorchSharp.ByteTensor,TorchSharp.ByteTensor)">
             <summary>
              Copies elements from the source tensor to the locations indicated by the mask.
             </summary>
             <param name="mask">A byte tensor with values 0 or 1 indicating the locations where in the destination the value should be filled.</param>
             <param name="src">The source tensor.</param>
             <remarks>
              There must be at least as many elements in the source tensor as there are 1s in the mask.
             </remarks>
            </member>
        <member name="M:TorchSharp.ByteTensor.MaskedSelect(TorchSharp.ByteTensor,TorchSharp.ByteTensor)">
             <summary>
              Copies elements from the source tensor at the locations indicated by the mask.
             </summary>
             <param name="mask">A byte tensor with values 0 or 1 indicating the locations where in the source the value should be fetched.</param>
             <param name="src">The source tensor.</param>
             <remarks>
              There will be as many elements in the tensor as there are 1s in the mask.
              There must be at least as many elements in the source tensor as there are 1s in the mask.
             </remarks>
            </member>
        <member name="P:TorchSharp.ByteTensor.Storage">
             <summary>
              Returns the associated storage for this tensor
             </summary>
            </member>
        <member name="P:TorchSharp.ByteTensor.Dimensions">
             <summary>
              Returns the number of dimensions for this tensor
             </summary>
            </member>
        <member name="M:TorchSharp.ByteTensor.GetTensorDimension(System.Int32)">
             <summary>
              Retrieves the size of the specified dimension in the tensor.
             </summary>
            </member>
        <member name="P:TorchSharp.ByteTensor.Shape">
             <summary>
             Returns the tensor shape, this is an array whose size determines the number of dimensions on the tensor, and each element is the size of the dimension
             </summary>
             <remarks>
                 An array of size 0 is used for constants, an array of size 1 is used
                 for single-dimension arrays, where the dimension is the value of the
                 first element.   And so on.
             </remarks>
            </member>
        <member name="M:TorchSharp.ByteTensor.GetTensorStride(System.Int32)">
             <summary>
              Retrieves the stride of the specified dimension in the tensor.
             </summary>
            </member>
        <member name="P:TorchSharp.ByteTensor.Data">
             <summary>
              Returns a pointer to the unmanaged data managed by this tensor.
             </summary>
            </member>
        <member name="M:TorchSharp.ByteTensor.Clone">
             <summary>
               Returns a deep clone of the tensor
             </summary>
            </member>
        <member name="M:TorchSharp.ByteTensor.Select(System.Int32,System.Int64)">
             <summary>
               Returns a new Tensor which is a tensor slice at the given index in the dimension dim. 
             </summary>
             <remarks>
               The returned tensor has one less dimension: the dimension dim is removed. As a result, it is not possible to select() on a 1D tensor.
             </remarks>
             <param name="dim">Dimension to select</param>
             <param name="slideIndex">Beginning of the tensor slice</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Narrow(System.Int32,System.Int64,System.Int64)">
             <summary>
             Returns a new Tensor which is a narrowed version of the current one: the dimension dim is narrowed from firstIndexto firstIndex+size-1.
             </summary>
             <param name="dim">The dimension to narrow</param>
             <param name="firstIndex">Initial index to narrow</param>
             <param name="size">Number of elements</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Transpose(System.Int32,System.Int32)">
             <summary>
             Returns a tensor where dimensions dim1 and dim2 have been swapped. 
             </summary>
             <param name="dim1">First dimension</param>
             <param name="dim2">Second dimension</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Unfold(System.Int32,System.Int64,System.Int64)">
             <summary>
               Returns a tensor which contains all slices of size size in the dimension dim. Step between two slices is given by step.
             </summary>
             <param name="dim"></param>
             <param name="size"></param>
             <param name="step"></param>
            </member>
        <member name="M:TorchSharp.ByteTensor.NewWithStorage1d(System.IntPtr,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param> 
             <param name="size">Size of the first dimension.</param>     
             <param name="stride">Stride of the first dimension.</param>          
            </member>
        <member name="M:TorchSharp.ByteTensor.NewWithStorage2d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param> 
             <param name="size0">Size of the first dimension.</param>     
             <param name="stride0">Stride of the first dimension.</param>
             <param name="size1">Size of the second dimension.</param>     
             <param name="stride1">Stride of the second dimension.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.NewWithStorage3d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param> 
             <param name="size0">Size of the first dimension.</param>     
             <param name="stride0">Stride of the first dimension.</param>
             <param name="size1">Size of the second dimension.</param>     
             <param name="stride1">Stride of the second dimension.</param>
             <param name="size2">Size of the third dimension.</param>     
             <param name="stride2">Stride of the third dimension.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.NewWithStorage4d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param> 
             <param name="size0">Size of the first dimension.</param>     
             <param name="stride0">Stride of the first dimension.</param>
             <param name="size1">Size of the second dimension.</param>     
             <param name="stride1">Stride of the second dimension.</param>
             <param name="size2">Size of the third dimension.</param>     
             <param name="stride2">Stride of the third dimension.</param>
             <param name="size3">Size of the fourth dimension.</param>     
             <param name="stride3">Stride of the fourth dimension.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Squeeze">
             <summary>
               Squeeze the tensor, i.e. remove all 1-sized dimensions.   
             </summary>
            </member>
        <member name="M:TorchSharp.ByteTensor.Squeeze1d(TorchSharp.ByteTensor,System.Int32)">
             <summary>
               Squeeze the tensor, by removing the specified dimension.   
             </summary>
             <param name="src">The source tensor which contains the data.</param>
             <param name="dimension">The dimension to remove.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Unsqueeze1d(TorchSharp.ByteTensor,System.Int32)">
             <summary>
               Unsqueeze the tensor, by inserting the specified dimension of size 1.   
             </summary>
             <param name="src">The source tensor which contains the data.</param>
             <param name="dimension">The dimension to insert.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Resize1d(System.Int64)">
             <summary>
               Resizes the tensor to be one dimensional with the specified size, the contents of the tensor after this are undetermined.
             </summary>
             <param name="size">The desired new size for the first dimension of the tensor.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Resize2d(System.Int64,System.Int64)">
             <summary>
               Resizes the tensor to be two dimensional with the specified size, the contents of the tensor after this are undetermined.
             </summary>
             <param name="size0">The desired new size for the first dimension of the tensor.</param>
             <param name="size1">The desired new size for the second dimension of the tensor.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Resize3d(System.Int64,System.Int64,System.Int64)">
             <summary>
               Resizes the tensor to be three dimensional with the specified size, the contents of the tensor after this are undetermined.
             </summary>
             <param name="size0">The desired new size for the first dimension of the tensor.</param>
             <param name="size1">The desired new size for the second dimension of the tensor.</param>
             <param name="size2">The desired new size for the third dimension of the tensor.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Resize4d(System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Resizes the tensor to be four dimensional with the specified size, the contents of the tensor after this are undetermined.
             </summary>
             <param name="size0">The desired new size for the first dimension of the tensor.</param>
             <param name="size1">The desired new size for the second dimension of the tensor.</param>
             <param name="size2">The desired new size for the third dimension of the tensor.</param>
             <param name="size3">The desired new size for the fourth dimension of the tensor.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Resize5d(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Resizes the tensor to be five dimensional with the specified size, the contents of the tensor after this are undetermined.
             </summary>
             <param name="size0">The desired new size for the first dimension of the tensor.</param>
             <param name="size1">The desired new size for the second dimension of the tensor.</param>
             <param name="size2">The desired new size for the third dimension of the tensor.</param>
             <param name="size3">The desired new size for the fourth dimension of the tensor.</param>
             <param name="size4">The desired new size for the fifth dimension of the tensor.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.ResizeAs(TorchSharp.ByteTensor)">
             <summary>
               Resizes the tensor to match the dimensions of the specified src tensor, the contents of the tensor after this are undetermined.
             </summary>
             <param name="src">The source tensor whose shape will be mirrored by this tensor.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Set(TorchSharp.ByteTensor)">
             <summary>
               The tensor will use the same storage as the provided source, so any changes to that tensor are visible on this one.   
             </summary>
             <param name="src">The source tensor which contains the data..</param>
            </member>
        <member name="P:TorchSharp.ByteTensor.Item(System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>       
             <param name="x0">Index to access.</param> 
            </member>
        <member name="P:TorchSharp.ByteTensor.Item(System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>    
             <param name="x0">Index in the first dimension to access.</param> 
             <param name="x1">Index in the second dimension to access.</param>     
            </member>
        <member name="P:TorchSharp.ByteTensor.Item(System.Int64,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="x0">Index in the first dimension to access.</param> 
             <param name="x1">Index in the second dimension to access.</param>     
             <param name="x2">Index in the third dimension to access.</param>     
            </member>
        <member name="P:TorchSharp.ByteTensor.Item(System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="x0">Index in the first dimension to access.</param> 
             <param name="x1">Index in the second dimension to access.</param>     
             <param name="x2">Index in the third dimension to access.</param>     
             <param name="x3">Index in the fourth dimension to access.</param>     
            </member>
        <member name="M:TorchSharp.ByteTensor.Random(TorchSharp.RandomGenerator)">
             <summary>
              Populates the tensor with random values using the provided random source generator.
             </summary>
             <param name="source">The random generator source</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.ClampedRandom(TorchSharp.RandomGenerator,System.Int64,System.Int64)">
             <summary>
              Populates the tensor with random values from min to max, using the provided random source generator.
             </summary>
             <param name="source">The random generator source</param>
             <param name="min">The lower limit for the values to be generated</param>
             <param name="max">The upper limit for the values to be generated</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.CappedRandom(TorchSharp.RandomGenerator,System.Int64)">
             <summary>
              Populates the tensor with random values from 0 to max, using the provided random source generator.
             </summary>
             <param name="source">The random generator source</param>
             <param name="max">The upper limit for the values to be generated</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.RandPerm(TorchSharp.RandomGenerator,System.Int64)">
             <summary>
              Populates the tensor with random values from 0 to n, using the provided random source generator.
             </summary>
             <param name="source">The random generator source</param>
             <param name="max">The upper limit for the values to be generated</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Geometric(TorchSharp.RandomGenerator,System.Double)">
             <summary>
              Populates the tensor with random values from 0 to n, using the provided random source generator.
             </summary>
             <param name="source">The random generator source</param>
             <param name="p"></param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Random(System.Int64)">
             <summary>
              Populates the tensor with random values from 0 to n, using a newly initialized Random number geneator.
             </summary>
             <param name="n">The upper limit for the values to be generated</param>        
            </member>
        <member name="M:TorchSharp.ByteTensor.ToString">
             <summary>
               Get a string representation of the tensor.
             </summary>
            </member>
        <member name="M:TorchSharp.ByteTensor.Add(TorchSharp.ByteTensor,System.Byte,TorchSharp.ByteTensor)">
             <summary>
               Performs the Add operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Add operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Add(System.Byte)">
             <summary>
               Performs the Add operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Add(PytorchSharp.ByteTensor, Byte, PytorchSharp.Byte)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.ByteTensor.Sub(TorchSharp.ByteTensor,System.Byte,TorchSharp.ByteTensor)">
             <summary>
               Performs the Sub operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Sub operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Sub(System.Byte)">
             <summary>
               Performs the Sub operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Sub(PytorchSharp.ByteTensor, Byte, PytorchSharp.Byte)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.ByteTensor.Mul(TorchSharp.ByteTensor,System.Byte,TorchSharp.ByteTensor)">
             <summary>
               Performs the Mul operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Mul operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Mul(System.Byte)">
             <summary>
               Performs the Mul operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Mul(PytorchSharp.ByteTensor, Byte, PytorchSharp.Byte)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.ByteTensor.Div(TorchSharp.ByteTensor,System.Byte,TorchSharp.ByteTensor)">
             <summary>
               Performs the Div operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Div operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Div(System.Byte)">
             <summary>
               Performs the Div operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Div(PytorchSharp.ByteTensor, Byte, PytorchSharp.Byte)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.ByteTensor.LShift(TorchSharp.ByteTensor,System.Byte,TorchSharp.ByteTensor)">
             <summary>
               Performs the LShift operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the LShift operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.LShift(System.Byte)">
             <summary>
               Performs the LShift operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.LShift(PytorchSharp.ByteTensor, Byte, PytorchSharp.Byte)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.ByteTensor.RShift(TorchSharp.ByteTensor,System.Byte,TorchSharp.ByteTensor)">
             <summary>
               Performs the RShift operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the RShift operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.RShift(System.Byte)">
             <summary>
               Performs the RShift operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.RShift(PytorchSharp.ByteTensor, Byte, PytorchSharp.Byte)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.ByteTensor.Fmod(TorchSharp.ByteTensor,System.Byte,TorchSharp.ByteTensor)">
             <summary>
               Performs the Fmod operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Fmod operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Fmod(System.Byte)">
             <summary>
               Performs the Fmod operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Fmod(PytorchSharp.ByteTensor, Byte, PytorchSharp.Byte)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.ByteTensor.Remainder(TorchSharp.ByteTensor,System.Byte,TorchSharp.ByteTensor)">
             <summary>
               Performs the Remainder operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Remainder operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Remainder(System.Byte)">
             <summary>
               Performs the Remainder operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Remainder(PytorchSharp.ByteTensor, Byte, PytorchSharp.Byte)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.ByteTensor.BitAnd(TorchSharp.ByteTensor,System.Byte,TorchSharp.ByteTensor)">
             <summary>
               Performs the BitAnd operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the BitAnd operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.BitAnd(System.Byte)">
             <summary>
               Performs the BitAnd operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.BitAnd(PytorchSharp.ByteTensor, Byte, PytorchSharp.Byte)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.ByteTensor.BitOr(TorchSharp.ByteTensor,System.Byte,TorchSharp.ByteTensor)">
             <summary>
               Performs the BitOr operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the BitOr operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.BitOr(System.Byte)">
             <summary>
               Performs the BitOr operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.BitOr(PytorchSharp.ByteTensor, Byte, PytorchSharp.Byte)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.ByteTensor.BitXor(TorchSharp.ByteTensor,System.Byte,TorchSharp.ByteTensor)">
             <summary>
               Performs the BitXor operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the BitXor operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.BitXor(System.Byte)">
             <summary>
               Performs the BitXor operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.BitXor(PytorchSharp.ByteTensor, Byte, PytorchSharp.Byte)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.ByteTensor.CAdd(System.Byte,TorchSharp.ByteTensor)">
             <summary>
               Performs the CAdd operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
               where the result is t[idx] + value * src[idx]
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.CSub(System.Byte,TorchSharp.ByteTensor)">
             <summary>
               Performs the CSub operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
               where the result is t[idx] + value * src[idx]
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.Dot(TorchSharp.ByteTensor)">
             <summary>
               Returns the tensor product between this tensor and the provided one
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               The dot product
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.Match(TorchSharp.ByteTensor,System.Byte)">
             <summary>
               Match
             </summary>
             <param name="m2"></param>
             <param name="gain"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.CMul(TorchSharp.ByteTensor)">
             <summary>
               Performs an CMul of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.CPow(TorchSharp.ByteTensor)">
             <summary>
               Performs an CPow of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.CDiv(TorchSharp.ByteTensor)">
             <summary>
               Performs an CDiv of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.CLShift(TorchSharp.ByteTensor)">
             <summary>
               Performs an CLShift of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.CFMod(TorchSharp.ByteTensor)">
             <summary>
               Performs an CFMod of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.CRemainder(TorchSharp.ByteTensor)">
             <summary>
               Performs an CRemainder of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.CBitAnd(TorchSharp.ByteTensor)">
             <summary>
               Performs an CBitAnd of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.CBitOr(TorchSharp.ByteTensor)">
             <summary>
               Performs an CBitOr of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.CBitXor(TorchSharp.ByteTensor)">
             <summary>
               Performs an CBitXor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.CMax(TorchSharp.ByteTensor)">
             <summary>
               Performs an CMax of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.CMin(TorchSharp.ByteTensor)">
             <summary>
               Performs an CMin of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.LtTensor(TorchSharp.ByteTensor)">
             <summary>
               Performs an LtTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.LeTensor(TorchSharp.ByteTensor)">
             <summary>
               Performs an LeTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.GtTensor(TorchSharp.ByteTensor)">
             <summary>
               Performs an GtTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.GeTensor(TorchSharp.ByteTensor)">
             <summary>
               Performs an GeTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.EqTensor(TorchSharp.ByteTensor)">
             <summary>
               Performs an EqTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.NeTensor(TorchSharp.ByteTensor)">
             <summary>
               Performs an NeTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.LtTensorT(TorchSharp.ByteTensor)">
             <summary>
               Performs an LtTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.LeTensorT(TorchSharp.ByteTensor)">
             <summary>
               Performs an LeTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.GtTensorT(TorchSharp.ByteTensor)">
             <summary>
               Performs an GtTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.GeTensorT(TorchSharp.ByteTensor)">
             <summary>
               Performs an GeTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.EqTensorT(TorchSharp.ByteTensor)">
             <summary>
               Performs an EqTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.NeTensorT(TorchSharp.ByteTensor)">
             <summary>
               Performs an NeTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.CMaxValue(System.Byte)">
             <summary>
               Performs an CMaxValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.CMinValue(System.Byte)">
             <summary>
               Performs an CMinValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.LtValue(System.Byte)">
             <summary>
               Performs an LtValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.LeValue(System.Byte)">
             <summary>
               Performs an LeValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.GtValue(System.Byte)">
             <summary>
               Performs an GtValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.GeValue(System.Byte)">
             <summary>
               Performs an GeValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.EqValue(System.Byte)">
             <summary>
               Performs an EqValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.NeValue(System.Byte)">
             <summary>
               Performs an NeValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.LtValueT(System.Byte)">
             <summary>
               Performs an LtValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.LeValueT(System.Byte)">
             <summary>
               Performs an LeValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.GtValueT(System.Byte)">
             <summary>
               Performs an GtValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.GeValueT(System.Byte)">
             <summary>
               Performs an GeValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.EqValueT(System.Byte)">
             <summary>
               Performs an EqValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.NeValueT(System.Byte)">
             <summary>
               Performs an NeValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.LERP(TorchSharp.ByteTensor,System.Byte)">
             <summary>
               LERP
             </summary>
             <param name="other">The right-hand-side operand.</param>
             <param name="weight"></param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Equal(TorchSharp.ByteTensor)">
             <summary>
               Compare the tensor with another for complete equality.
             </summary>
             <param name="other">The right-hand-side operand.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.AddScaled(System.Byte,System.Byte)">
             <summary>
               Performs an AddScaled of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="value1"></param>
             <param name="value2"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.SubScaled(System.Byte,System.Byte)">
             <summary>
               Performs an SubScaled of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="value1"></param>
             <param name="value2"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.Clamp(System.Byte,System.Byte)">
             <summary>
               Performs an Clamp of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="value1"></param>
             <param name="value2"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.AddCMul(System.Byte,TorchSharp.ByteTensor,TorchSharp.ByteTensor)">
             <summary>
               Performs AddCMul of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="value"></param>
             <param name="src1"></param>
             <param name="src2"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.AddCDiv(System.Byte,TorchSharp.ByteTensor,TorchSharp.ByteTensor)">
             <summary>
               Performs AddCDiv of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="value"></param>
             <param name="src1"></param>
             <param name="src2"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.AddMV(System.Byte,System.Byte,TorchSharp.ByteTensor,TorchSharp.ByteTensor)">
             <summary>
               Performs AddMV of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="beta">Multiplier for this tensor (β).</param>
             <param name="alpha">Multiplier for matxvec (α)</param>
             <param name="mat">Matrix to be multiplied</param>
             <param name="vec">Vector to be multiplied</param>
             <remarks>
             β tensor+α (mat@vec)
             </remarks>
             <returns>
               β tensor+α (mat@vec)
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.AddMM(System.Byte,System.Byte,TorchSharp.ByteTensor,TorchSharp.ByteTensor)">
             <summary>
               Performs AddMM of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="beta">Multiplier for this tensor (β).</param>
             <param name="alpha">Multiplier for mat1xmat2 (α)</param>
             <param name="mat1">First matrix to  be multiplied</param>
             <param name="mat2">Second matrix to  be multiplied</param>
             <remarks>
             β mat+α (mat1i@mat2i)
             </remarks>
             <returns>
               β mat+α (mat1i@mat2i)
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.AddBMM(System.Byte,System.Byte,TorchSharp.ByteTensor,TorchSharp.ByteTensor)">
             <summary>
               Performs AddBMM of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="beta">Multiplier for this tensor (β).</param>
             <param name="alpha">Multiplier for batch1xbatch2 (α)</param>
             <param name="batch1">the first batch of matrices to be multiplied</param>
             <param name="batch2">the second batch of matrices to be multiplied</param>
             <remarks>
             β mat+α (∑i=0bbatch1i@batch2i)
             </remarks>
             <returns>
               β mat+α (∑i=0bbatch1i@batch2i)
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.AddR(System.Byte,System.Byte,TorchSharp.ByteTensor,TorchSharp.ByteTensor)">
             <summary>
               Performs AddR of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="beta">Multiplier for this tensor (β).</param>
             <param name="alpha">Multiplier for vec1xvec2 (α)</param>
             <param name="vec1">the first vector of the outer product</param>
             <param name="vec2">the second vector of the outer product</param>
             <remarks>
             β mat+α (vec1⊗vec2)
             </remarks>
             <returns>
               β mat+α (vec1⊗vec2)
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.BAddBMM(System.Byte,System.Byte,TorchSharp.ByteTensor,TorchSharp.ByteTensor)">
             <summary>
               Performs BAddBMM of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="beta">Multiplier for this tensor (β).</param>
             <param name="alpha">Multiplier for batch1xbatch2 (α)</param>
             <param name="batch1">the first batch of matrices to be multiplied</param>
             <param name="batch2">the second batch of matrices to be multiplied</param>
             <remarks>
             β mati+α (batch1i@batch2i)
             </remarks>
             <returns>
               β mati+α (batch1i@batch2i)
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.MinAll">
             <summary>
               Returns the minimum value of the elements in the tensor.
             </summary>
             <returns>
               The minimum value of the tensor.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.MaxAll">
             <summary>
               Returns the maximum value of the elements in the tensor.
             </summary>
             <returns>
               The maximum value of the tensor.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.MedianAll">
             <summary>
               Returns the median of the elements in the tensor.
             </summary>
             <returns>
               The median of the tensor.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.SumAll">
             <summary>
               Returns the sum of the elements in the tensor.
             </summary>
             <returns>
               The sum of the tensor.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.ProdAll">
             <summary>
               Returns the product of the elements in the tensor.
             </summary>
             <returns>
               The product of the tensor.
             </returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.IndexSelect(System.Int32,TorchSharp.LongTensor)">
             <summary>
               Returns a new Tensor which indexes the original Tensor along dimension dim
               using the entries in index.  The returned Tensor has the same number of dimensions as the 
               original Tensor. The returned Tensor does not use the same storage as the original Tensor.
             </summary>
             <param name="dim">Dimension to select</param>
             <param name="index">Entries to extract</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.IndexCopy(System.Int32,TorchSharp.LongTensor,TorchSharp.ByteTensor)">
             <summary>
               Copies the elements of tensor into the original tensor by selecting the indices in the order 
               given in index. The shape of tensor must exactly match the elements indexed or an error will be thrown.
             </summary>
             <param name="dim">Dimension to select for the copy</param>
             <param name="index">Entries to copy</param>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.IndexAdd(System.Int32,TorchSharp.LongTensor,TorchSharp.ByteTensor)">
             <summary>
               Adds the elements of tensor into the original tensor by selecting the indices in the order 
               given in index. The shape of tensor must exactly match the elements indexed or an error will be thrown.
             </summary>
             <param name="dim">Dimension to select for the add</param>
             <param name="index">Entries to copy</param>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.IndexFill(System.Int32,TorchSharp.LongTensor,System.Byte)">
             <summary>
               Uses the given value to overwrite the original tensor by selecting the indices in the order 
               given in index. The shape of tensor must exactly match the elements indexed or an error will be thrown.
             </summary>
             <param name="dim">Dimension to select for the fill</param>
             <param name="index">Entries to copy</param>
             <param name="value">The value to write.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Take(TorchSharp.ByteTensor,TorchSharp.LongTensor)">
             <summary>
               Take
             </summary>        
             <param name="src"></param>
             <param name="index">Indices of entries to copy.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Put(TorchSharp.LongTensor,TorchSharp.ByteTensor,System.Boolean)">
             <summary>
               Put
             </summary>
             <param name="index">Indices of entries to copy.</param>
             <param name="src"></param>
             <param name="accumulate"></param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Gather(TorchSharp.ByteTensor,System.Int32,TorchSharp.LongTensor)">
             <summary>
               Gather
             </summary>
             <param name="src"></param>
             <param name="dim"></param>
             <param name="index">Indices of entries to copy.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Scatter(System.Int32,TorchSharp.LongTensor,TorchSharp.ByteTensor)">
             <summary>
               Scatter
             </summary>
             <param name="dim"></param>
             <param name="index">Indices of entries to copy.</param>
             <param name="src"></param>
            </member>
        <member name="M:TorchSharp.ByteTensor.ScatterAdd(System.Int32,TorchSharp.LongTensor,TorchSharp.ByteTensor)">
             <summary>
               ScatterAdd
             </summary>
             <param name="dim"></param>
             <param name="index">Indices of entries to copy.</param>
             <param name="src"></param>
            </member>
        <member name="M:TorchSharp.ByteTensor.ScatterFill(System.Int32,TorchSharp.LongTensor,System.Byte)">
             <summary>
               ScatterAdd
             </summary>
             <param name="dim"></param>
             <param name="index">Indices of entries to copy.</param>
             <param name="value"></param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Copy(TorchSharp.ByteTensor)">
             <summary>
               Copies the elements of a tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.CopyByte(TorchSharp.ByteTensor)">
             <summary>
               Copies the elements of a byte tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.CopyShort(TorchSharp.ShortTensor)">
             <summary>
               Copies the elements of a short tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.CopyInt(TorchSharp.IntTensor)">
             <summary>
               Copies the elements of a int tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.CopyLong(TorchSharp.LongTensor)">
             <summary>
               Copies the elements of a long tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.CopyFloat(TorchSharp.FloatTensor)">
             <summary>
               Copies the elements of a float tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.CopyDouble(TorchSharp.DoubleTensor)">
             <summary>
               Copies the elements of a double tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.LogicalAndAll">
             <summary>
               Compares all the elements of the tensor using 'AND' and returns the Boolean result. 
             </summary>
            </member>
        <member name="M:TorchSharp.ByteTensor.LogicalAnyAll">
             <summary>
               Compares all the elements of the tensor using 'OR' and returns the Boolean result. 
             </summary>
            </member>
        <member name="M:TorchSharp.ByteTensor.LogicalAnd(System.Int32,System.Boolean)">
             <summary>
               Compares two tensors element-wise and returns the Boolean result tensor encoded as a byte: 0 or 1. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.LogicalAny(System.Int32,System.Boolean)">
             <summary>
               Compares two tensors element-wise and returns the Boolean result tensor encoded as a byte: 0 or 1. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Sum(System.Int32,System.Boolean)">
             <summary>
               Computes the sum of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.CumulativeSum(System.Int32)">
             <summary>
               Computes the cumulative sum of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Prod(System.Int32,System.Boolean)">
             <summary>
               Computes the product of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.CumulativeProd(System.Int32)">
             <summary>
               Computes the cumulative product of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Max(System.Int32,System.Boolean)">
             <summary>
               Computes the max of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
             <returns>A tuple containing the values and indices of the resulting elements.</returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.Min(System.Int32,System.Boolean)">
             <summary>
               Computes the min of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
             <returns>A tuple containing the values and indices of the resulting elements.</returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.Mode(System.Int32,System.Boolean)">
             <summary>
               Computes the mode of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
             <returns>A tuple containing the values and indices of the resulting elements.</returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.Median(System.Int32,System.Boolean)">
             <summary>
               Computes the median of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
             <returns>A tuple containing the values and indices of the resulting elements.</returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.KthValue(System.Int64,System.Int32,System.Boolean)">
             <summary>
               Computes the kth value of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="k">The value for 'k' in 'kth'.</param>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
             <returns>A tuple containing the values and indices of the kth element of each dimension.</returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.Trace">
             <summary>
               Computes the trace of the tensor. 
             </summary>
            </member>
        <member name="M:TorchSharp.ByteTensor.Sign">
             <summary>
               Computes the sign of the tensor. 
             </summary>
            </member>
        <member name="M:TorchSharp.ByteTensor.CrossProduct(TorchSharp.ByteTensor)">
             <summary>
               Computes the cross product of two tensors. 
             </summary>
             <param name="other">The right-hand-side tensor.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Diagonal(System.Int32)">
             <summary>
               Gets the diagonal of the tensor. 
             </summary>
             <param name="k"></param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Eye(System.Int64,System.Int64)">
             <summary>
               Eye. 
             </summary>
             <param name="m"></param>
             <param name="n"></param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Range(System.Int64,System.Int64,System.Int64)">
             <summary>
               Create a range spanning from xmin to xmax, with 'step' between each value.
             </summary>
             <param name="xmin">The lower bound of the range.</param>
             <param name="xmax">The upper bound of the range.</param>
             <param name="step">The value step.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.ARange(System.Int64,System.Int64,System.Int64)">
             <summary>
               Create a range spanning from xmin to xmax, with 'step' between each value.
             </summary>
             <param name="xmin">The lower bound of the range.</param>
             <param name="xmax">The upper bound of the range.</param>
             <param name="step">The value step.</param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Sort(System.Int32,System.Boolean)">
             <summary>
               Sorts the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to sort along.</param>
             <param name="descending">0 if ascending, 1 if descending.</param>
             <returns>A tuple containing the values and indices of the sorted elements.</returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.TopK(System.Int64,System.Int32,System.Int32,System.Boolean)">
             <summary>
               Finds the top k of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="k">The number of elements to fetch.</param>
             <param name="dim">The dimension along which to sort and find k elements.</param>
             <param name="dir">0 if ascending, 1 if descending.</param>
             <param name="sorted">1 if the result should be sorted, 0 if they should keep their original order.</param>
             <returns>A tuple containing the values and indices of the top 'k' elements.</returns>
            </member>
        <member name="M:TorchSharp.ByteTensor.TriL(System.Int64)">
             <summary>
               Lower triangle. 
             </summary>
             <param name="k"></param>
            </member>
        <member name="M:TorchSharp.ByteTensor.TriU(System.Int64)">
             <summary>
               Upper triangle. 
             </summary>
             <param name="k"></param>
            </member>
        <member name="M:TorchSharp.ByteTensor.Concatenate(TorchSharp.ByteTensor,System.Int32)">
             <summary>
               Concatenate tensors along the given dimesion.
             </summary>
             <param name="other">The second tensor.</param>
             <param name="dimension">The dimension along which to concatenate.</param>
            </member>
        <member name="T:TorchSharp.ShortTensor">
             <summary>
               Tensor of type Short.
             </summary>
             <remarks>
               <para>
                 Use the default constructor to create an empty tensor, or invoke one of the
                 constructors with one (1D), two (2D), three (3D), or four parameters (4D) to x
                 create a tensor for the desired number of dimensions.
               </para>
             </remarks>
            </member>
        <member name="T:TorchSharp.ShortTensor.ShortStorage">
             <summary>
                The storage class provides a mechanism to access the underlying data representation for tensors.
             </summary>
            </member>
        <member name="M:TorchSharp.ShortTensor.ShortStorage.#ctor">
             <summary>
               Initializes an empty ShortStorage instance.
             </summary>
            </member>
        <member name="M:TorchSharp.ShortTensor.ShortStorage.#ctor(System.Int64)">
             <summary>
               Initializes a ShortStorage instance with the specified size.
             </summary>        
             <param name="size">The desired number of elements in the storage</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.ShortStorage.Finalize">
             <summary>
             Finalizer
             </summary>
            </member>
        <member name="M:TorchSharp.ShortTensor.ShortStorage.Dispose">
             <summary>
               Releases the storage.
             </summary>        
            </member>
        <member name="M:TorchSharp.ShortTensor.ShortStorage.Dispose(System.Boolean)">
             <summary>
               Implements the .NET Dispose pattern.
             </summary>
            </member>
        <member name="P:TorchSharp.ShortTensor.ShortStorage.Item(System.Int64)">
             <summary>
             </summary>
            </member>
        <member name="M:TorchSharp.ShortTensor.ShortStorage.Resize(System.UInt64)">
             <summary>
               Changes the size of this storage to the new requested size.
             </summary>
             <param name="size">The desired new size.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.ShortStorage.Fill(System.Int16)">
             <summary>
               Fills every element of the storage with the specified value.
             </summary>
             <param name="value">Value used for each element</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.#ctor">
             <summary>
                Creates an empty tensor.
             </summary>
            </member>
        <member name="M:TorchSharp.ShortTensor.#ctor(System.Int64)">
             <summary>
                Creates a 1D tensor of the specified size.
             </summary>    
             <param name="size0">Size for the first dimension.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.#ctor(System.Int64,System.Int64)">
             <summary>
                Creates a 2D tensor of the specified size.
             </summary>        
             <param name="size0">Size for the first dimension.</param>
             <param name="size1">Size for the second dimension.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.#ctor(System.Int64,System.Int64,System.Int64)">
             <summary>
                Creates a 3D tensor of the specified size.
             </summary>        
             <param name="size0">Size for the first dimension.</param>
             <param name="size1">Size for the second dimension.</param>
             <param name="size2">Size for the third dimension.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.#ctor(System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
                Creates a 4D tensor of the specified size.
             </summary>
             <param name="size0">Size for the first dimension.</param>
             <param name="size1">Size for the second dimension.</param>
             <param name="size2">Size for the third dimension.</param>
             <param name="size3">Size for the fourth dimension.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Finalize">
             <summary>
              Finalizer for ~ShortTensor
             </summary>
            </member>
        <member name="M:TorchSharp.ShortTensor.Dispose">
             <summary>
               Releases the tensor and its associated data.
             </summary>        
            </member>
        <member name="M:TorchSharp.ShortTensor.Dispose(System.Boolean)">
             <summary>
               Implements the .NET Dispose pattern.
             </summary>
            </member>
        <member name="M:TorchSharp.ShortTensor.NumElements">
             <summary>
              Get the number of elements in the tensor.
             </summary>
            </member>
        <member name="M:TorchSharp.ShortTensor.ZeroFill">
             <summary>
              Fills the tensor with zeros
             </summary>
            </member>
        <member name="M:TorchSharp.ShortTensor.Fill(System.Int16)">
             <summary>
              Fills the tensor with the specified value
             </summary>
            </member>
        <member name="M:TorchSharp.ShortTensor.NonZero">
             <summary>
              Finds the indices of all non-zero elements.
             </summary>
            </member>
        <member name="M:TorchSharp.ShortTensor.MaskedFill(TorchSharp.ByteTensor,System.Int16)">
             <summary>
              Fills the tensor with the specified value at the locations indicated by the mask.
             </summary>
             <param name="mask">A byte tensor with values 0 or 1 indicating the locations where the value should be filled.</param>
             <param name="value">The value to write at the indicated locations.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.MaskedCopy(TorchSharp.ByteTensor,TorchSharp.ShortTensor)">
             <summary>
              Copies elements from the source tensor to the locations indicated by the mask.
             </summary>
             <param name="mask">A byte tensor with values 0 or 1 indicating the locations where in the destination the value should be filled.</param>
             <param name="src">The source tensor.</param>
             <remarks>
              There must be at least as many elements in the source tensor as there are 1s in the mask.
             </remarks>
            </member>
        <member name="M:TorchSharp.ShortTensor.MaskedSelect(TorchSharp.ByteTensor,TorchSharp.ShortTensor)">
             <summary>
              Copies elements from the source tensor at the locations indicated by the mask.
             </summary>
             <param name="mask">A byte tensor with values 0 or 1 indicating the locations where in the source the value should be fetched.</param>
             <param name="src">The source tensor.</param>
             <remarks>
              There will be as many elements in the tensor as there are 1s in the mask.
              There must be at least as many elements in the source tensor as there are 1s in the mask.
             </remarks>
            </member>
        <member name="P:TorchSharp.ShortTensor.Storage">
             <summary>
              Returns the associated storage for this tensor
             </summary>
            </member>
        <member name="P:TorchSharp.ShortTensor.Dimensions">
             <summary>
              Returns the number of dimensions for this tensor
             </summary>
            </member>
        <member name="M:TorchSharp.ShortTensor.GetTensorDimension(System.Int32)">
             <summary>
              Retrieves the size of the specified dimension in the tensor.
             </summary>
            </member>
        <member name="P:TorchSharp.ShortTensor.Shape">
             <summary>
             Returns the tensor shape, this is an array whose size determines the number of dimensions on the tensor, and each element is the size of the dimension
             </summary>
             <remarks>
                 An array of size 0 is used for constants, an array of size 1 is used
                 for single-dimension arrays, where the dimension is the value of the
                 first element.   And so on.
             </remarks>
            </member>
        <member name="M:TorchSharp.ShortTensor.GetTensorStride(System.Int32)">
             <summary>
              Retrieves the stride of the specified dimension in the tensor.
             </summary>
            </member>
        <member name="P:TorchSharp.ShortTensor.Data">
             <summary>
              Returns a pointer to the unmanaged data managed by this tensor.
             </summary>
            </member>
        <member name="M:TorchSharp.ShortTensor.Clone">
             <summary>
               Returns a deep clone of the tensor
             </summary>
            </member>
        <member name="M:TorchSharp.ShortTensor.Select(System.Int32,System.Int64)">
             <summary>
               Returns a new Tensor which is a tensor slice at the given index in the dimension dim. 
             </summary>
             <remarks>
               The returned tensor has one less dimension: the dimension dim is removed. As a result, it is not possible to select() on a 1D tensor.
             </remarks>
             <param name="dim">Dimension to select</param>
             <param name="slideIndex">Beginning of the tensor slice</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Narrow(System.Int32,System.Int64,System.Int64)">
             <summary>
             Returns a new Tensor which is a narrowed version of the current one: the dimension dim is narrowed from firstIndexto firstIndex+size-1.
             </summary>
             <param name="dim">The dimension to narrow</param>
             <param name="firstIndex">Initial index to narrow</param>
             <param name="size">Number of elements</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Transpose(System.Int32,System.Int32)">
             <summary>
             Returns a tensor where dimensions dim1 and dim2 have been swapped. 
             </summary>
             <param name="dim1">First dimension</param>
             <param name="dim2">Second dimension</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Unfold(System.Int32,System.Int64,System.Int64)">
             <summary>
               Returns a tensor which contains all slices of size size in the dimension dim. Step between two slices is given by step.
             </summary>
             <param name="dim"></param>
             <param name="size"></param>
             <param name="step"></param>
            </member>
        <member name="M:TorchSharp.ShortTensor.NewWithStorage1d(System.IntPtr,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param> 
             <param name="size">Size of the first dimension.</param>     
             <param name="stride">Stride of the first dimension.</param>          
            </member>
        <member name="M:TorchSharp.ShortTensor.NewWithStorage2d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param> 
             <param name="size0">Size of the first dimension.</param>     
             <param name="stride0">Stride of the first dimension.</param>
             <param name="size1">Size of the second dimension.</param>     
             <param name="stride1">Stride of the second dimension.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.NewWithStorage3d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param> 
             <param name="size0">Size of the first dimension.</param>     
             <param name="stride0">Stride of the first dimension.</param>
             <param name="size1">Size of the second dimension.</param>     
             <param name="stride1">Stride of the second dimension.</param>
             <param name="size2">Size of the third dimension.</param>     
             <param name="stride2">Stride of the third dimension.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.NewWithStorage4d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param> 
             <param name="size0">Size of the first dimension.</param>     
             <param name="stride0">Stride of the first dimension.</param>
             <param name="size1">Size of the second dimension.</param>     
             <param name="stride1">Stride of the second dimension.</param>
             <param name="size2">Size of the third dimension.</param>     
             <param name="stride2">Stride of the third dimension.</param>
             <param name="size3">Size of the fourth dimension.</param>     
             <param name="stride3">Stride of the fourth dimension.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Squeeze">
             <summary>
               Squeeze the tensor, i.e. remove all 1-sized dimensions.   
             </summary>
            </member>
        <member name="M:TorchSharp.ShortTensor.Squeeze1d(TorchSharp.ShortTensor,System.Int32)">
             <summary>
               Squeeze the tensor, by removing the specified dimension.   
             </summary>
             <param name="src">The source tensor which contains the data.</param>
             <param name="dimension">The dimension to remove.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Unsqueeze1d(TorchSharp.ShortTensor,System.Int32)">
             <summary>
               Unsqueeze the tensor, by inserting the specified dimension of size 1.   
             </summary>
             <param name="src">The source tensor which contains the data.</param>
             <param name="dimension">The dimension to insert.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Resize1d(System.Int64)">
             <summary>
               Resizes the tensor to be one dimensional with the specified size, the contents of the tensor after this are undetermined.
             </summary>
             <param name="size">The desired new size for the first dimension of the tensor.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Resize2d(System.Int64,System.Int64)">
             <summary>
               Resizes the tensor to be two dimensional with the specified size, the contents of the tensor after this are undetermined.
             </summary>
             <param name="size0">The desired new size for the first dimension of the tensor.</param>
             <param name="size1">The desired new size for the second dimension of the tensor.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Resize3d(System.Int64,System.Int64,System.Int64)">
             <summary>
               Resizes the tensor to be three dimensional with the specified size, the contents of the tensor after this are undetermined.
             </summary>
             <param name="size0">The desired new size for the first dimension of the tensor.</param>
             <param name="size1">The desired new size for the second dimension of the tensor.</param>
             <param name="size2">The desired new size for the third dimension of the tensor.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Resize4d(System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Resizes the tensor to be four dimensional with the specified size, the contents of the tensor after this are undetermined.
             </summary>
             <param name="size0">The desired new size for the first dimension of the tensor.</param>
             <param name="size1">The desired new size for the second dimension of the tensor.</param>
             <param name="size2">The desired new size for the third dimension of the tensor.</param>
             <param name="size3">The desired new size for the fourth dimension of the tensor.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Resize5d(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Resizes the tensor to be five dimensional with the specified size, the contents of the tensor after this are undetermined.
             </summary>
             <param name="size0">The desired new size for the first dimension of the tensor.</param>
             <param name="size1">The desired new size for the second dimension of the tensor.</param>
             <param name="size2">The desired new size for the third dimension of the tensor.</param>
             <param name="size3">The desired new size for the fourth dimension of the tensor.</param>
             <param name="size4">The desired new size for the fifth dimension of the tensor.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.ResizeAs(TorchSharp.ShortTensor)">
             <summary>
               Resizes the tensor to match the dimensions of the specified src tensor, the contents of the tensor after this are undetermined.
             </summary>
             <param name="src">The source tensor whose shape will be mirrored by this tensor.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Set(TorchSharp.ShortTensor)">
             <summary>
               The tensor will use the same storage as the provided source, so any changes to that tensor are visible on this one.   
             </summary>
             <param name="src">The source tensor which contains the data..</param>
            </member>
        <member name="P:TorchSharp.ShortTensor.Item(System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>       
             <param name="x0">Index to access.</param> 
            </member>
        <member name="P:TorchSharp.ShortTensor.Item(System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>    
             <param name="x0">Index in the first dimension to access.</param> 
             <param name="x1">Index in the second dimension to access.</param>     
            </member>
        <member name="P:TorchSharp.ShortTensor.Item(System.Int64,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="x0">Index in the first dimension to access.</param> 
             <param name="x1">Index in the second dimension to access.</param>     
             <param name="x2">Index in the third dimension to access.</param>     
            </member>
        <member name="P:TorchSharp.ShortTensor.Item(System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="x0">Index in the first dimension to access.</param> 
             <param name="x1">Index in the second dimension to access.</param>     
             <param name="x2">Index in the third dimension to access.</param>     
             <param name="x3">Index in the fourth dimension to access.</param>     
            </member>
        <member name="M:TorchSharp.ShortTensor.Random(TorchSharp.RandomGenerator)">
             <summary>
              Populates the tensor with random values using the provided random source generator.
             </summary>
             <param name="source">The random generator source</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.ClampedRandom(TorchSharp.RandomGenerator,System.Int64,System.Int64)">
             <summary>
              Populates the tensor with random values from min to max, using the provided random source generator.
             </summary>
             <param name="source">The random generator source</param>
             <param name="min">The lower limit for the values to be generated</param>
             <param name="max">The upper limit for the values to be generated</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.CappedRandom(TorchSharp.RandomGenerator,System.Int64)">
             <summary>
              Populates the tensor with random values from 0 to max, using the provided random source generator.
             </summary>
             <param name="source">The random generator source</param>
             <param name="max">The upper limit for the values to be generated</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.RandPerm(TorchSharp.RandomGenerator,System.Int64)">
             <summary>
              Populates the tensor with random values from 0 to n, using the provided random source generator.
             </summary>
             <param name="source">The random generator source</param>
             <param name="max">The upper limit for the values to be generated</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Geometric(TorchSharp.RandomGenerator,System.Double)">
             <summary>
              Populates the tensor with random values from 0 to n, using the provided random source generator.
             </summary>
             <param name="source">The random generator source</param>
             <param name="p"></param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Random(System.Int64)">
             <summary>
              Populates the tensor with random values from 0 to n, using a newly initialized Random number geneator.
             </summary>
             <param name="n">The upper limit for the values to be generated</param>        
            </member>
        <member name="M:TorchSharp.ShortTensor.ToString">
             <summary>
               Get a string representation of the tensor.
             </summary>
            </member>
        <member name="M:TorchSharp.ShortTensor.Add(TorchSharp.ShortTensor,System.Int16,TorchSharp.ShortTensor)">
             <summary>
               Performs the Add operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Add operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Add(System.Int16)">
             <summary>
               Performs the Add operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Add(PytorchSharp.ShortTensor, Short, PytorchSharp.Short)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.ShortTensor.Sub(TorchSharp.ShortTensor,System.Int16,TorchSharp.ShortTensor)">
             <summary>
               Performs the Sub operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Sub operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Sub(System.Int16)">
             <summary>
               Performs the Sub operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Sub(PytorchSharp.ShortTensor, Short, PytorchSharp.Short)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.ShortTensor.Mul(TorchSharp.ShortTensor,System.Int16,TorchSharp.ShortTensor)">
             <summary>
               Performs the Mul operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Mul operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Mul(System.Int16)">
             <summary>
               Performs the Mul operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Mul(PytorchSharp.ShortTensor, Short, PytorchSharp.Short)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.ShortTensor.Div(TorchSharp.ShortTensor,System.Int16,TorchSharp.ShortTensor)">
             <summary>
               Performs the Div operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Div operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Div(System.Int16)">
             <summary>
               Performs the Div operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Div(PytorchSharp.ShortTensor, Short, PytorchSharp.Short)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.ShortTensor.LShift(TorchSharp.ShortTensor,System.Int16,TorchSharp.ShortTensor)">
             <summary>
               Performs the LShift operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the LShift operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.LShift(System.Int16)">
             <summary>
               Performs the LShift operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.LShift(PytorchSharp.ShortTensor, Short, PytorchSharp.Short)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.ShortTensor.RShift(TorchSharp.ShortTensor,System.Int16,TorchSharp.ShortTensor)">
             <summary>
               Performs the RShift operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the RShift operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.RShift(System.Int16)">
             <summary>
               Performs the RShift operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.RShift(PytorchSharp.ShortTensor, Short, PytorchSharp.Short)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.ShortTensor.Fmod(TorchSharp.ShortTensor,System.Int16,TorchSharp.ShortTensor)">
             <summary>
               Performs the Fmod operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Fmod operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Fmod(System.Int16)">
             <summary>
               Performs the Fmod operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Fmod(PytorchSharp.ShortTensor, Short, PytorchSharp.Short)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.ShortTensor.Remainder(TorchSharp.ShortTensor,System.Int16,TorchSharp.ShortTensor)">
             <summary>
               Performs the Remainder operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Remainder operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Remainder(System.Int16)">
             <summary>
               Performs the Remainder operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Remainder(PytorchSharp.ShortTensor, Short, PytorchSharp.Short)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.ShortTensor.BitAnd(TorchSharp.ShortTensor,System.Int16,TorchSharp.ShortTensor)">
             <summary>
               Performs the BitAnd operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the BitAnd operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.BitAnd(System.Int16)">
             <summary>
               Performs the BitAnd operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.BitAnd(PytorchSharp.ShortTensor, Short, PytorchSharp.Short)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.ShortTensor.BitOr(TorchSharp.ShortTensor,System.Int16,TorchSharp.ShortTensor)">
             <summary>
               Performs the BitOr operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the BitOr operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.BitOr(System.Int16)">
             <summary>
               Performs the BitOr operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.BitOr(PytorchSharp.ShortTensor, Short, PytorchSharp.Short)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.ShortTensor.BitXor(TorchSharp.ShortTensor,System.Int16,TorchSharp.ShortTensor)">
             <summary>
               Performs the BitXor operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the BitXor operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.BitXor(System.Int16)">
             <summary>
               Performs the BitXor operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.BitXor(PytorchSharp.ShortTensor, Short, PytorchSharp.Short)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.ShortTensor.CAdd(System.Int16,TorchSharp.ShortTensor)">
             <summary>
               Performs the CAdd operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
               where the result is t[idx] + value * src[idx]
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.CSub(System.Int16,TorchSharp.ShortTensor)">
             <summary>
               Performs the CSub operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
               where the result is t[idx] + value * src[idx]
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.Dot(TorchSharp.ShortTensor)">
             <summary>
               Returns the tensor product between this tensor and the provided one
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               The dot product
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.Match(TorchSharp.ShortTensor,System.Int16)">
             <summary>
               Match
             </summary>
             <param name="m2"></param>
             <param name="gain"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.CMul(TorchSharp.ShortTensor)">
             <summary>
               Performs an CMul of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.CPow(TorchSharp.ShortTensor)">
             <summary>
               Performs an CPow of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.CDiv(TorchSharp.ShortTensor)">
             <summary>
               Performs an CDiv of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.CLShift(TorchSharp.ShortTensor)">
             <summary>
               Performs an CLShift of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.CFMod(TorchSharp.ShortTensor)">
             <summary>
               Performs an CFMod of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.CRemainder(TorchSharp.ShortTensor)">
             <summary>
               Performs an CRemainder of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.CBitAnd(TorchSharp.ShortTensor)">
             <summary>
               Performs an CBitAnd of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.CBitOr(TorchSharp.ShortTensor)">
             <summary>
               Performs an CBitOr of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.CBitXor(TorchSharp.ShortTensor)">
             <summary>
               Performs an CBitXor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.CMax(TorchSharp.ShortTensor)">
             <summary>
               Performs an CMax of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.CMin(TorchSharp.ShortTensor)">
             <summary>
               Performs an CMin of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.LtTensor(TorchSharp.ShortTensor)">
             <summary>
               Performs an LtTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.LeTensor(TorchSharp.ShortTensor)">
             <summary>
               Performs an LeTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.GtTensor(TorchSharp.ShortTensor)">
             <summary>
               Performs an GtTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.GeTensor(TorchSharp.ShortTensor)">
             <summary>
               Performs an GeTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.EqTensor(TorchSharp.ShortTensor)">
             <summary>
               Performs an EqTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.NeTensor(TorchSharp.ShortTensor)">
             <summary>
               Performs an NeTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.LtTensorT(TorchSharp.ShortTensor)">
             <summary>
               Performs an LtTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.LeTensorT(TorchSharp.ShortTensor)">
             <summary>
               Performs an LeTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.GtTensorT(TorchSharp.ShortTensor)">
             <summary>
               Performs an GtTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.GeTensorT(TorchSharp.ShortTensor)">
             <summary>
               Performs an GeTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.EqTensorT(TorchSharp.ShortTensor)">
             <summary>
               Performs an EqTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.NeTensorT(TorchSharp.ShortTensor)">
             <summary>
               Performs an NeTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.CMaxValue(System.Int16)">
             <summary>
               Performs an CMaxValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.CMinValue(System.Int16)">
             <summary>
               Performs an CMinValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.LtValue(System.Int16)">
             <summary>
               Performs an LtValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.LeValue(System.Int16)">
             <summary>
               Performs an LeValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.GtValue(System.Int16)">
             <summary>
               Performs an GtValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.GeValue(System.Int16)">
             <summary>
               Performs an GeValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.EqValue(System.Int16)">
             <summary>
               Performs an EqValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.NeValue(System.Int16)">
             <summary>
               Performs an NeValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.LtValueT(System.Int16)">
             <summary>
               Performs an LtValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.LeValueT(System.Int16)">
             <summary>
               Performs an LeValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.GtValueT(System.Int16)">
             <summary>
               Performs an GtValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.GeValueT(System.Int16)">
             <summary>
               Performs an GeValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.EqValueT(System.Int16)">
             <summary>
               Performs an EqValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.NeValueT(System.Int16)">
             <summary>
               Performs an NeValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.LERP(TorchSharp.ShortTensor,System.Int16)">
             <summary>
               LERP
             </summary>
             <param name="other">The right-hand-side operand.</param>
             <param name="weight"></param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Equal(TorchSharp.ShortTensor)">
             <summary>
               Compare the tensor with another for complete equality.
             </summary>
             <param name="other">The right-hand-side operand.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.AddScaled(System.Int16,System.Int16)">
             <summary>
               Performs an AddScaled of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="value1"></param>
             <param name="value2"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.SubScaled(System.Int16,System.Int16)">
             <summary>
               Performs an SubScaled of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="value1"></param>
             <param name="value2"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.Clamp(System.Int16,System.Int16)">
             <summary>
               Performs an Clamp of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="value1"></param>
             <param name="value2"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.AddCMul(System.Int16,TorchSharp.ShortTensor,TorchSharp.ShortTensor)">
             <summary>
               Performs AddCMul of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="value"></param>
             <param name="src1"></param>
             <param name="src2"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.AddCDiv(System.Int16,TorchSharp.ShortTensor,TorchSharp.ShortTensor)">
             <summary>
               Performs AddCDiv of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="value"></param>
             <param name="src1"></param>
             <param name="src2"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.AddMV(System.Int16,System.Int16,TorchSharp.ShortTensor,TorchSharp.ShortTensor)">
             <summary>
               Performs AddMV of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="beta">Multiplier for this tensor (β).</param>
             <param name="alpha">Multiplier for matxvec (α)</param>
             <param name="mat">Matrix to be multiplied</param>
             <param name="vec">Vector to be multiplied</param>
             <remarks>
             β tensor+α (mat@vec)
             </remarks>
             <returns>
               β tensor+α (mat@vec)
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.AddMM(System.Int16,System.Int16,TorchSharp.ShortTensor,TorchSharp.ShortTensor)">
             <summary>
               Performs AddMM of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="beta">Multiplier for this tensor (β).</param>
             <param name="alpha">Multiplier for mat1xmat2 (α)</param>
             <param name="mat1">First matrix to  be multiplied</param>
             <param name="mat2">Second matrix to  be multiplied</param>
             <remarks>
             β mat+α (mat1i@mat2i)
             </remarks>
             <returns>
               β mat+α (mat1i@mat2i)
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.AddBMM(System.Int16,System.Int16,TorchSharp.ShortTensor,TorchSharp.ShortTensor)">
             <summary>
               Performs AddBMM of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="beta">Multiplier for this tensor (β).</param>
             <param name="alpha">Multiplier for batch1xbatch2 (α)</param>
             <param name="batch1">the first batch of matrices to be multiplied</param>
             <param name="batch2">the second batch of matrices to be multiplied</param>
             <remarks>
             β mat+α (∑i=0bbatch1i@batch2i)
             </remarks>
             <returns>
               β mat+α (∑i=0bbatch1i@batch2i)
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.AddR(System.Int16,System.Int16,TorchSharp.ShortTensor,TorchSharp.ShortTensor)">
             <summary>
               Performs AddR of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="beta">Multiplier for this tensor (β).</param>
             <param name="alpha">Multiplier for vec1xvec2 (α)</param>
             <param name="vec1">the first vector of the outer product</param>
             <param name="vec2">the second vector of the outer product</param>
             <remarks>
             β mat+α (vec1⊗vec2)
             </remarks>
             <returns>
               β mat+α (vec1⊗vec2)
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.BAddBMM(System.Int16,System.Int16,TorchSharp.ShortTensor,TorchSharp.ShortTensor)">
             <summary>
               Performs BAddBMM of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="beta">Multiplier for this tensor (β).</param>
             <param name="alpha">Multiplier for batch1xbatch2 (α)</param>
             <param name="batch1">the first batch of matrices to be multiplied</param>
             <param name="batch2">the second batch of matrices to be multiplied</param>
             <remarks>
             β mati+α (batch1i@batch2i)
             </remarks>
             <returns>
               β mati+α (batch1i@batch2i)
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.MinAll">
             <summary>
               Returns the minimum value of the elements in the tensor.
             </summary>
             <returns>
               The minimum value of the tensor.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.MaxAll">
             <summary>
               Returns the maximum value of the elements in the tensor.
             </summary>
             <returns>
               The maximum value of the tensor.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.MedianAll">
             <summary>
               Returns the median of the elements in the tensor.
             </summary>
             <returns>
               The median of the tensor.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.SumAll">
             <summary>
               Returns the sum of the elements in the tensor.
             </summary>
             <returns>
               The sum of the tensor.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.ProdAll">
             <summary>
               Returns the product of the elements in the tensor.
             </summary>
             <returns>
               The product of the tensor.
             </returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.IndexSelect(System.Int32,TorchSharp.LongTensor)">
             <summary>
               Returns a new Tensor which indexes the original Tensor along dimension dim
               using the entries in index.  The returned Tensor has the same number of dimensions as the 
               original Tensor. The returned Tensor does not use the same storage as the original Tensor.
             </summary>
             <param name="dim">Dimension to select</param>
             <param name="index">Entries to extract</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.IndexCopy(System.Int32,TorchSharp.LongTensor,TorchSharp.ShortTensor)">
             <summary>
               Copies the elements of tensor into the original tensor by selecting the indices in the order 
               given in index. The shape of tensor must exactly match the elements indexed or an error will be thrown.
             </summary>
             <param name="dim">Dimension to select for the copy</param>
             <param name="index">Entries to copy</param>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.IndexAdd(System.Int32,TorchSharp.LongTensor,TorchSharp.ShortTensor)">
             <summary>
               Adds the elements of tensor into the original tensor by selecting the indices in the order 
               given in index. The shape of tensor must exactly match the elements indexed or an error will be thrown.
             </summary>
             <param name="dim">Dimension to select for the add</param>
             <param name="index">Entries to copy</param>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.IndexFill(System.Int32,TorchSharp.LongTensor,System.Int16)">
             <summary>
               Uses the given value to overwrite the original tensor by selecting the indices in the order 
               given in index. The shape of tensor must exactly match the elements indexed or an error will be thrown.
             </summary>
             <param name="dim">Dimension to select for the fill</param>
             <param name="index">Entries to copy</param>
             <param name="value">The value to write.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Take(TorchSharp.ShortTensor,TorchSharp.LongTensor)">
             <summary>
               Take
             </summary>        
             <param name="src"></param>
             <param name="index">Indices of entries to copy.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Put(TorchSharp.LongTensor,TorchSharp.ShortTensor,System.Boolean)">
             <summary>
               Put
             </summary>
             <param name="index">Indices of entries to copy.</param>
             <param name="src"></param>
             <param name="accumulate"></param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Gather(TorchSharp.ShortTensor,System.Int32,TorchSharp.LongTensor)">
             <summary>
               Gather
             </summary>
             <param name="src"></param>
             <param name="dim"></param>
             <param name="index">Indices of entries to copy.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Scatter(System.Int32,TorchSharp.LongTensor,TorchSharp.ShortTensor)">
             <summary>
               Scatter
             </summary>
             <param name="dim"></param>
             <param name="index">Indices of entries to copy.</param>
             <param name="src"></param>
            </member>
        <member name="M:TorchSharp.ShortTensor.ScatterAdd(System.Int32,TorchSharp.LongTensor,TorchSharp.ShortTensor)">
             <summary>
               ScatterAdd
             </summary>
             <param name="dim"></param>
             <param name="index">Indices of entries to copy.</param>
             <param name="src"></param>
            </member>
        <member name="M:TorchSharp.ShortTensor.ScatterFill(System.Int32,TorchSharp.LongTensor,System.Int16)">
             <summary>
               ScatterAdd
             </summary>
             <param name="dim"></param>
             <param name="index">Indices of entries to copy.</param>
             <param name="value"></param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Copy(TorchSharp.ShortTensor)">
             <summary>
               Copies the elements of a tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.CopyByte(TorchSharp.ByteTensor)">
             <summary>
               Copies the elements of a byte tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.CopyShort(TorchSharp.ShortTensor)">
             <summary>
               Copies the elements of a short tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.CopyInt(TorchSharp.IntTensor)">
             <summary>
               Copies the elements of a int tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.CopyLong(TorchSharp.LongTensor)">
             <summary>
               Copies the elements of a long tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.CopyFloat(TorchSharp.FloatTensor)">
             <summary>
               Copies the elements of a float tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.CopyDouble(TorchSharp.DoubleTensor)">
             <summary>
               Copies the elements of a double tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Sum(System.Int32,System.Boolean)">
             <summary>
               Computes the sum of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.CumulativeSum(System.Int32)">
             <summary>
               Computes the cumulative sum of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Prod(System.Int32,System.Boolean)">
             <summary>
               Computes the product of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.CumulativeProd(System.Int32)">
             <summary>
               Computes the cumulative product of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Max(System.Int32,System.Boolean)">
             <summary>
               Computes the max of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
             <returns>A tuple containing the values and indices of the resulting elements.</returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.Min(System.Int32,System.Boolean)">
             <summary>
               Computes the min of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
             <returns>A tuple containing the values and indices of the resulting elements.</returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.Mode(System.Int32,System.Boolean)">
             <summary>
               Computes the mode of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
             <returns>A tuple containing the values and indices of the resulting elements.</returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.Median(System.Int32,System.Boolean)">
             <summary>
               Computes the median of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
             <returns>A tuple containing the values and indices of the resulting elements.</returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.KthValue(System.Int64,System.Int32,System.Boolean)">
             <summary>
               Computes the kth value of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="k">The value for 'k' in 'kth'.</param>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
             <returns>A tuple containing the values and indices of the kth element of each dimension.</returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.Trace">
             <summary>
               Computes the trace of the tensor. 
             </summary>
            </member>
        <member name="M:TorchSharp.ShortTensor.Sign">
             <summary>
               Computes the sign of the tensor. 
             </summary>
            </member>
        <member name="M:TorchSharp.ShortTensor.CrossProduct(TorchSharp.ShortTensor)">
             <summary>
               Computes the cross product of two tensors. 
             </summary>
             <param name="other">The right-hand-side tensor.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Diagonal(System.Int32)">
             <summary>
               Gets the diagonal of the tensor. 
             </summary>
             <param name="k"></param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Eye(System.Int64,System.Int64)">
             <summary>
               Eye. 
             </summary>
             <param name="m"></param>
             <param name="n"></param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Range(System.Int64,System.Int64,System.Int64)">
             <summary>
               Create a range spanning from xmin to xmax, with 'step' between each value.
             </summary>
             <param name="xmin">The lower bound of the range.</param>
             <param name="xmax">The upper bound of the range.</param>
             <param name="step">The value step.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.ARange(System.Int64,System.Int64,System.Int64)">
             <summary>
               Create a range spanning from xmin to xmax, with 'step' between each value.
             </summary>
             <param name="xmin">The lower bound of the range.</param>
             <param name="xmax">The upper bound of the range.</param>
             <param name="step">The value step.</param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Sort(System.Int32,System.Boolean)">
             <summary>
               Sorts the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to sort along.</param>
             <param name="descending">0 if ascending, 1 if descending.</param>
             <returns>A tuple containing the values and indices of the sorted elements.</returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.TopK(System.Int64,System.Int32,System.Int32,System.Boolean)">
             <summary>
               Finds the top k of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="k">The number of elements to fetch.</param>
             <param name="dim">The dimension along which to sort and find k elements.</param>
             <param name="dir">0 if ascending, 1 if descending.</param>
             <param name="sorted">1 if the result should be sorted, 0 if they should keep their original order.</param>
             <returns>A tuple containing the values and indices of the top 'k' elements.</returns>
            </member>
        <member name="M:TorchSharp.ShortTensor.TriL(System.Int64)">
             <summary>
               Lower triangle. 
             </summary>
             <param name="k"></param>
            </member>
        <member name="M:TorchSharp.ShortTensor.TriU(System.Int64)">
             <summary>
               Upper triangle. 
             </summary>
             <param name="k"></param>
            </member>
        <member name="M:TorchSharp.ShortTensor.Concatenate(TorchSharp.ShortTensor,System.Int32)">
             <summary>
               Concatenate tensors along the given dimesion.
             </summary>
             <param name="other">The second tensor.</param>
             <param name="dimension">The dimension along which to concatenate.</param>
            </member>
        <member name="T:TorchSharp.IntTensor">
             <summary>
               Tensor of type Int.
             </summary>
             <remarks>
               <para>
                 Use the default constructor to create an empty tensor, or invoke one of the
                 constructors with one (1D), two (2D), three (3D), or four parameters (4D) to x
                 create a tensor for the desired number of dimensions.
               </para>
             </remarks>
            </member>
        <member name="T:TorchSharp.IntTensor.IntStorage">
             <summary>
                The storage class provides a mechanism to access the underlying data representation for tensors.
             </summary>
            </member>
        <member name="M:TorchSharp.IntTensor.IntStorage.#ctor">
             <summary>
               Initializes an empty IntStorage instance.
             </summary>
            </member>
        <member name="M:TorchSharp.IntTensor.IntStorage.#ctor(System.Int64)">
             <summary>
               Initializes a IntStorage instance with the specified size.
             </summary>        
             <param name="size">The desired number of elements in the storage</param>
            </member>
        <member name="M:TorchSharp.IntTensor.IntStorage.Finalize">
             <summary>
             Finalizer
             </summary>
            </member>
        <member name="M:TorchSharp.IntTensor.IntStorage.Dispose">
             <summary>
               Releases the storage.
             </summary>        
            </member>
        <member name="M:TorchSharp.IntTensor.IntStorage.Dispose(System.Boolean)">
             <summary>
               Implements the .NET Dispose pattern.
             </summary>
            </member>
        <member name="P:TorchSharp.IntTensor.IntStorage.Item(System.Int64)">
             <summary>
             </summary>
            </member>
        <member name="M:TorchSharp.IntTensor.IntStorage.Resize(System.UInt64)">
             <summary>
               Changes the size of this storage to the new requested size.
             </summary>
             <param name="size">The desired new size.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.IntStorage.Fill(System.Int32)">
             <summary>
               Fills every element of the storage with the specified value.
             </summary>
             <param name="value">Value used for each element</param>
            </member>
        <member name="M:TorchSharp.IntTensor.#ctor">
             <summary>
                Creates an empty tensor.
             </summary>
            </member>
        <member name="M:TorchSharp.IntTensor.#ctor(System.Int64)">
             <summary>
                Creates a 1D tensor of the specified size.
             </summary>    
             <param name="size0">Size for the first dimension.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.#ctor(System.Int64,System.Int64)">
             <summary>
                Creates a 2D tensor of the specified size.
             </summary>        
             <param name="size0">Size for the first dimension.</param>
             <param name="size1">Size for the second dimension.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.#ctor(System.Int64,System.Int64,System.Int64)">
             <summary>
                Creates a 3D tensor of the specified size.
             </summary>        
             <param name="size0">Size for the first dimension.</param>
             <param name="size1">Size for the second dimension.</param>
             <param name="size2">Size for the third dimension.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.#ctor(System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
                Creates a 4D tensor of the specified size.
             </summary>
             <param name="size0">Size for the first dimension.</param>
             <param name="size1">Size for the second dimension.</param>
             <param name="size2">Size for the third dimension.</param>
             <param name="size3">Size for the fourth dimension.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.Finalize">
             <summary>
              Finalizer for ~IntTensor
             </summary>
            </member>
        <member name="M:TorchSharp.IntTensor.Dispose">
             <summary>
               Releases the tensor and its associated data.
             </summary>        
            </member>
        <member name="M:TorchSharp.IntTensor.Dispose(System.Boolean)">
             <summary>
               Implements the .NET Dispose pattern.
             </summary>
            </member>
        <member name="M:TorchSharp.IntTensor.NumElements">
             <summary>
              Get the number of elements in the tensor.
             </summary>
            </member>
        <member name="M:TorchSharp.IntTensor.ZeroFill">
             <summary>
              Fills the tensor with zeros
             </summary>
            </member>
        <member name="M:TorchSharp.IntTensor.Fill(System.Int32)">
             <summary>
              Fills the tensor with the specified value
             </summary>
            </member>
        <member name="M:TorchSharp.IntTensor.NonZero">
             <summary>
              Finds the indices of all non-zero elements.
             </summary>
            </member>
        <member name="M:TorchSharp.IntTensor.MaskedFill(TorchSharp.ByteTensor,System.Int32)">
             <summary>
              Fills the tensor with the specified value at the locations indicated by the mask.
             </summary>
             <param name="mask">A byte tensor with values 0 or 1 indicating the locations where the value should be filled.</param>
             <param name="value">The value to write at the indicated locations.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.MaskedCopy(TorchSharp.ByteTensor,TorchSharp.IntTensor)">
             <summary>
              Copies elements from the source tensor to the locations indicated by the mask.
             </summary>
             <param name="mask">A byte tensor with values 0 or 1 indicating the locations where in the destination the value should be filled.</param>
             <param name="src">The source tensor.</param>
             <remarks>
              There must be at least as many elements in the source tensor as there are 1s in the mask.
             </remarks>
            </member>
        <member name="M:TorchSharp.IntTensor.MaskedSelect(TorchSharp.ByteTensor,TorchSharp.IntTensor)">
             <summary>
              Copies elements from the source tensor at the locations indicated by the mask.
             </summary>
             <param name="mask">A byte tensor with values 0 or 1 indicating the locations where in the source the value should be fetched.</param>
             <param name="src">The source tensor.</param>
             <remarks>
              There will be as many elements in the tensor as there are 1s in the mask.
              There must be at least as many elements in the source tensor as there are 1s in the mask.
             </remarks>
            </member>
        <member name="P:TorchSharp.IntTensor.Storage">
             <summary>
              Returns the associated storage for this tensor
             </summary>
            </member>
        <member name="P:TorchSharp.IntTensor.Dimensions">
             <summary>
              Returns the number of dimensions for this tensor
             </summary>
            </member>
        <member name="M:TorchSharp.IntTensor.GetTensorDimension(System.Int32)">
             <summary>
              Retrieves the size of the specified dimension in the tensor.
             </summary>
            </member>
        <member name="P:TorchSharp.IntTensor.Shape">
             <summary>
             Returns the tensor shape, this is an array whose size determines the number of dimensions on the tensor, and each element is the size of the dimension
             </summary>
             <remarks>
                 An array of size 0 is used for constants, an array of size 1 is used
                 for single-dimension arrays, where the dimension is the value of the
                 first element.   And so on.
             </remarks>
            </member>
        <member name="M:TorchSharp.IntTensor.GetTensorStride(System.Int32)">
             <summary>
              Retrieves the stride of the specified dimension in the tensor.
             </summary>
            </member>
        <member name="P:TorchSharp.IntTensor.Data">
             <summary>
              Returns a pointer to the unmanaged data managed by this tensor.
             </summary>
            </member>
        <member name="M:TorchSharp.IntTensor.Clone">
             <summary>
               Returns a deep clone of the tensor
             </summary>
            </member>
        <member name="M:TorchSharp.IntTensor.Select(System.Int32,System.Int64)">
             <summary>
               Returns a new Tensor which is a tensor slice at the given index in the dimension dim. 
             </summary>
             <remarks>
               The returned tensor has one less dimension: the dimension dim is removed. As a result, it is not possible to select() on a 1D tensor.
             </remarks>
             <param name="dim">Dimension to select</param>
             <param name="slideIndex">Beginning of the tensor slice</param>
            </member>
        <member name="M:TorchSharp.IntTensor.Narrow(System.Int32,System.Int64,System.Int64)">
             <summary>
             Returns a new Tensor which is a narrowed version of the current one: the dimension dim is narrowed from firstIndexto firstIndex+size-1.
             </summary>
             <param name="dim">The dimension to narrow</param>
             <param name="firstIndex">Initial index to narrow</param>
             <param name="size">Number of elements</param>
            </member>
        <member name="M:TorchSharp.IntTensor.Transpose(System.Int32,System.Int32)">
             <summary>
             Returns a tensor where dimensions dim1 and dim2 have been swapped. 
             </summary>
             <param name="dim1">First dimension</param>
             <param name="dim2">Second dimension</param>
            </member>
        <member name="M:TorchSharp.IntTensor.Unfold(System.Int32,System.Int64,System.Int64)">
             <summary>
               Returns a tensor which contains all slices of size size in the dimension dim. Step between two slices is given by step.
             </summary>
             <param name="dim"></param>
             <param name="size"></param>
             <param name="step"></param>
            </member>
        <member name="M:TorchSharp.IntTensor.NewWithStorage1d(System.IntPtr,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param> 
             <param name="size">Size of the first dimension.</param>     
             <param name="stride">Stride of the first dimension.</param>          
            </member>
        <member name="M:TorchSharp.IntTensor.NewWithStorage2d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param> 
             <param name="size0">Size of the first dimension.</param>     
             <param name="stride0">Stride of the first dimension.</param>
             <param name="size1">Size of the second dimension.</param>     
             <param name="stride1">Stride of the second dimension.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.NewWithStorage3d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param> 
             <param name="size0">Size of the first dimension.</param>     
             <param name="stride0">Stride of the first dimension.</param>
             <param name="size1">Size of the second dimension.</param>     
             <param name="stride1">Stride of the second dimension.</param>
             <param name="size2">Size of the third dimension.</param>     
             <param name="stride2">Stride of the third dimension.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.NewWithStorage4d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param> 
             <param name="size0">Size of the first dimension.</param>     
             <param name="stride0">Stride of the first dimension.</param>
             <param name="size1">Size of the second dimension.</param>     
             <param name="stride1">Stride of the second dimension.</param>
             <param name="size2">Size of the third dimension.</param>     
             <param name="stride2">Stride of the third dimension.</param>
             <param name="size3">Size of the fourth dimension.</param>     
             <param name="stride3">Stride of the fourth dimension.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.Squeeze">
             <summary>
               Squeeze the tensor, i.e. remove all 1-sized dimensions.   
             </summary>
            </member>
        <member name="M:TorchSharp.IntTensor.Squeeze1d(TorchSharp.IntTensor,System.Int32)">
             <summary>
               Squeeze the tensor, by removing the specified dimension.   
             </summary>
             <param name="src">The source tensor which contains the data.</param>
             <param name="dimension">The dimension to remove.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.Unsqueeze1d(TorchSharp.IntTensor,System.Int32)">
             <summary>
               Unsqueeze the tensor, by inserting the specified dimension of size 1.   
             </summary>
             <param name="src">The source tensor which contains the data.</param>
             <param name="dimension">The dimension to insert.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.Resize1d(System.Int64)">
             <summary>
               Resizes the tensor to be one dimensional with the specified size, the contents of the tensor after this are undetermined.
             </summary>
             <param name="size">The desired new size for the first dimension of the tensor.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.Resize2d(System.Int64,System.Int64)">
             <summary>
               Resizes the tensor to be two dimensional with the specified size, the contents of the tensor after this are undetermined.
             </summary>
             <param name="size0">The desired new size for the first dimension of the tensor.</param>
             <param name="size1">The desired new size for the second dimension of the tensor.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.Resize3d(System.Int64,System.Int64,System.Int64)">
             <summary>
               Resizes the tensor to be three dimensional with the specified size, the contents of the tensor after this are undetermined.
             </summary>
             <param name="size0">The desired new size for the first dimension of the tensor.</param>
             <param name="size1">The desired new size for the second dimension of the tensor.</param>
             <param name="size2">The desired new size for the third dimension of the tensor.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.Resize4d(System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Resizes the tensor to be four dimensional with the specified size, the contents of the tensor after this are undetermined.
             </summary>
             <param name="size0">The desired new size for the first dimension of the tensor.</param>
             <param name="size1">The desired new size for the second dimension of the tensor.</param>
             <param name="size2">The desired new size for the third dimension of the tensor.</param>
             <param name="size3">The desired new size for the fourth dimension of the tensor.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.Resize5d(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Resizes the tensor to be five dimensional with the specified size, the contents of the tensor after this are undetermined.
             </summary>
             <param name="size0">The desired new size for the first dimension of the tensor.</param>
             <param name="size1">The desired new size for the second dimension of the tensor.</param>
             <param name="size2">The desired new size for the third dimension of the tensor.</param>
             <param name="size3">The desired new size for the fourth dimension of the tensor.</param>
             <param name="size4">The desired new size for the fifth dimension of the tensor.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.ResizeAs(TorchSharp.IntTensor)">
             <summary>
               Resizes the tensor to match the dimensions of the specified src tensor, the contents of the tensor after this are undetermined.
             </summary>
             <param name="src">The source tensor whose shape will be mirrored by this tensor.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.Set(TorchSharp.IntTensor)">
             <summary>
               The tensor will use the same storage as the provided source, so any changes to that tensor are visible on this one.   
             </summary>
             <param name="src">The source tensor which contains the data..</param>
            </member>
        <member name="P:TorchSharp.IntTensor.Item(System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>       
             <param name="x0">Index to access.</param> 
            </member>
        <member name="P:TorchSharp.IntTensor.Item(System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>    
             <param name="x0">Index in the first dimension to access.</param> 
             <param name="x1">Index in the second dimension to access.</param>     
            </member>
        <member name="P:TorchSharp.IntTensor.Item(System.Int64,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="x0">Index in the first dimension to access.</param> 
             <param name="x1">Index in the second dimension to access.</param>     
             <param name="x2">Index in the third dimension to access.</param>     
            </member>
        <member name="P:TorchSharp.IntTensor.Item(System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="x0">Index in the first dimension to access.</param> 
             <param name="x1">Index in the second dimension to access.</param>     
             <param name="x2">Index in the third dimension to access.</param>     
             <param name="x3">Index in the fourth dimension to access.</param>     
            </member>
        <member name="M:TorchSharp.IntTensor.Random(TorchSharp.RandomGenerator)">
             <summary>
              Populates the tensor with random values using the provided random source generator.
             </summary>
             <param name="source">The random generator source</param>
            </member>
        <member name="M:TorchSharp.IntTensor.ClampedRandom(TorchSharp.RandomGenerator,System.Int64,System.Int64)">
             <summary>
              Populates the tensor with random values from min to max, using the provided random source generator.
             </summary>
             <param name="source">The random generator source</param>
             <param name="min">The lower limit for the values to be generated</param>
             <param name="max">The upper limit for the values to be generated</param>
            </member>
        <member name="M:TorchSharp.IntTensor.CappedRandom(TorchSharp.RandomGenerator,System.Int64)">
             <summary>
              Populates the tensor with random values from 0 to max, using the provided random source generator.
             </summary>
             <param name="source">The random generator source</param>
             <param name="max">The upper limit for the values to be generated</param>
            </member>
        <member name="M:TorchSharp.IntTensor.RandPerm(TorchSharp.RandomGenerator,System.Int64)">
             <summary>
              Populates the tensor with random values from 0 to n, using the provided random source generator.
             </summary>
             <param name="source">The random generator source</param>
             <param name="max">The upper limit for the values to be generated</param>
            </member>
        <member name="M:TorchSharp.IntTensor.Geometric(TorchSharp.RandomGenerator,System.Double)">
             <summary>
              Populates the tensor with random values from 0 to n, using the provided random source generator.
             </summary>
             <param name="source">The random generator source</param>
             <param name="p"></param>
            </member>
        <member name="M:TorchSharp.IntTensor.Random(System.Int64)">
             <summary>
              Populates the tensor with random values from 0 to n, using a newly initialized Random number geneator.
             </summary>
             <param name="n">The upper limit for the values to be generated</param>        
            </member>
        <member name="M:TorchSharp.IntTensor.ToString">
             <summary>
               Get a string representation of the tensor.
             </summary>
            </member>
        <member name="M:TorchSharp.IntTensor.Add(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)">
             <summary>
               Performs the Add operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Add operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.IntTensor.Add(System.Int32)">
             <summary>
               Performs the Add operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Add(PytorchSharp.IntTensor, Int, PytorchSharp.Int)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.IntTensor.Sub(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)">
             <summary>
               Performs the Sub operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Sub operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.IntTensor.Sub(System.Int32)">
             <summary>
               Performs the Sub operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Sub(PytorchSharp.IntTensor, Int, PytorchSharp.Int)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.IntTensor.Mul(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)">
             <summary>
               Performs the Mul operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Mul operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.IntTensor.Mul(System.Int32)">
             <summary>
               Performs the Mul operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Mul(PytorchSharp.IntTensor, Int, PytorchSharp.Int)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.IntTensor.Div(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)">
             <summary>
               Performs the Div operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Div operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.IntTensor.Div(System.Int32)">
             <summary>
               Performs the Div operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Div(PytorchSharp.IntTensor, Int, PytorchSharp.Int)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.IntTensor.LShift(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)">
             <summary>
               Performs the LShift operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the LShift operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.IntTensor.LShift(System.Int32)">
             <summary>
               Performs the LShift operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.LShift(PytorchSharp.IntTensor, Int, PytorchSharp.Int)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.IntTensor.RShift(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)">
             <summary>
               Performs the RShift operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the RShift operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.IntTensor.RShift(System.Int32)">
             <summary>
               Performs the RShift operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.RShift(PytorchSharp.IntTensor, Int, PytorchSharp.Int)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.IntTensor.Fmod(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)">
             <summary>
               Performs the Fmod operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Fmod operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.IntTensor.Fmod(System.Int32)">
             <summary>
               Performs the Fmod operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Fmod(PytorchSharp.IntTensor, Int, PytorchSharp.Int)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.IntTensor.Remainder(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)">
             <summary>
               Performs the Remainder operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Remainder operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.IntTensor.Remainder(System.Int32)">
             <summary>
               Performs the Remainder operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Remainder(PytorchSharp.IntTensor, Int, PytorchSharp.Int)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.IntTensor.BitAnd(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)">
             <summary>
               Performs the BitAnd operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the BitAnd operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.IntTensor.BitAnd(System.Int32)">
             <summary>
               Performs the BitAnd operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.BitAnd(PytorchSharp.IntTensor, Int, PytorchSharp.Int)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.IntTensor.BitOr(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)">
             <summary>
               Performs the BitOr operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the BitOr operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.IntTensor.BitOr(System.Int32)">
             <summary>
               Performs the BitOr operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.BitOr(PytorchSharp.IntTensor, Int, PytorchSharp.Int)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.IntTensor.BitXor(TorchSharp.IntTensor,System.Int32,TorchSharp.IntTensor)">
             <summary>
               Performs the BitXor operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the BitXor operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.IntTensor.BitXor(System.Int32)">
             <summary>
               Performs the BitXor operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.BitXor(PytorchSharp.IntTensor, Int, PytorchSharp.Int)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.IntTensor.CAdd(System.Int32,TorchSharp.IntTensor)">
             <summary>
               Performs the CAdd operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
               where the result is t[idx] + value * src[idx]
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.CSub(System.Int32,TorchSharp.IntTensor)">
             <summary>
               Performs the CSub operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
               where the result is t[idx] + value * src[idx]
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.Dot(TorchSharp.IntTensor)">
             <summary>
               Returns the tensor product between this tensor and the provided one
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               The dot product
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.Match(TorchSharp.IntTensor,System.Int32)">
             <summary>
               Match
             </summary>
             <param name="m2"></param>
             <param name="gain"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.CMul(TorchSharp.IntTensor)">
             <summary>
               Performs an CMul of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.CPow(TorchSharp.IntTensor)">
             <summary>
               Performs an CPow of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.CDiv(TorchSharp.IntTensor)">
             <summary>
               Performs an CDiv of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.CLShift(TorchSharp.IntTensor)">
             <summary>
               Performs an CLShift of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.CFMod(TorchSharp.IntTensor)">
             <summary>
               Performs an CFMod of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.CRemainder(TorchSharp.IntTensor)">
             <summary>
               Performs an CRemainder of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.CBitAnd(TorchSharp.IntTensor)">
             <summary>
               Performs an CBitAnd of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.CBitOr(TorchSharp.IntTensor)">
             <summary>
               Performs an CBitOr of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.CBitXor(TorchSharp.IntTensor)">
             <summary>
               Performs an CBitXor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.CMax(TorchSharp.IntTensor)">
             <summary>
               Performs an CMax of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.CMin(TorchSharp.IntTensor)">
             <summary>
               Performs an CMin of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.LtTensor(TorchSharp.IntTensor)">
             <summary>
               Performs an LtTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.LeTensor(TorchSharp.IntTensor)">
             <summary>
               Performs an LeTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.GtTensor(TorchSharp.IntTensor)">
             <summary>
               Performs an GtTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.GeTensor(TorchSharp.IntTensor)">
             <summary>
               Performs an GeTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.EqTensor(TorchSharp.IntTensor)">
             <summary>
               Performs an EqTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.NeTensor(TorchSharp.IntTensor)">
             <summary>
               Performs an NeTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.LtTensorT(TorchSharp.IntTensor)">
             <summary>
               Performs an LtTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.LeTensorT(TorchSharp.IntTensor)">
             <summary>
               Performs an LeTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.GtTensorT(TorchSharp.IntTensor)">
             <summary>
               Performs an GtTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.GeTensorT(TorchSharp.IntTensor)">
             <summary>
               Performs an GeTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.EqTensorT(TorchSharp.IntTensor)">
             <summary>
               Performs an EqTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.NeTensorT(TorchSharp.IntTensor)">
             <summary>
               Performs an NeTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.CMaxValue(System.Int32)">
             <summary>
               Performs an CMaxValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.CMinValue(System.Int32)">
             <summary>
               Performs an CMinValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.LtValue(System.Int32)">
             <summary>
               Performs an LtValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.LeValue(System.Int32)">
             <summary>
               Performs an LeValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.GtValue(System.Int32)">
             <summary>
               Performs an GtValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.GeValue(System.Int32)">
             <summary>
               Performs an GeValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.EqValue(System.Int32)">
             <summary>
               Performs an EqValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.NeValue(System.Int32)">
             <summary>
               Performs an NeValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.LtValueT(System.Int32)">
             <summary>
               Performs an LtValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.LeValueT(System.Int32)">
             <summary>
               Performs an LeValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.GtValueT(System.Int32)">
             <summary>
               Performs an GtValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.GeValueT(System.Int32)">
             <summary>
               Performs an GeValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.EqValueT(System.Int32)">
             <summary>
               Performs an EqValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.NeValueT(System.Int32)">
             <summary>
               Performs an NeValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.LERP(TorchSharp.IntTensor,System.Int32)">
             <summary>
               LERP
             </summary>
             <param name="other">The right-hand-side operand.</param>
             <param name="weight"></param>
            </member>
        <member name="M:TorchSharp.IntTensor.Equal(TorchSharp.IntTensor)">
             <summary>
               Compare the tensor with another for complete equality.
             </summary>
             <param name="other">The right-hand-side operand.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.AddScaled(System.Int32,System.Int32)">
             <summary>
               Performs an AddScaled of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="value1"></param>
             <param name="value2"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.SubScaled(System.Int32,System.Int32)">
             <summary>
               Performs an SubScaled of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="value1"></param>
             <param name="value2"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.Clamp(System.Int32,System.Int32)">
             <summary>
               Performs an Clamp of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="value1"></param>
             <param name="value2"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.AddCMul(System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)">
             <summary>
               Performs AddCMul of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="value"></param>
             <param name="src1"></param>
             <param name="src2"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.AddCDiv(System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)">
             <summary>
               Performs AddCDiv of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="value"></param>
             <param name="src1"></param>
             <param name="src2"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.AddMV(System.Int32,System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)">
             <summary>
               Performs AddMV of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="beta">Multiplier for this tensor (β).</param>
             <param name="alpha">Multiplier for matxvec (α)</param>
             <param name="mat">Matrix to be multiplied</param>
             <param name="vec">Vector to be multiplied</param>
             <remarks>
             β tensor+α (mat@vec)
             </remarks>
             <returns>
               β tensor+α (mat@vec)
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.AddMM(System.Int32,System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)">
             <summary>
               Performs AddMM of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="beta">Multiplier for this tensor (β).</param>
             <param name="alpha">Multiplier for mat1xmat2 (α)</param>
             <param name="mat1">First matrix to  be multiplied</param>
             <param name="mat2">Second matrix to  be multiplied</param>
             <remarks>
             β mat+α (mat1i@mat2i)
             </remarks>
             <returns>
               β mat+α (mat1i@mat2i)
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.AddBMM(System.Int32,System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)">
             <summary>
               Performs AddBMM of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="beta">Multiplier for this tensor (β).</param>
             <param name="alpha">Multiplier for batch1xbatch2 (α)</param>
             <param name="batch1">the first batch of matrices to be multiplied</param>
             <param name="batch2">the second batch of matrices to be multiplied</param>
             <remarks>
             β mat+α (∑i=0bbatch1i@batch2i)
             </remarks>
             <returns>
               β mat+α (∑i=0bbatch1i@batch2i)
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.AddR(System.Int32,System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)">
             <summary>
               Performs AddR of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="beta">Multiplier for this tensor (β).</param>
             <param name="alpha">Multiplier for vec1xvec2 (α)</param>
             <param name="vec1">the first vector of the outer product</param>
             <param name="vec2">the second vector of the outer product</param>
             <remarks>
             β mat+α (vec1⊗vec2)
             </remarks>
             <returns>
               β mat+α (vec1⊗vec2)
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.BAddBMM(System.Int32,System.Int32,TorchSharp.IntTensor,TorchSharp.IntTensor)">
             <summary>
               Performs BAddBMM of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="beta">Multiplier for this tensor (β).</param>
             <param name="alpha">Multiplier for batch1xbatch2 (α)</param>
             <param name="batch1">the first batch of matrices to be multiplied</param>
             <param name="batch2">the second batch of matrices to be multiplied</param>
             <remarks>
             β mati+α (batch1i@batch2i)
             </remarks>
             <returns>
               β mati+α (batch1i@batch2i)
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.MinAll">
             <summary>
               Returns the minimum value of the elements in the tensor.
             </summary>
             <returns>
               The minimum value of the tensor.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.MaxAll">
             <summary>
               Returns the maximum value of the elements in the tensor.
             </summary>
             <returns>
               The maximum value of the tensor.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.MedianAll">
             <summary>
               Returns the median of the elements in the tensor.
             </summary>
             <returns>
               The median of the tensor.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.SumAll">
             <summary>
               Returns the sum of the elements in the tensor.
             </summary>
             <returns>
               The sum of the tensor.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.ProdAll">
             <summary>
               Returns the product of the elements in the tensor.
             </summary>
             <returns>
               The product of the tensor.
             </returns>
            </member>
        <member name="M:TorchSharp.IntTensor.IndexSelect(System.Int32,TorchSharp.LongTensor)">
             <summary>
               Returns a new Tensor which indexes the original Tensor along dimension dim
               using the entries in index.  The returned Tensor has the same number of dimensions as the 
               original Tensor. The returned Tensor does not use the same storage as the original Tensor.
             </summary>
             <param name="dim">Dimension to select</param>
             <param name="index">Entries to extract</param>
            </member>
        <member name="M:TorchSharp.IntTensor.IndexCopy(System.Int32,TorchSharp.LongTensor,TorchSharp.IntTensor)">
             <summary>
               Copies the elements of tensor into the original tensor by selecting the indices in the order 
               given in index. The shape of tensor must exactly match the elements indexed or an error will be thrown.
             </summary>
             <param name="dim">Dimension to select for the copy</param>
             <param name="index">Entries to copy</param>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.IndexAdd(System.Int32,TorchSharp.LongTensor,TorchSharp.IntTensor)">
             <summary>
               Adds the elements of tensor into the original tensor by selecting the indices in the order 
               given in index. The shape of tensor must exactly match the elements indexed or an error will be thrown.
             </summary>
             <param name="dim">Dimension to select for the add</param>
             <param name="index">Entries to copy</param>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.IndexFill(System.Int32,TorchSharp.LongTensor,System.Int32)">
             <summary>
               Uses the given value to overwrite the original tensor by selecting the indices in the order 
               given in index. The shape of tensor must exactly match the elements indexed or an error will be thrown.
             </summary>
             <param name="dim">Dimension to select for the fill</param>
             <param name="index">Entries to copy</param>
             <param name="value">The value to write.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.Take(TorchSharp.IntTensor,TorchSharp.LongTensor)">
             <summary>
               Take
             </summary>        
             <param name="src"></param>
             <param name="index">Indices of entries to copy.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.Put(TorchSharp.LongTensor,TorchSharp.IntTensor,System.Boolean)">
             <summary>
               Put
             </summary>
             <param name="index">Indices of entries to copy.</param>
             <param name="src"></param>
             <param name="accumulate"></param>
            </member>
        <member name="M:TorchSharp.IntTensor.Gather(TorchSharp.IntTensor,System.Int32,TorchSharp.LongTensor)">
             <summary>
               Gather
             </summary>
             <param name="src"></param>
             <param name="dim"></param>
             <param name="index">Indices of entries to copy.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.Scatter(System.Int32,TorchSharp.LongTensor,TorchSharp.IntTensor)">
             <summary>
               Scatter
             </summary>
             <param name="dim"></param>
             <param name="index">Indices of entries to copy.</param>
             <param name="src"></param>
            </member>
        <member name="M:TorchSharp.IntTensor.ScatterAdd(System.Int32,TorchSharp.LongTensor,TorchSharp.IntTensor)">
             <summary>
               ScatterAdd
             </summary>
             <param name="dim"></param>
             <param name="index">Indices of entries to copy.</param>
             <param name="src"></param>
            </member>
        <member name="M:TorchSharp.IntTensor.ScatterFill(System.Int32,TorchSharp.LongTensor,System.Int32)">
             <summary>
               ScatterAdd
             </summary>
             <param name="dim"></param>
             <param name="index">Indices of entries to copy.</param>
             <param name="value"></param>
            </member>
        <member name="M:TorchSharp.IntTensor.Copy(TorchSharp.IntTensor)">
             <summary>
               Copies the elements of a tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.CopyByte(TorchSharp.ByteTensor)">
             <summary>
               Copies the elements of a byte tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.CopyShort(TorchSharp.ShortTensor)">
             <summary>
               Copies the elements of a short tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.CopyInt(TorchSharp.IntTensor)">
             <summary>
               Copies the elements of a int tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.CopyLong(TorchSharp.LongTensor)">
             <summary>
               Copies the elements of a long tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.CopyFloat(TorchSharp.FloatTensor)">
             <summary>
               Copies the elements of a float tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.CopyDouble(TorchSharp.DoubleTensor)">
             <summary>
               Copies the elements of a double tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.Sum(System.Int32,System.Boolean)">
             <summary>
               Computes the sum of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.CumulativeSum(System.Int32)">
             <summary>
               Computes the cumulative sum of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.Prod(System.Int32,System.Boolean)">
             <summary>
               Computes the product of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.CumulativeProd(System.Int32)">
             <summary>
               Computes the cumulative product of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.Max(System.Int32,System.Boolean)">
             <summary>
               Computes the max of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
             <returns>A tuple containing the values and indices of the resulting elements.</returns>
            </member>
        <member name="M:TorchSharp.IntTensor.Min(System.Int32,System.Boolean)">
             <summary>
               Computes the min of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
             <returns>A tuple containing the values and indices of the resulting elements.</returns>
            </member>
        <member name="M:TorchSharp.IntTensor.Mode(System.Int32,System.Boolean)">
             <summary>
               Computes the mode of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
             <returns>A tuple containing the values and indices of the resulting elements.</returns>
            </member>
        <member name="M:TorchSharp.IntTensor.Median(System.Int32,System.Boolean)">
             <summary>
               Computes the median of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
             <returns>A tuple containing the values and indices of the resulting elements.</returns>
            </member>
        <member name="M:TorchSharp.IntTensor.KthValue(System.Int64,System.Int32,System.Boolean)">
             <summary>
               Computes the kth value of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="k">The value for 'k' in 'kth'.</param>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
             <returns>A tuple containing the values and indices of the kth element of each dimension.</returns>
            </member>
        <member name="M:TorchSharp.IntTensor.Trace">
             <summary>
               Computes the trace of the tensor. 
             </summary>
            </member>
        <member name="M:TorchSharp.IntTensor.Sign">
             <summary>
               Computes the sign of the tensor. 
             </summary>
            </member>
        <member name="M:TorchSharp.IntTensor.CrossProduct(TorchSharp.IntTensor)">
             <summary>
               Computes the cross product of two tensors. 
             </summary>
             <param name="other">The right-hand-side tensor.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.Diagonal(System.Int32)">
             <summary>
               Gets the diagonal of the tensor. 
             </summary>
             <param name="k"></param>
            </member>
        <member name="M:TorchSharp.IntTensor.Eye(System.Int64,System.Int64)">
             <summary>
               Eye. 
             </summary>
             <param name="m"></param>
             <param name="n"></param>
            </member>
        <member name="M:TorchSharp.IntTensor.Range(System.Int64,System.Int64,System.Int64)">
             <summary>
               Create a range spanning from xmin to xmax, with 'step' between each value.
             </summary>
             <param name="xmin">The lower bound of the range.</param>
             <param name="xmax">The upper bound of the range.</param>
             <param name="step">The value step.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.ARange(System.Int64,System.Int64,System.Int64)">
             <summary>
               Create a range spanning from xmin to xmax, with 'step' between each value.
             </summary>
             <param name="xmin">The lower bound of the range.</param>
             <param name="xmax">The upper bound of the range.</param>
             <param name="step">The value step.</param>
            </member>
        <member name="M:TorchSharp.IntTensor.Sort(System.Int32,System.Boolean)">
             <summary>
               Sorts the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to sort along.</param>
             <param name="descending">0 if ascending, 1 if descending.</param>
             <returns>A tuple containing the values and indices of the sorted elements.</returns>
            </member>
        <member name="M:TorchSharp.IntTensor.TopK(System.Int64,System.Int32,System.Int32,System.Boolean)">
             <summary>
               Finds the top k of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="k">The number of elements to fetch.</param>
             <param name="dim">The dimension along which to sort and find k elements.</param>
             <param name="dir">0 if ascending, 1 if descending.</param>
             <param name="sorted">1 if the result should be sorted, 0 if they should keep their original order.</param>
             <returns>A tuple containing the values and indices of the top 'k' elements.</returns>
            </member>
        <member name="M:TorchSharp.IntTensor.TriL(System.Int64)">
             <summary>
               Lower triangle. 
             </summary>
             <param name="k"></param>
            </member>
        <member name="M:TorchSharp.IntTensor.TriU(System.Int64)">
             <summary>
               Upper triangle. 
             </summary>
             <param name="k"></param>
            </member>
        <member name="M:TorchSharp.IntTensor.Concatenate(TorchSharp.IntTensor,System.Int32)">
             <summary>
               Concatenate tensors along the given dimesion.
             </summary>
             <param name="other">The second tensor.</param>
             <param name="dimension">The dimension along which to concatenate.</param>
            </member>
        <member name="T:TorchSharp.LongTensor">
             <summary>
               Tensor of type Long.
             </summary>
             <remarks>
               <para>
                 Use the default constructor to create an empty tensor, or invoke one of the
                 constructors with one (1D), two (2D), three (3D), or four parameters (4D) to x
                 create a tensor for the desired number of dimensions.
               </para>
             </remarks>
            </member>
        <member name="T:TorchSharp.LongTensor.LongStorage">
             <summary>
                The storage class provides a mechanism to access the underlying data representation for tensors.
             </summary>
            </member>
        <member name="M:TorchSharp.LongTensor.LongStorage.#ctor">
             <summary>
               Initializes an empty LongStorage instance.
             </summary>
            </member>
        <member name="M:TorchSharp.LongTensor.LongStorage.#ctor(System.Int64)">
             <summary>
               Initializes a LongStorage instance with the specified size.
             </summary>        
             <param name="size">The desired number of elements in the storage</param>
            </member>
        <member name="M:TorchSharp.LongTensor.LongStorage.Finalize">
             <summary>
             Finalizer
             </summary>
            </member>
        <member name="M:TorchSharp.LongTensor.LongStorage.Dispose">
             <summary>
               Releases the storage.
             </summary>        
            </member>
        <member name="M:TorchSharp.LongTensor.LongStorage.Dispose(System.Boolean)">
             <summary>
               Implements the .NET Dispose pattern.
             </summary>
            </member>
        <member name="P:TorchSharp.LongTensor.LongStorage.Item(System.Int64)">
             <summary>
             </summary>
            </member>
        <member name="M:TorchSharp.LongTensor.LongStorage.Resize(System.UInt64)">
             <summary>
               Changes the size of this storage to the new requested size.
             </summary>
             <param name="size">The desired new size.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.LongStorage.Fill(System.Int64)">
             <summary>
               Fills every element of the storage with the specified value.
             </summary>
             <param name="value">Value used for each element</param>
            </member>
        <member name="M:TorchSharp.LongTensor.#ctor">
             <summary>
                Creates an empty tensor.
             </summary>
            </member>
        <member name="M:TorchSharp.LongTensor.#ctor(System.Int64)">
             <summary>
                Creates a 1D tensor of the specified size.
             </summary>    
             <param name="size0">Size for the first dimension.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.#ctor(System.Int64,System.Int64)">
             <summary>
                Creates a 2D tensor of the specified size.
             </summary>        
             <param name="size0">Size for the first dimension.</param>
             <param name="size1">Size for the second dimension.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.#ctor(System.Int64,System.Int64,System.Int64)">
             <summary>
                Creates a 3D tensor of the specified size.
             </summary>        
             <param name="size0">Size for the first dimension.</param>
             <param name="size1">Size for the second dimension.</param>
             <param name="size2">Size for the third dimension.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.#ctor(System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
                Creates a 4D tensor of the specified size.
             </summary>
             <param name="size0">Size for the first dimension.</param>
             <param name="size1">Size for the second dimension.</param>
             <param name="size2">Size for the third dimension.</param>
             <param name="size3">Size for the fourth dimension.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.Finalize">
             <summary>
              Finalizer for ~LongTensor
             </summary>
            </member>
        <member name="M:TorchSharp.LongTensor.Dispose">
             <summary>
               Releases the tensor and its associated data.
             </summary>        
            </member>
        <member name="M:TorchSharp.LongTensor.Dispose(System.Boolean)">
             <summary>
               Implements the .NET Dispose pattern.
             </summary>
            </member>
        <member name="M:TorchSharp.LongTensor.NumElements">
             <summary>
              Get the number of elements in the tensor.
             </summary>
            </member>
        <member name="M:TorchSharp.LongTensor.ZeroFill">
             <summary>
              Fills the tensor with zeros
             </summary>
            </member>
        <member name="M:TorchSharp.LongTensor.Fill(System.Int64)">
             <summary>
              Fills the tensor with the specified value
             </summary>
            </member>
        <member name="M:TorchSharp.LongTensor.NonZero">
             <summary>
              Finds the indices of all non-zero elements.
             </summary>
            </member>
        <member name="M:TorchSharp.LongTensor.MaskedFill(TorchSharp.ByteTensor,System.Int64)">
             <summary>
              Fills the tensor with the specified value at the locations indicated by the mask.
             </summary>
             <param name="mask">A byte tensor with values 0 or 1 indicating the locations where the value should be filled.</param>
             <param name="value">The value to write at the indicated locations.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.MaskedCopy(TorchSharp.ByteTensor,TorchSharp.LongTensor)">
             <summary>
              Copies elements from the source tensor to the locations indicated by the mask.
             </summary>
             <param name="mask">A byte tensor with values 0 or 1 indicating the locations where in the destination the value should be filled.</param>
             <param name="src">The source tensor.</param>
             <remarks>
              There must be at least as many elements in the source tensor as there are 1s in the mask.
             </remarks>
            </member>
        <member name="M:TorchSharp.LongTensor.MaskedSelect(TorchSharp.ByteTensor,TorchSharp.LongTensor)">
             <summary>
              Copies elements from the source tensor at the locations indicated by the mask.
             </summary>
             <param name="mask">A byte tensor with values 0 or 1 indicating the locations where in the source the value should be fetched.</param>
             <param name="src">The source tensor.</param>
             <remarks>
              There will be as many elements in the tensor as there are 1s in the mask.
              There must be at least as many elements in the source tensor as there are 1s in the mask.
             </remarks>
            </member>
        <member name="P:TorchSharp.LongTensor.Storage">
             <summary>
              Returns the associated storage for this tensor
             </summary>
            </member>
        <member name="P:TorchSharp.LongTensor.Dimensions">
             <summary>
              Returns the number of dimensions for this tensor
             </summary>
            </member>
        <member name="M:TorchSharp.LongTensor.GetTensorDimension(System.Int32)">
             <summary>
              Retrieves the size of the specified dimension in the tensor.
             </summary>
            </member>
        <member name="P:TorchSharp.LongTensor.Shape">
             <summary>
             Returns the tensor shape, this is an array whose size determines the number of dimensions on the tensor, and each element is the size of the dimension
             </summary>
             <remarks>
                 An array of size 0 is used for constants, an array of size 1 is used
                 for single-dimension arrays, where the dimension is the value of the
                 first element.   And so on.
             </remarks>
            </member>
        <member name="M:TorchSharp.LongTensor.GetTensorStride(System.Int32)">
             <summary>
              Retrieves the stride of the specified dimension in the tensor.
             </summary>
            </member>
        <member name="P:TorchSharp.LongTensor.Data">
             <summary>
              Returns a pointer to the unmanaged data managed by this tensor.
             </summary>
            </member>
        <member name="M:TorchSharp.LongTensor.Clone">
             <summary>
               Returns a deep clone of the tensor
             </summary>
            </member>
        <member name="M:TorchSharp.LongTensor.Select(System.Int32,System.Int64)">
             <summary>
               Returns a new Tensor which is a tensor slice at the given index in the dimension dim. 
             </summary>
             <remarks>
               The returned tensor has one less dimension: the dimension dim is removed. As a result, it is not possible to select() on a 1D tensor.
             </remarks>
             <param name="dim">Dimension to select</param>
             <param name="slideIndex">Beginning of the tensor slice</param>
            </member>
        <member name="M:TorchSharp.LongTensor.Narrow(System.Int32,System.Int64,System.Int64)">
             <summary>
             Returns a new Tensor which is a narrowed version of the current one: the dimension dim is narrowed from firstIndexto firstIndex+size-1.
             </summary>
             <param name="dim">The dimension to narrow</param>
             <param name="firstIndex">Initial index to narrow</param>
             <param name="size">Number of elements</param>
            </member>
        <member name="M:TorchSharp.LongTensor.Transpose(System.Int32,System.Int32)">
             <summary>
             Returns a tensor where dimensions dim1 and dim2 have been swapped. 
             </summary>
             <param name="dim1">First dimension</param>
             <param name="dim2">Second dimension</param>
            </member>
        <member name="M:TorchSharp.LongTensor.Unfold(System.Int32,System.Int64,System.Int64)">
             <summary>
               Returns a tensor which contains all slices of size size in the dimension dim. Step between two slices is given by step.
             </summary>
             <param name="dim"></param>
             <param name="size"></param>
             <param name="step"></param>
            </member>
        <member name="M:TorchSharp.LongTensor.NewWithStorage1d(System.IntPtr,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param> 
             <param name="size">Size of the first dimension.</param>     
             <param name="stride">Stride of the first dimension.</param>          
            </member>
        <member name="M:TorchSharp.LongTensor.NewWithStorage2d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param> 
             <param name="size0">Size of the first dimension.</param>     
             <param name="stride0">Stride of the first dimension.</param>
             <param name="size1">Size of the second dimension.</param>     
             <param name="stride1">Stride of the second dimension.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.NewWithStorage3d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param> 
             <param name="size0">Size of the first dimension.</param>     
             <param name="stride0">Stride of the first dimension.</param>
             <param name="size1">Size of the second dimension.</param>     
             <param name="stride1">Stride of the second dimension.</param>
             <param name="size2">Size of the third dimension.</param>     
             <param name="stride2">Stride of the third dimension.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.NewWithStorage4d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param> 
             <param name="size0">Size of the first dimension.</param>     
             <param name="stride0">Stride of the first dimension.</param>
             <param name="size1">Size of the second dimension.</param>     
             <param name="stride1">Stride of the second dimension.</param>
             <param name="size2">Size of the third dimension.</param>     
             <param name="stride2">Stride of the third dimension.</param>
             <param name="size3">Size of the fourth dimension.</param>     
             <param name="stride3">Stride of the fourth dimension.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.Squeeze">
             <summary>
               Squeeze the tensor, i.e. remove all 1-sized dimensions.   
             </summary>
            </member>
        <member name="M:TorchSharp.LongTensor.Squeeze1d(TorchSharp.LongTensor,System.Int32)">
             <summary>
               Squeeze the tensor, by removing the specified dimension.   
             </summary>
             <param name="src">The source tensor which contains the data.</param>
             <param name="dimension">The dimension to remove.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.Unsqueeze1d(TorchSharp.LongTensor,System.Int32)">
             <summary>
               Unsqueeze the tensor, by inserting the specified dimension of size 1.   
             </summary>
             <param name="src">The source tensor which contains the data.</param>
             <param name="dimension">The dimension to insert.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.Resize1d(System.Int64)">
             <summary>
               Resizes the tensor to be one dimensional with the specified size, the contents of the tensor after this are undetermined.
             </summary>
             <param name="size">The desired new size for the first dimension of the tensor.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.Resize2d(System.Int64,System.Int64)">
             <summary>
               Resizes the tensor to be two dimensional with the specified size, the contents of the tensor after this are undetermined.
             </summary>
             <param name="size0">The desired new size for the first dimension of the tensor.</param>
             <param name="size1">The desired new size for the second dimension of the tensor.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.Resize3d(System.Int64,System.Int64,System.Int64)">
             <summary>
               Resizes the tensor to be three dimensional with the specified size, the contents of the tensor after this are undetermined.
             </summary>
             <param name="size0">The desired new size for the first dimension of the tensor.</param>
             <param name="size1">The desired new size for the second dimension of the tensor.</param>
             <param name="size2">The desired new size for the third dimension of the tensor.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.Resize4d(System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Resizes the tensor to be four dimensional with the specified size, the contents of the tensor after this are undetermined.
             </summary>
             <param name="size0">The desired new size for the first dimension of the tensor.</param>
             <param name="size1">The desired new size for the second dimension of the tensor.</param>
             <param name="size2">The desired new size for the third dimension of the tensor.</param>
             <param name="size3">The desired new size for the fourth dimension of the tensor.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.Resize5d(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Resizes the tensor to be five dimensional with the specified size, the contents of the tensor after this are undetermined.
             </summary>
             <param name="size0">The desired new size for the first dimension of the tensor.</param>
             <param name="size1">The desired new size for the second dimension of the tensor.</param>
             <param name="size2">The desired new size for the third dimension of the tensor.</param>
             <param name="size3">The desired new size for the fourth dimension of the tensor.</param>
             <param name="size4">The desired new size for the fifth dimension of the tensor.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.ResizeAs(TorchSharp.LongTensor)">
             <summary>
               Resizes the tensor to match the dimensions of the specified src tensor, the contents of the tensor after this are undetermined.
             </summary>
             <param name="src">The source tensor whose shape will be mirrored by this tensor.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.Set(TorchSharp.LongTensor)">
             <summary>
               The tensor will use the same storage as the provided source, so any changes to that tensor are visible on this one.   
             </summary>
             <param name="src">The source tensor which contains the data..</param>
            </member>
        <member name="P:TorchSharp.LongTensor.Item(System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>       
             <param name="x0">Index to access.</param> 
            </member>
        <member name="P:TorchSharp.LongTensor.Item(System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>    
             <param name="x0">Index in the first dimension to access.</param> 
             <param name="x1">Index in the second dimension to access.</param>     
            </member>
        <member name="P:TorchSharp.LongTensor.Item(System.Int64,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="x0">Index in the first dimension to access.</param> 
             <param name="x1">Index in the second dimension to access.</param>     
             <param name="x2">Index in the third dimension to access.</param>     
            </member>
        <member name="P:TorchSharp.LongTensor.Item(System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="x0">Index in the first dimension to access.</param> 
             <param name="x1">Index in the second dimension to access.</param>     
             <param name="x2">Index in the third dimension to access.</param>     
             <param name="x3">Index in the fourth dimension to access.</param>     
            </member>
        <member name="M:TorchSharp.LongTensor.Random(TorchSharp.RandomGenerator)">
             <summary>
              Populates the tensor with random values using the provided random source generator.
             </summary>
             <param name="source">The random generator source</param>
            </member>
        <member name="M:TorchSharp.LongTensor.ClampedRandom(TorchSharp.RandomGenerator,System.Int64,System.Int64)">
             <summary>
              Populates the tensor with random values from min to max, using the provided random source generator.
             </summary>
             <param name="source">The random generator source</param>
             <param name="min">The lower limit for the values to be generated</param>
             <param name="max">The upper limit for the values to be generated</param>
            </member>
        <member name="M:TorchSharp.LongTensor.CappedRandom(TorchSharp.RandomGenerator,System.Int64)">
             <summary>
              Populates the tensor with random values from 0 to max, using the provided random source generator.
             </summary>
             <param name="source">The random generator source</param>
             <param name="max">The upper limit for the values to be generated</param>
            </member>
        <member name="M:TorchSharp.LongTensor.RandPerm(TorchSharp.RandomGenerator,System.Int64)">
             <summary>
              Populates the tensor with random values from 0 to n, using the provided random source generator.
             </summary>
             <param name="source">The random generator source</param>
             <param name="max">The upper limit for the values to be generated</param>
            </member>
        <member name="M:TorchSharp.LongTensor.Geometric(TorchSharp.RandomGenerator,System.Double)">
             <summary>
              Populates the tensor with random values from 0 to n, using the provided random source generator.
             </summary>
             <param name="source">The random generator source</param>
             <param name="p"></param>
            </member>
        <member name="M:TorchSharp.LongTensor.Random(System.Int64)">
             <summary>
              Populates the tensor with random values from 0 to n, using a newly initialized Random number geneator.
             </summary>
             <param name="n">The upper limit for the values to be generated</param>        
            </member>
        <member name="M:TorchSharp.LongTensor.ToString">
             <summary>
               Get a string representation of the tensor.
             </summary>
            </member>
        <member name="M:TorchSharp.LongTensor.Add(TorchSharp.LongTensor,System.Int64,TorchSharp.LongTensor)">
             <summary>
               Performs the Add operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Add operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.LongTensor.Add(System.Int64)">
             <summary>
               Performs the Add operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Add(PytorchSharp.LongTensor, Long, PytorchSharp.Long)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.LongTensor.Sub(TorchSharp.LongTensor,System.Int64,TorchSharp.LongTensor)">
             <summary>
               Performs the Sub operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Sub operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.LongTensor.Sub(System.Int64)">
             <summary>
               Performs the Sub operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Sub(PytorchSharp.LongTensor, Long, PytorchSharp.Long)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.LongTensor.Mul(TorchSharp.LongTensor,System.Int64,TorchSharp.LongTensor)">
             <summary>
               Performs the Mul operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Mul operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.LongTensor.Mul(System.Int64)">
             <summary>
               Performs the Mul operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Mul(PytorchSharp.LongTensor, Long, PytorchSharp.Long)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.LongTensor.Div(TorchSharp.LongTensor,System.Int64,TorchSharp.LongTensor)">
             <summary>
               Performs the Div operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Div operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.LongTensor.Div(System.Int64)">
             <summary>
               Performs the Div operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Div(PytorchSharp.LongTensor, Long, PytorchSharp.Long)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.LongTensor.LShift(TorchSharp.LongTensor,System.Int64,TorchSharp.LongTensor)">
             <summary>
               Performs the LShift operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the LShift operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.LongTensor.LShift(System.Int64)">
             <summary>
               Performs the LShift operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.LShift(PytorchSharp.LongTensor, Long, PytorchSharp.Long)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.LongTensor.RShift(TorchSharp.LongTensor,System.Int64,TorchSharp.LongTensor)">
             <summary>
               Performs the RShift operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the RShift operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.LongTensor.RShift(System.Int64)">
             <summary>
               Performs the RShift operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.RShift(PytorchSharp.LongTensor, Long, PytorchSharp.Long)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.LongTensor.Fmod(TorchSharp.LongTensor,System.Int64,TorchSharp.LongTensor)">
             <summary>
               Performs the Fmod operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Fmod operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.LongTensor.Fmod(System.Int64)">
             <summary>
               Performs the Fmod operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Fmod(PytorchSharp.LongTensor, Long, PytorchSharp.Long)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.LongTensor.Remainder(TorchSharp.LongTensor,System.Int64,TorchSharp.LongTensor)">
             <summary>
               Performs the Remainder operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Remainder operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.LongTensor.Remainder(System.Int64)">
             <summary>
               Performs the Remainder operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Remainder(PytorchSharp.LongTensor, Long, PytorchSharp.Long)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.LongTensor.BitAnd(TorchSharp.LongTensor,System.Int64,TorchSharp.LongTensor)">
             <summary>
               Performs the BitAnd operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the BitAnd operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.LongTensor.BitAnd(System.Int64)">
             <summary>
               Performs the BitAnd operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.BitAnd(PytorchSharp.LongTensor, Long, PytorchSharp.Long)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.LongTensor.BitOr(TorchSharp.LongTensor,System.Int64,TorchSharp.LongTensor)">
             <summary>
               Performs the BitOr operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the BitOr operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.LongTensor.BitOr(System.Int64)">
             <summary>
               Performs the BitOr operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.BitOr(PytorchSharp.LongTensor, Long, PytorchSharp.Long)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.LongTensor.BitXor(TorchSharp.LongTensor,System.Int64,TorchSharp.LongTensor)">
             <summary>
               Performs the BitXor operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the BitXor operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.LongTensor.BitXor(System.Int64)">
             <summary>
               Performs the BitXor operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.BitXor(PytorchSharp.LongTensor, Long, PytorchSharp.Long)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.LongTensor.CAdd(System.Int64,TorchSharp.LongTensor)">
             <summary>
               Performs the CAdd operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
               where the result is t[idx] + value * src[idx]
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.CSub(System.Int64,TorchSharp.LongTensor)">
             <summary>
               Performs the CSub operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
               where the result is t[idx] + value * src[idx]
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.Dot(TorchSharp.LongTensor)">
             <summary>
               Returns the tensor product between this tensor and the provided one
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               The dot product
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.Match(TorchSharp.LongTensor,System.Int64)">
             <summary>
               Match
             </summary>
             <param name="m2"></param>
             <param name="gain"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.CMul(TorchSharp.LongTensor)">
             <summary>
               Performs an CMul of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.CPow(TorchSharp.LongTensor)">
             <summary>
               Performs an CPow of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.CDiv(TorchSharp.LongTensor)">
             <summary>
               Performs an CDiv of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.CLShift(TorchSharp.LongTensor)">
             <summary>
               Performs an CLShift of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.CFMod(TorchSharp.LongTensor)">
             <summary>
               Performs an CFMod of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.CRemainder(TorchSharp.LongTensor)">
             <summary>
               Performs an CRemainder of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.CBitAnd(TorchSharp.LongTensor)">
             <summary>
               Performs an CBitAnd of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.CBitOr(TorchSharp.LongTensor)">
             <summary>
               Performs an CBitOr of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.CBitXor(TorchSharp.LongTensor)">
             <summary>
               Performs an CBitXor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.CMax(TorchSharp.LongTensor)">
             <summary>
               Performs an CMax of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.CMin(TorchSharp.LongTensor)">
             <summary>
               Performs an CMin of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.LtTensor(TorchSharp.LongTensor)">
             <summary>
               Performs an LtTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.LeTensor(TorchSharp.LongTensor)">
             <summary>
               Performs an LeTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.GtTensor(TorchSharp.LongTensor)">
             <summary>
               Performs an GtTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.GeTensor(TorchSharp.LongTensor)">
             <summary>
               Performs an GeTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.EqTensor(TorchSharp.LongTensor)">
             <summary>
               Performs an EqTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.NeTensor(TorchSharp.LongTensor)">
             <summary>
               Performs an NeTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.LtTensorT(TorchSharp.LongTensor)">
             <summary>
               Performs an LtTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.LeTensorT(TorchSharp.LongTensor)">
             <summary>
               Performs an LeTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.GtTensorT(TorchSharp.LongTensor)">
             <summary>
               Performs an GtTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.GeTensorT(TorchSharp.LongTensor)">
             <summary>
               Performs an GeTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.EqTensorT(TorchSharp.LongTensor)">
             <summary>
               Performs an EqTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.NeTensorT(TorchSharp.LongTensor)">
             <summary>
               Performs an NeTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.CMaxValue(System.Int64)">
             <summary>
               Performs an CMaxValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.CMinValue(System.Int64)">
             <summary>
               Performs an CMinValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.LtValue(System.Int64)">
             <summary>
               Performs an LtValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.LeValue(System.Int64)">
             <summary>
               Performs an LeValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.GtValue(System.Int64)">
             <summary>
               Performs an GtValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.GeValue(System.Int64)">
             <summary>
               Performs an GeValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.EqValue(System.Int64)">
             <summary>
               Performs an EqValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.NeValue(System.Int64)">
             <summary>
               Performs an NeValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.LtValueT(System.Int64)">
             <summary>
               Performs an LtValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.LeValueT(System.Int64)">
             <summary>
               Performs an LeValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.GtValueT(System.Int64)">
             <summary>
               Performs an GtValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.GeValueT(System.Int64)">
             <summary>
               Performs an GeValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.EqValueT(System.Int64)">
             <summary>
               Performs an EqValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.NeValueT(System.Int64)">
             <summary>
               Performs an NeValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.LERP(TorchSharp.LongTensor,System.Int64)">
             <summary>
               LERP
             </summary>
             <param name="other">The right-hand-side operand.</param>
             <param name="weight"></param>
            </member>
        <member name="M:TorchSharp.LongTensor.Equal(TorchSharp.LongTensor)">
             <summary>
               Compare the tensor with another for complete equality.
             </summary>
             <param name="other">The right-hand-side operand.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.AddScaled(System.Int64,System.Int64)">
             <summary>
               Performs an AddScaled of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="value1"></param>
             <param name="value2"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.SubScaled(System.Int64,System.Int64)">
             <summary>
               Performs an SubScaled of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="value1"></param>
             <param name="value2"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.Clamp(System.Int64,System.Int64)">
             <summary>
               Performs an Clamp of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="value1"></param>
             <param name="value2"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.AddCMul(System.Int64,TorchSharp.LongTensor,TorchSharp.LongTensor)">
             <summary>
               Performs AddCMul of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="value"></param>
             <param name="src1"></param>
             <param name="src2"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.AddCDiv(System.Int64,TorchSharp.LongTensor,TorchSharp.LongTensor)">
             <summary>
               Performs AddCDiv of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="value"></param>
             <param name="src1"></param>
             <param name="src2"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.AddMV(System.Int64,System.Int64,TorchSharp.LongTensor,TorchSharp.LongTensor)">
             <summary>
               Performs AddMV of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="beta">Multiplier for this tensor (β).</param>
             <param name="alpha">Multiplier for matxvec (α)</param>
             <param name="mat">Matrix to be multiplied</param>
             <param name="vec">Vector to be multiplied</param>
             <remarks>
             β tensor+α (mat@vec)
             </remarks>
             <returns>
               β tensor+α (mat@vec)
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.AddMM(System.Int64,System.Int64,TorchSharp.LongTensor,TorchSharp.LongTensor)">
             <summary>
               Performs AddMM of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="beta">Multiplier for this tensor (β).</param>
             <param name="alpha">Multiplier for mat1xmat2 (α)</param>
             <param name="mat1">First matrix to  be multiplied</param>
             <param name="mat2">Second matrix to  be multiplied</param>
             <remarks>
             β mat+α (mat1i@mat2i)
             </remarks>
             <returns>
               β mat+α (mat1i@mat2i)
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.AddBMM(System.Int64,System.Int64,TorchSharp.LongTensor,TorchSharp.LongTensor)">
             <summary>
               Performs AddBMM of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="beta">Multiplier for this tensor (β).</param>
             <param name="alpha">Multiplier for batch1xbatch2 (α)</param>
             <param name="batch1">the first batch of matrices to be multiplied</param>
             <param name="batch2">the second batch of matrices to be multiplied</param>
             <remarks>
             β mat+α (∑i=0bbatch1i@batch2i)
             </remarks>
             <returns>
               β mat+α (∑i=0bbatch1i@batch2i)
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.AddR(System.Int64,System.Int64,TorchSharp.LongTensor,TorchSharp.LongTensor)">
             <summary>
               Performs AddR of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="beta">Multiplier for this tensor (β).</param>
             <param name="alpha">Multiplier for vec1xvec2 (α)</param>
             <param name="vec1">the first vector of the outer product</param>
             <param name="vec2">the second vector of the outer product</param>
             <remarks>
             β mat+α (vec1⊗vec2)
             </remarks>
             <returns>
               β mat+α (vec1⊗vec2)
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.BAddBMM(System.Int64,System.Int64,TorchSharp.LongTensor,TorchSharp.LongTensor)">
             <summary>
               Performs BAddBMM of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="beta">Multiplier for this tensor (β).</param>
             <param name="alpha">Multiplier for batch1xbatch2 (α)</param>
             <param name="batch1">the first batch of matrices to be multiplied</param>
             <param name="batch2">the second batch of matrices to be multiplied</param>
             <remarks>
             β mati+α (batch1i@batch2i)
             </remarks>
             <returns>
               β mati+α (batch1i@batch2i)
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.MinAll">
             <summary>
               Returns the minimum value of the elements in the tensor.
             </summary>
             <returns>
               The minimum value of the tensor.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.MaxAll">
             <summary>
               Returns the maximum value of the elements in the tensor.
             </summary>
             <returns>
               The maximum value of the tensor.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.MedianAll">
             <summary>
               Returns the median of the elements in the tensor.
             </summary>
             <returns>
               The median of the tensor.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.SumAll">
             <summary>
               Returns the sum of the elements in the tensor.
             </summary>
             <returns>
               The sum of the tensor.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.ProdAll">
             <summary>
               Returns the product of the elements in the tensor.
             </summary>
             <returns>
               The product of the tensor.
             </returns>
            </member>
        <member name="M:TorchSharp.LongTensor.IndexSelect(System.Int32,TorchSharp.LongTensor)">
             <summary>
               Returns a new Tensor which indexes the original Tensor along dimension dim
               using the entries in index.  The returned Tensor has the same number of dimensions as the 
               original Tensor. The returned Tensor does not use the same storage as the original Tensor.
             </summary>
             <param name="dim">Dimension to select</param>
             <param name="index">Entries to extract</param>
            </member>
        <member name="M:TorchSharp.LongTensor.IndexCopy(System.Int32,TorchSharp.LongTensor,TorchSharp.LongTensor)">
             <summary>
               Copies the elements of tensor into the original tensor by selecting the indices in the order 
               given in index. The shape of tensor must exactly match the elements indexed or an error will be thrown.
             </summary>
             <param name="dim">Dimension to select for the copy</param>
             <param name="index">Entries to copy</param>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.IndexAdd(System.Int32,TorchSharp.LongTensor,TorchSharp.LongTensor)">
             <summary>
               Adds the elements of tensor into the original tensor by selecting the indices in the order 
               given in index. The shape of tensor must exactly match the elements indexed or an error will be thrown.
             </summary>
             <param name="dim">Dimension to select for the add</param>
             <param name="index">Entries to copy</param>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.IndexFill(System.Int32,TorchSharp.LongTensor,System.Int64)">
             <summary>
               Uses the given value to overwrite the original tensor by selecting the indices in the order 
               given in index. The shape of tensor must exactly match the elements indexed or an error will be thrown.
             </summary>
             <param name="dim">Dimension to select for the fill</param>
             <param name="index">Entries to copy</param>
             <param name="value">The value to write.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.Take(TorchSharp.LongTensor,TorchSharp.LongTensor)">
             <summary>
               Take
             </summary>        
             <param name="src"></param>
             <param name="index">Indices of entries to copy.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.Put(TorchSharp.LongTensor,TorchSharp.LongTensor,System.Boolean)">
             <summary>
               Put
             </summary>
             <param name="index">Indices of entries to copy.</param>
             <param name="src"></param>
             <param name="accumulate"></param>
            </member>
        <member name="M:TorchSharp.LongTensor.Gather(TorchSharp.LongTensor,System.Int32,TorchSharp.LongTensor)">
             <summary>
               Gather
             </summary>
             <param name="src"></param>
             <param name="dim"></param>
             <param name="index">Indices of entries to copy.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.Scatter(System.Int32,TorchSharp.LongTensor,TorchSharp.LongTensor)">
             <summary>
               Scatter
             </summary>
             <param name="dim"></param>
             <param name="index">Indices of entries to copy.</param>
             <param name="src"></param>
            </member>
        <member name="M:TorchSharp.LongTensor.ScatterAdd(System.Int32,TorchSharp.LongTensor,TorchSharp.LongTensor)">
             <summary>
               ScatterAdd
             </summary>
             <param name="dim"></param>
             <param name="index">Indices of entries to copy.</param>
             <param name="src"></param>
            </member>
        <member name="M:TorchSharp.LongTensor.ScatterFill(System.Int32,TorchSharp.LongTensor,System.Int64)">
             <summary>
               ScatterAdd
             </summary>
             <param name="dim"></param>
             <param name="index">Indices of entries to copy.</param>
             <param name="value"></param>
            </member>
        <member name="M:TorchSharp.LongTensor.Copy(TorchSharp.LongTensor)">
             <summary>
               Copies the elements of a tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.CopyByte(TorchSharp.ByteTensor)">
             <summary>
               Copies the elements of a byte tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.CopyShort(TorchSharp.ShortTensor)">
             <summary>
               Copies the elements of a short tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.CopyInt(TorchSharp.IntTensor)">
             <summary>
               Copies the elements of a int tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.CopyLong(TorchSharp.LongTensor)">
             <summary>
               Copies the elements of a long tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.CopyFloat(TorchSharp.FloatTensor)">
             <summary>
               Copies the elements of a float tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.CopyDouble(TorchSharp.DoubleTensor)">
             <summary>
               Copies the elements of a double tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.Sum(System.Int32,System.Boolean)">
             <summary>
               Computes the sum of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.CumulativeSum(System.Int32)">
             <summary>
               Computes the cumulative sum of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.Prod(System.Int32,System.Boolean)">
             <summary>
               Computes the product of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.CumulativeProd(System.Int32)">
             <summary>
               Computes the cumulative product of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.Max(System.Int32,System.Boolean)">
             <summary>
               Computes the max of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
             <returns>A tuple containing the values and indices of the resulting elements.</returns>
            </member>
        <member name="M:TorchSharp.LongTensor.Min(System.Int32,System.Boolean)">
             <summary>
               Computes the min of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
             <returns>A tuple containing the values and indices of the resulting elements.</returns>
            </member>
        <member name="M:TorchSharp.LongTensor.Mode(System.Int32,System.Boolean)">
             <summary>
               Computes the mode of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
             <returns>A tuple containing the values and indices of the resulting elements.</returns>
            </member>
        <member name="M:TorchSharp.LongTensor.Median(System.Int32,System.Boolean)">
             <summary>
               Computes the median of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
             <returns>A tuple containing the values and indices of the resulting elements.</returns>
            </member>
        <member name="M:TorchSharp.LongTensor.KthValue(System.Int64,System.Int32,System.Boolean)">
             <summary>
               Computes the kth value of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="k">The value for 'k' in 'kth'.</param>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
             <returns>A tuple containing the values and indices of the kth element of each dimension.</returns>
            </member>
        <member name="M:TorchSharp.LongTensor.Trace">
             <summary>
               Computes the trace of the tensor. 
             </summary>
            </member>
        <member name="M:TorchSharp.LongTensor.Sign">
             <summary>
               Computes the sign of the tensor. 
             </summary>
            </member>
        <member name="M:TorchSharp.LongTensor.CrossProduct(TorchSharp.LongTensor)">
             <summary>
               Computes the cross product of two tensors. 
             </summary>
             <param name="other">The right-hand-side tensor.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.Diagonal(System.Int32)">
             <summary>
               Gets the diagonal of the tensor. 
             </summary>
             <param name="k"></param>
            </member>
        <member name="M:TorchSharp.LongTensor.Eye(System.Int64,System.Int64)">
             <summary>
               Eye. 
             </summary>
             <param name="m"></param>
             <param name="n"></param>
            </member>
        <member name="M:TorchSharp.LongTensor.Range(System.Int64,System.Int64,System.Int64)">
             <summary>
               Create a range spanning from xmin to xmax, with 'step' between each value.
             </summary>
             <param name="xmin">The lower bound of the range.</param>
             <param name="xmax">The upper bound of the range.</param>
             <param name="step">The value step.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.ARange(System.Int64,System.Int64,System.Int64)">
             <summary>
               Create a range spanning from xmin to xmax, with 'step' between each value.
             </summary>
             <param name="xmin">The lower bound of the range.</param>
             <param name="xmax">The upper bound of the range.</param>
             <param name="step">The value step.</param>
            </member>
        <member name="M:TorchSharp.LongTensor.Sort(System.Int32,System.Boolean)">
             <summary>
               Sorts the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to sort along.</param>
             <param name="descending">0 if ascending, 1 if descending.</param>
             <returns>A tuple containing the values and indices of the sorted elements.</returns>
            </member>
        <member name="M:TorchSharp.LongTensor.TopK(System.Int64,System.Int32,System.Int32,System.Boolean)">
             <summary>
               Finds the top k of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="k">The number of elements to fetch.</param>
             <param name="dim">The dimension along which to sort and find k elements.</param>
             <param name="dir">0 if ascending, 1 if descending.</param>
             <param name="sorted">1 if the result should be sorted, 0 if they should keep their original order.</param>
             <returns>A tuple containing the values and indices of the top 'k' elements.</returns>
            </member>
        <member name="M:TorchSharp.LongTensor.TriL(System.Int64)">
             <summary>
               Lower triangle. 
             </summary>
             <param name="k"></param>
            </member>
        <member name="M:TorchSharp.LongTensor.TriU(System.Int64)">
             <summary>
               Upper triangle. 
             </summary>
             <param name="k"></param>
            </member>
        <member name="M:TorchSharp.LongTensor.Concatenate(TorchSharp.LongTensor,System.Int32)">
             <summary>
               Concatenate tensors along the given dimesion.
             </summary>
             <param name="other">The second tensor.</param>
             <param name="dimension">The dimension along which to concatenate.</param>
            </member>
        <member name="T:TorchSharp.DoubleTensor">
             <summary>
               Tensor of type Double.
             </summary>
             <remarks>
               <para>
                 Use the default constructor to create an empty tensor, or invoke one of the
                 constructors with one (1D), two (2D), three (3D), or four parameters (4D) to x
                 create a tensor for the desired number of dimensions.
               </para>
             </remarks>
            </member>
        <member name="T:TorchSharp.DoubleTensor.DoubleStorage">
             <summary>
                The storage class provides a mechanism to access the underlying data representation for tensors.
             </summary>
            </member>
        <member name="M:TorchSharp.DoubleTensor.DoubleStorage.#ctor">
             <summary>
               Initializes an empty DoubleStorage instance.
             </summary>
            </member>
        <member name="M:TorchSharp.DoubleTensor.DoubleStorage.#ctor(System.Int64)">
             <summary>
               Initializes a DoubleStorage instance with the specified size.
             </summary>        
             <param name="size">The desired number of elements in the storage</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.DoubleStorage.Finalize">
             <summary>
             Finalizer
             </summary>
            </member>
        <member name="M:TorchSharp.DoubleTensor.DoubleStorage.Dispose">
             <summary>
               Releases the storage.
             </summary>        
            </member>
        <member name="M:TorchSharp.DoubleTensor.DoubleStorage.Dispose(System.Boolean)">
             <summary>
               Implements the .NET Dispose pattern.
             </summary>
            </member>
        <member name="P:TorchSharp.DoubleTensor.DoubleStorage.Item(System.Int64)">
             <summary>
             </summary>
            </member>
        <member name="M:TorchSharp.DoubleTensor.DoubleStorage.Resize(System.UInt64)">
             <summary>
               Changes the size of this storage to the new requested size.
             </summary>
             <param name="size">The desired new size.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.DoubleStorage.Fill(System.Double)">
             <summary>
               Fills every element of the storage with the specified value.
             </summary>
             <param name="value">Value used for each element</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.#ctor">
             <summary>
                Creates an empty tensor.
             </summary>
            </member>
        <member name="M:TorchSharp.DoubleTensor.#ctor(System.Int64)">
             <summary>
                Creates a 1D tensor of the specified size.
             </summary>    
             <param name="size0">Size for the first dimension.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.#ctor(System.Int64,System.Int64)">
             <summary>
                Creates a 2D tensor of the specified size.
             </summary>        
             <param name="size0">Size for the first dimension.</param>
             <param name="size1">Size for the second dimension.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.#ctor(System.Int64,System.Int64,System.Int64)">
             <summary>
                Creates a 3D tensor of the specified size.
             </summary>        
             <param name="size0">Size for the first dimension.</param>
             <param name="size1">Size for the second dimension.</param>
             <param name="size2">Size for the third dimension.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.#ctor(System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
                Creates a 4D tensor of the specified size.
             </summary>
             <param name="size0">Size for the first dimension.</param>
             <param name="size1">Size for the second dimension.</param>
             <param name="size2">Size for the third dimension.</param>
             <param name="size3">Size for the fourth dimension.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Finalize">
             <summary>
              Finalizer for ~DoubleTensor
             </summary>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Dispose">
             <summary>
               Releases the tensor and its associated data.
             </summary>        
            </member>
        <member name="M:TorchSharp.DoubleTensor.Dispose(System.Boolean)">
             <summary>
               Implements the .NET Dispose pattern.
             </summary>
            </member>
        <member name="M:TorchSharp.DoubleTensor.NumElements">
             <summary>
              Get the number of elements in the tensor.
             </summary>
            </member>
        <member name="M:TorchSharp.DoubleTensor.ZeroFill">
             <summary>
              Fills the tensor with zeros
             </summary>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Fill(System.Double)">
             <summary>
              Fills the tensor with the specified value
             </summary>
            </member>
        <member name="M:TorchSharp.DoubleTensor.NonZero">
             <summary>
              Finds the indices of all non-zero elements.
             </summary>
            </member>
        <member name="M:TorchSharp.DoubleTensor.MaskedFill(TorchSharp.ByteTensor,System.Double)">
             <summary>
              Fills the tensor with the specified value at the locations indicated by the mask.
             </summary>
             <param name="mask">A byte tensor with values 0 or 1 indicating the locations where the value should be filled.</param>
             <param name="value">The value to write at the indicated locations.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.MaskedCopy(TorchSharp.ByteTensor,TorchSharp.DoubleTensor)">
             <summary>
              Copies elements from the source tensor to the locations indicated by the mask.
             </summary>
             <param name="mask">A byte tensor with values 0 or 1 indicating the locations where in the destination the value should be filled.</param>
             <param name="src">The source tensor.</param>
             <remarks>
              There must be at least as many elements in the source tensor as there are 1s in the mask.
             </remarks>
            </member>
        <member name="M:TorchSharp.DoubleTensor.MaskedSelect(TorchSharp.ByteTensor,TorchSharp.DoubleTensor)">
             <summary>
              Copies elements from the source tensor at the locations indicated by the mask.
             </summary>
             <param name="mask">A byte tensor with values 0 or 1 indicating the locations where in the source the value should be fetched.</param>
             <param name="src">The source tensor.</param>
             <remarks>
              There will be as many elements in the tensor as there are 1s in the mask.
              There must be at least as many elements in the source tensor as there are 1s in the mask.
             </remarks>
            </member>
        <member name="P:TorchSharp.DoubleTensor.Storage">
             <summary>
              Returns the associated storage for this tensor
             </summary>
            </member>
        <member name="P:TorchSharp.DoubleTensor.Dimensions">
             <summary>
              Returns the number of dimensions for this tensor
             </summary>
            </member>
        <member name="M:TorchSharp.DoubleTensor.GetTensorDimension(System.Int32)">
             <summary>
              Retrieves the size of the specified dimension in the tensor.
             </summary>
            </member>
        <member name="P:TorchSharp.DoubleTensor.Shape">
             <summary>
             Returns the tensor shape, this is an array whose size determines the number of dimensions on the tensor, and each element is the size of the dimension
             </summary>
             <remarks>
                 An array of size 0 is used for constants, an array of size 1 is used
                 for single-dimension arrays, where the dimension is the value of the
                 first element.   And so on.
             </remarks>
            </member>
        <member name="M:TorchSharp.DoubleTensor.GetTensorStride(System.Int32)">
             <summary>
              Retrieves the stride of the specified dimension in the tensor.
             </summary>
            </member>
        <member name="P:TorchSharp.DoubleTensor.Data">
             <summary>
              Returns a pointer to the unmanaged data managed by this tensor.
             </summary>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Clone">
             <summary>
               Returns a deep clone of the tensor
             </summary>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Select(System.Int32,System.Int64)">
             <summary>
               Returns a new Tensor which is a tensor slice at the given index in the dimension dim. 
             </summary>
             <remarks>
               The returned tensor has one less dimension: the dimension dim is removed. As a result, it is not possible to select() on a 1D tensor.
             </remarks>
             <param name="dim">Dimension to select</param>
             <param name="slideIndex">Beginning of the tensor slice</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Narrow(System.Int32,System.Int64,System.Int64)">
             <summary>
             Returns a new Tensor which is a narrowed version of the current one: the dimension dim is narrowed from firstIndexto firstIndex+size-1.
             </summary>
             <param name="dim">The dimension to narrow</param>
             <param name="firstIndex">Initial index to narrow</param>
             <param name="size">Number of elements</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Transpose(System.Int32,System.Int32)">
             <summary>
             Returns a tensor where dimensions dim1 and dim2 have been swapped. 
             </summary>
             <param name="dim1">First dimension</param>
             <param name="dim2">Second dimension</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Unfold(System.Int32,System.Int64,System.Int64)">
             <summary>
               Returns a tensor which contains all slices of size size in the dimension dim. Step between two slices is given by step.
             </summary>
             <param name="dim"></param>
             <param name="size"></param>
             <param name="step"></param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.NewWithStorage1d(System.IntPtr,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param> 
             <param name="size">Size of the first dimension.</param>     
             <param name="stride">Stride of the first dimension.</param>          
            </member>
        <member name="M:TorchSharp.DoubleTensor.NewWithStorage2d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param> 
             <param name="size0">Size of the first dimension.</param>     
             <param name="stride0">Stride of the first dimension.</param>
             <param name="size1">Size of the second dimension.</param>     
             <param name="stride1">Stride of the second dimension.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.NewWithStorage3d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param> 
             <param name="size0">Size of the first dimension.</param>     
             <param name="stride0">Stride of the first dimension.</param>
             <param name="size1">Size of the second dimension.</param>     
             <param name="stride1">Stride of the second dimension.</param>
             <param name="size2">Size of the third dimension.</param>     
             <param name="stride2">Stride of the third dimension.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.NewWithStorage4d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param> 
             <param name="size0">Size of the first dimension.</param>     
             <param name="stride0">Stride of the first dimension.</param>
             <param name="size1">Size of the second dimension.</param>     
             <param name="stride1">Stride of the second dimension.</param>
             <param name="size2">Size of the third dimension.</param>     
             <param name="stride2">Stride of the third dimension.</param>
             <param name="size3">Size of the fourth dimension.</param>     
             <param name="stride3">Stride of the fourth dimension.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Squeeze">
             <summary>
               Squeeze the tensor, i.e. remove all 1-sized dimensions.   
             </summary>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Squeeze1d(TorchSharp.DoubleTensor,System.Int32)">
             <summary>
               Squeeze the tensor, by removing the specified dimension.   
             </summary>
             <param name="src">The source tensor which contains the data.</param>
             <param name="dimension">The dimension to remove.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Unsqueeze1d(TorchSharp.DoubleTensor,System.Int32)">
             <summary>
               Unsqueeze the tensor, by inserting the specified dimension of size 1.   
             </summary>
             <param name="src">The source tensor which contains the data.</param>
             <param name="dimension">The dimension to insert.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Resize1d(System.Int64)">
             <summary>
               Resizes the tensor to be one dimensional with the specified size, the contents of the tensor after this are undetermined.
             </summary>
             <param name="size">The desired new size for the first dimension of the tensor.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Resize2d(System.Int64,System.Int64)">
             <summary>
               Resizes the tensor to be two dimensional with the specified size, the contents of the tensor after this are undetermined.
             </summary>
             <param name="size0">The desired new size for the first dimension of the tensor.</param>
             <param name="size1">The desired new size for the second dimension of the tensor.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Resize3d(System.Int64,System.Int64,System.Int64)">
             <summary>
               Resizes the tensor to be three dimensional with the specified size, the contents of the tensor after this are undetermined.
             </summary>
             <param name="size0">The desired new size for the first dimension of the tensor.</param>
             <param name="size1">The desired new size for the second dimension of the tensor.</param>
             <param name="size2">The desired new size for the third dimension of the tensor.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Resize4d(System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Resizes the tensor to be four dimensional with the specified size, the contents of the tensor after this are undetermined.
             </summary>
             <param name="size0">The desired new size for the first dimension of the tensor.</param>
             <param name="size1">The desired new size for the second dimension of the tensor.</param>
             <param name="size2">The desired new size for the third dimension of the tensor.</param>
             <param name="size3">The desired new size for the fourth dimension of the tensor.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Resize5d(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Resizes the tensor to be five dimensional with the specified size, the contents of the tensor after this are undetermined.
             </summary>
             <param name="size0">The desired new size for the first dimension of the tensor.</param>
             <param name="size1">The desired new size for the second dimension of the tensor.</param>
             <param name="size2">The desired new size for the third dimension of the tensor.</param>
             <param name="size3">The desired new size for the fourth dimension of the tensor.</param>
             <param name="size4">The desired new size for the fifth dimension of the tensor.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.ResizeAs(TorchSharp.DoubleTensor)">
             <summary>
               Resizes the tensor to match the dimensions of the specified src tensor, the contents of the tensor after this are undetermined.
             </summary>
             <param name="src">The source tensor whose shape will be mirrored by this tensor.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Set(TorchSharp.DoubleTensor)">
             <summary>
               The tensor will use the same storage as the provided source, so any changes to that tensor are visible on this one.   
             </summary>
             <param name="src">The source tensor which contains the data..</param>
            </member>
        <member name="P:TorchSharp.DoubleTensor.Item(System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>       
             <param name="x0">Index to access.</param> 
            </member>
        <member name="P:TorchSharp.DoubleTensor.Item(System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>    
             <param name="x0">Index in the first dimension to access.</param> 
             <param name="x1">Index in the second dimension to access.</param>     
            </member>
        <member name="P:TorchSharp.DoubleTensor.Item(System.Int64,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="x0">Index in the first dimension to access.</param> 
             <param name="x1">Index in the second dimension to access.</param>     
             <param name="x2">Index in the third dimension to access.</param>     
            </member>
        <member name="P:TorchSharp.DoubleTensor.Item(System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="x0">Index in the first dimension to access.</param> 
             <param name="x1">Index in the second dimension to access.</param>     
             <param name="x2">Index in the third dimension to access.</param>     
             <param name="x3">Index in the fourth dimension to access.</param>     
            </member>
        <member name="M:TorchSharp.DoubleTensor.Random(TorchSharp.RandomGenerator)">
             <summary>
              Populates the tensor with random values using the provided random source generator.
             </summary>
             <param name="source">The random generator source</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.ClampedRandom(TorchSharp.RandomGenerator,System.Int64,System.Int64)">
             <summary>
              Populates the tensor with random values from min to max, using the provided random source generator.
             </summary>
             <param name="source">The random generator source</param>
             <param name="min">The lower limit for the values to be generated</param>
             <param name="max">The upper limit for the values to be generated</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.CappedRandom(TorchSharp.RandomGenerator,System.Int64)">
             <summary>
              Populates the tensor with random values from 0 to max, using the provided random source generator.
             </summary>
             <param name="source">The random generator source</param>
             <param name="max">The upper limit for the values to be generated</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.RandPerm(TorchSharp.RandomGenerator,System.Int64)">
             <summary>
              Populates the tensor with random values from 0 to n, using the provided random source generator.
             </summary>
             <param name="source">The random generator source</param>
             <param name="max">The upper limit for the values to be generated</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Geometric(TorchSharp.RandomGenerator,System.Double)">
             <summary>
              Populates the tensor with random values from 0 to n, using the provided random source generator.
             </summary>
             <param name="source">The random generator source</param>
             <param name="p"></param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Random(System.Int64)">
             <summary>
              Populates the tensor with random values from 0 to n, using a newly initialized Random number geneator.
             </summary>
             <param name="n">The upper limit for the values to be generated</param>        
            </member>
        <member name="M:TorchSharp.DoubleTensor.Uniform(TorchSharp.RandomGenerator,System.Double,System.Double)">
             <summary>
               Fills the tensor with values according to a Bernoulli distribution.
             </summary>
             <param name="source">The random generator source</param>
             <param name="min">The lower bound for the random number range.</param>
             <param name="max">The upper bound for the random number range.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Exponential(TorchSharp.RandomGenerator,System.Double)">
             <summary>
               Fills the tensor with values according to a exponential distribution.
             </summary>
             <param name="source">The random generator source</param>
             <param name="lambda"></param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Cauchy(TorchSharp.RandomGenerator,System.Double,System.Double)">
             <summary>
               Fills the tensor with values according to a Cauchy-Lorentz distribution.
             </summary>
             <param name="source">The random generator source</param>
             <param name="median"></param>
             <param name="sigma"></param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.LogNormal(TorchSharp.RandomGenerator,System.Double,System.Double)">
             <summary>
               Fills the tensor with values according to a log-normal distribution.
             </summary>
             <param name="source">The random generator source</param>
             <param name="mean">The mean of the distribution.</param>
             <param name="stdv">The standard deviation of the distribution.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Normal(TorchSharp.RandomGenerator,System.Double,System.Double)">
             <summary>
               Fills the tensor with values according to a normal distribution.
             </summary>
             <param name="source">The random generator source</param>
             <param name="mean">The mean of the distribution.</param>
             <param name="stdv">The standard deviation of the distribution.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.NormalMeans(TorchSharp.RandomGenerator,TorchSharp.DoubleTensor,System.Double)">
             <summary>
               Fills the tensor with values according to a normal distribution. This version uses multiple means.
             </summary>
             <param name="source">The random generator source</param>
             <param name="means">The means of the distribution.</param>
             <param name="stdv">The standard deviation of the distribution.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.NormalStdvs(TorchSharp.RandomGenerator,System.Double,TorchSharp.DoubleTensor)">
             <summary>
               Fills the tensor with values according to a normal distribution. This version uses multiple standard deviations.
             </summary>
             <param name="source">The random generator source</param>
             <param name="mean">The mean of the distribution.</param>
             <param name="stdvs">The standard deviations of the distribution.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.NormalMeansStdvs(TorchSharp.RandomGenerator,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)">
             <summary>
               Fills the tensor with values according to a normal distribution. This version uses multiple means and standard deviations.
             </summary>
             <param name="source">The random generator source</param>
             <param name="means">The means of the distribution.</param>
             <param name="stdvs">The standards deviation of the distribution.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Multinomial(TorchSharp.RandomGenerator,TorchSharp.DoubleTensor,System.Int32,System.Int32)">
             <summary>
               Fills the tensor with values according to a multinomial distribution.
             </summary>
             <param name="source">The random generator source</param>
             <param name="prob_dist">The probability for each bucket.</param>
             <param name="n_sample">The number of samples to generate.</param>
             <param name="with_replacement"></param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.ToString">
             <summary>
               Get a string representation of the tensor.
             </summary>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Add(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)">
             <summary>
               Performs the Add operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Add operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Add(System.Double)">
             <summary>
               Performs the Add operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Add(PytorchSharp.DoubleTensor, Double, PytorchSharp.Double)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Sub(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)">
             <summary>
               Performs the Sub operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Sub operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Sub(System.Double)">
             <summary>
               Performs the Sub operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Sub(PytorchSharp.DoubleTensor, Double, PytorchSharp.Double)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Mul(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)">
             <summary>
               Performs the Mul operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Mul operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Mul(System.Double)">
             <summary>
               Performs the Mul operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Mul(PytorchSharp.DoubleTensor, Double, PytorchSharp.Double)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Div(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)">
             <summary>
               Performs the Div operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Div operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Div(System.Double)">
             <summary>
               Performs the Div operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Div(PytorchSharp.DoubleTensor, Double, PytorchSharp.Double)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.DoubleTensor.LShift(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)">
             <summary>
               Performs the LShift operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the LShift operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.LShift(System.Double)">
             <summary>
               Performs the LShift operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.LShift(PytorchSharp.DoubleTensor, Double, PytorchSharp.Double)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.DoubleTensor.RShift(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)">
             <summary>
               Performs the RShift operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the RShift operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.RShift(System.Double)">
             <summary>
               Performs the RShift operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.RShift(PytorchSharp.DoubleTensor, Double, PytorchSharp.Double)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Fmod(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)">
             <summary>
               Performs the Fmod operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Fmod operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Fmod(System.Double)">
             <summary>
               Performs the Fmod operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Fmod(PytorchSharp.DoubleTensor, Double, PytorchSharp.Double)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Remainder(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)">
             <summary>
               Performs the Remainder operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Remainder operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Remainder(System.Double)">
             <summary>
               Performs the Remainder operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Remainder(PytorchSharp.DoubleTensor, Double, PytorchSharp.Double)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.DoubleTensor.BitAnd(TorchSharp.DoubleTensor,System.Double,TorchSharp.DoubleTensor)">
             <summary>
               Performs the BitAnd operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the BitAnd operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.BitAnd(System.Double)">
             <summary>
               Performs the BitAnd operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.BitAnd(PytorchSharp.DoubleTensor, Double, PytorchSharp.Double)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.DoubleTensor.CAdd(System.Double,TorchSharp.DoubleTensor)">
             <summary>
               Performs the CAdd operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
               where the result is t[idx] + value * src[idx]
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.CSub(System.Double,TorchSharp.DoubleTensor)">
             <summary>
               Performs the CSub operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
               where the result is t[idx] + value * src[idx]
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Sigmoid">
             <summary>
               Returns a new tensor with the Sigmoid of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Log">
             <summary>
               Returns a new tensor with the Log of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Lgamma">
             <summary>
               Returns a new tensor with the Lgamma of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Digamma">
             <summary>
               Returns a new tensor with the Digamma of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Trigamma">
             <summary>
               Returns a new tensor with the Trigamma of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Polygamma">
             <summary>
               Returns a new tensor with the Polygamma of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Log10">
             <summary>
               Returns a new tensor with the Log10 of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Log1p">
             <summary>
               Returns a new tensor with the Log1p of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Log2">
             <summary>
               Returns a new tensor with the Log2 of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Exp">
             <summary>
               Returns a new tensor with the Exp of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Expm1">
             <summary>
               Returns a new tensor with the Expm1 of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Cos">
             <summary>
               Returns a new tensor with the Cos of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Acos">
             <summary>
               Returns a new tensor with the Acos of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Cosh">
             <summary>
               Returns a new tensor with the Cosh of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Sin">
             <summary>
               Returns a new tensor with the Sin of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Asin">
             <summary>
               Returns a new tensor with the Asin of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Sinh">
             <summary>
               Returns a new tensor with the Sinh of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Tan">
             <summary>
               Returns a new tensor with the Tan of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Atan">
             <summary>
               Returns a new tensor with the Atan of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Atan2">
             <summary>
               Returns a new tensor with the Atan2 of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Tanh">
             <summary>
               Returns a new tensor with the Tanh of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Erf">
             <summary>
               Returns a new tensor with the Erf of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Erfc">
             <summary>
               Returns a new tensor with the Erfc of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Erfinv">
             <summary>
               Returns a new tensor with the Erfinv of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Sqrt">
             <summary>
               Returns a new tensor with the Sqrt of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Rsqrt">
             <summary>
               Returns a new tensor with the Rsqrt of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Ceil">
             <summary>
               Returns a new tensor with the Ceil of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Floor">
             <summary>
               Returns a new tensor with the Floor of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Round">
             <summary>
               Returns a new tensor with the Round of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Abs">
             <summary>
               Returns a new tensor with the Abs of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Trunc">
             <summary>
               Returns a new tensor with the Trunc of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Frac">
             <summary>
               Returns a new tensor with the Frac of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.cinv">
             <summary>
               Returns a new tensor with the cinv of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.neg">
             <summary>
               Returns a new tensor with the neg of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.ZerosLike">
             <summary>
               Returns a new tensor with the ZerosLike of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.OnesLike">
             <summary>
               Returns a new tensor with the OnesLike of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Pow(System.Double)">
             <summary>
               Returns a new tensor with <see paramref="this" /> raised to the power of <see paramref="y" />.
             </summary>
             <param name="y">The exponent.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.TPow(System.Double)">
             <summary>
               Returns a new tensor with <see paramref="x" /> raised to the power of <see paramref="this" />.
             </summary>
             <param name="x">The base.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Dot(TorchSharp.DoubleTensor)">
             <summary>
               Returns the tensor product between this tensor and the provided one
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               The dot product
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Match(TorchSharp.DoubleTensor,System.Double)">
             <summary>
               Match
             </summary>
             <param name="m2"></param>
             <param name="gain"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.CMul(TorchSharp.DoubleTensor)">
             <summary>
               Performs an CMul of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.CPow(TorchSharp.DoubleTensor)">
             <summary>
               Performs an CPow of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.CDiv(TorchSharp.DoubleTensor)">
             <summary>
               Performs an CDiv of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.CLShift(TorchSharp.DoubleTensor)">
             <summary>
               Performs an CLShift of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.CFMod(TorchSharp.DoubleTensor)">
             <summary>
               Performs an CFMod of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.CRemainder(TorchSharp.DoubleTensor)">
             <summary>
               Performs an CRemainder of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.CBitAnd(TorchSharp.DoubleTensor)">
             <summary>
               Performs an CBitAnd of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.CBitOr(TorchSharp.DoubleTensor)">
             <summary>
               Performs an CBitOr of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.CBitXor(TorchSharp.DoubleTensor)">
             <summary>
               Performs an CBitXor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.CMax(TorchSharp.DoubleTensor)">
             <summary>
               Performs an CMax of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.CMin(TorchSharp.DoubleTensor)">
             <summary>
               Performs an CMin of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.LtTensor(TorchSharp.DoubleTensor)">
             <summary>
               Performs an LtTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.LeTensor(TorchSharp.DoubleTensor)">
             <summary>
               Performs an LeTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.GtTensor(TorchSharp.DoubleTensor)">
             <summary>
               Performs an GtTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.GeTensor(TorchSharp.DoubleTensor)">
             <summary>
               Performs an GeTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.EqTensor(TorchSharp.DoubleTensor)">
             <summary>
               Performs an EqTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.NeTensor(TorchSharp.DoubleTensor)">
             <summary>
               Performs an NeTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.LtTensorT(TorchSharp.DoubleTensor)">
             <summary>
               Performs an LtTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.LeTensorT(TorchSharp.DoubleTensor)">
             <summary>
               Performs an LeTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.GtTensorT(TorchSharp.DoubleTensor)">
             <summary>
               Performs an GtTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.GeTensorT(TorchSharp.DoubleTensor)">
             <summary>
               Performs an GeTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.EqTensorT(TorchSharp.DoubleTensor)">
             <summary>
               Performs an EqTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.NeTensorT(TorchSharp.DoubleTensor)">
             <summary>
               Performs an NeTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.CMaxValue(System.Double)">
             <summary>
               Performs an CMaxValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.CMinValue(System.Double)">
             <summary>
               Performs an CMinValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.LtValue(System.Double)">
             <summary>
               Performs an LtValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.LeValue(System.Double)">
             <summary>
               Performs an LeValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.GtValue(System.Double)">
             <summary>
               Performs an GtValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.GeValue(System.Double)">
             <summary>
               Performs an GeValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.EqValue(System.Double)">
             <summary>
               Performs an EqValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.NeValue(System.Double)">
             <summary>
               Performs an NeValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.LtValueT(System.Double)">
             <summary>
               Performs an LtValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.LeValueT(System.Double)">
             <summary>
               Performs an LeValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.GtValueT(System.Double)">
             <summary>
               Performs an GtValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.GeValueT(System.Double)">
             <summary>
               Performs an GeValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.EqValueT(System.Double)">
             <summary>
               Performs an EqValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.NeValueT(System.Double)">
             <summary>
               Performs an NeValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.LERP(TorchSharp.DoubleTensor,System.Double)">
             <summary>
               LERP
             </summary>
             <param name="other">The right-hand-side operand.</param>
             <param name="weight"></param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Equal(TorchSharp.DoubleTensor)">
             <summary>
               Compare the tensor with another for complete equality.
             </summary>
             <param name="other">The right-hand-side operand.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.AddScaled(System.Double,System.Double)">
             <summary>
               Performs an AddScaled of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="value1"></param>
             <param name="value2"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.SubScaled(System.Double,System.Double)">
             <summary>
               Performs an SubScaled of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="value1"></param>
             <param name="value2"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Clamp(System.Double,System.Double)">
             <summary>
               Performs an Clamp of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="value1"></param>
             <param name="value2"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.AddCMul(System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)">
             <summary>
               Performs AddCMul of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="value"></param>
             <param name="src1"></param>
             <param name="src2"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.AddCDiv(System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)">
             <summary>
               Performs AddCDiv of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="value"></param>
             <param name="src1"></param>
             <param name="src2"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.AddMV(System.Double,System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)">
             <summary>
               Performs AddMV of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="beta">Multiplier for this tensor (β).</param>
             <param name="alpha">Multiplier for matxvec (α)</param>
             <param name="mat">Matrix to be multiplied</param>
             <param name="vec">Vector to be multiplied</param>
             <remarks>
             β tensor+α (mat@vec)
             </remarks>
             <returns>
               β tensor+α (mat@vec)
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.AddMM(System.Double,System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)">
             <summary>
               Performs AddMM of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="beta">Multiplier for this tensor (β).</param>
             <param name="alpha">Multiplier for mat1xmat2 (α)</param>
             <param name="mat1">First matrix to  be multiplied</param>
             <param name="mat2">Second matrix to  be multiplied</param>
             <remarks>
             β mat+α (mat1i@mat2i)
             </remarks>
             <returns>
               β mat+α (mat1i@mat2i)
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.AddBMM(System.Double,System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)">
             <summary>
               Performs AddBMM of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="beta">Multiplier for this tensor (β).</param>
             <param name="alpha">Multiplier for batch1xbatch2 (α)</param>
             <param name="batch1">the first batch of matrices to be multiplied</param>
             <param name="batch2">the second batch of matrices to be multiplied</param>
             <remarks>
             β mat+α (∑i=0bbatch1i@batch2i)
             </remarks>
             <returns>
               β mat+α (∑i=0bbatch1i@batch2i)
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.AddR(System.Double,System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)">
             <summary>
               Performs AddR of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="beta">Multiplier for this tensor (β).</param>
             <param name="alpha">Multiplier for vec1xvec2 (α)</param>
             <param name="vec1">the first vector of the outer product</param>
             <param name="vec2">the second vector of the outer product</param>
             <remarks>
             β mat+α (vec1⊗vec2)
             </remarks>
             <returns>
               β mat+α (vec1⊗vec2)
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.BAddBMM(System.Double,System.Double,TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)">
             <summary>
               Performs BAddBMM of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="beta">Multiplier for this tensor (β).</param>
             <param name="alpha">Multiplier for batch1xbatch2 (α)</param>
             <param name="batch1">the first batch of matrices to be multiplied</param>
             <param name="batch2">the second batch of matrices to be multiplied</param>
             <remarks>
             β mati+α (batch1i@batch2i)
             </remarks>
             <returns>
               β mati+α (batch1i@batch2i)
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.MinAll">
             <summary>
               Returns the minimum value of the elements in the tensor.
             </summary>
             <returns>
               The minimum value of the tensor.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.MaxAll">
             <summary>
               Returns the maximum value of the elements in the tensor.
             </summary>
             <returns>
               The maximum value of the tensor.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.MedianAll">
             <summary>
               Returns the median of the elements in the tensor.
             </summary>
             <returns>
               The median of the tensor.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.SumAll">
             <summary>
               Returns the sum of the elements in the tensor.
             </summary>
             <returns>
               The sum of the tensor.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.ProdAll">
             <summary>
               Returns the product of the elements in the tensor.
             </summary>
             <returns>
               The product of the tensor.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Linspace(System.Double,System.Double,System.Int64)">
             <summary>
               Performs Linspace of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="a"></param>
             <param name="b"></param>
             <param name="n"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Logspace(System.Double,System.Double,System.Int64)">
             <summary>
               Performs Logspace of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="a"></param>
             <param name="b"></param>
             <param name="n"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.IndexSelect(System.Int32,TorchSharp.LongTensor)">
             <summary>
               Returns a new Tensor which indexes the original Tensor along dimension dim
               using the entries in index.  The returned Tensor has the same number of dimensions as the 
               original Tensor. The returned Tensor does not use the same storage as the original Tensor.
             </summary>
             <param name="dim">Dimension to select</param>
             <param name="index">Entries to extract</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.IndexCopy(System.Int32,TorchSharp.LongTensor,TorchSharp.DoubleTensor)">
             <summary>
               Copies the elements of tensor into the original tensor by selecting the indices in the order 
               given in index. The shape of tensor must exactly match the elements indexed or an error will be thrown.
             </summary>
             <param name="dim">Dimension to select for the copy</param>
             <param name="index">Entries to copy</param>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.IndexAdd(System.Int32,TorchSharp.LongTensor,TorchSharp.DoubleTensor)">
             <summary>
               Adds the elements of tensor into the original tensor by selecting the indices in the order 
               given in index. The shape of tensor must exactly match the elements indexed or an error will be thrown.
             </summary>
             <param name="dim">Dimension to select for the add</param>
             <param name="index">Entries to copy</param>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.IndexFill(System.Int32,TorchSharp.LongTensor,System.Double)">
             <summary>
               Uses the given value to overwrite the original tensor by selecting the indices in the order 
               given in index. The shape of tensor must exactly match the elements indexed or an error will be thrown.
             </summary>
             <param name="dim">Dimension to select for the fill</param>
             <param name="index">Entries to copy</param>
             <param name="value">The value to write.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Take(TorchSharp.DoubleTensor,TorchSharp.LongTensor)">
             <summary>
               Take
             </summary>        
             <param name="src"></param>
             <param name="index">Indices of entries to copy.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Put(TorchSharp.LongTensor,TorchSharp.DoubleTensor,System.Boolean)">
             <summary>
               Put
             </summary>
             <param name="index">Indices of entries to copy.</param>
             <param name="src"></param>
             <param name="accumulate"></param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Gather(TorchSharp.DoubleTensor,System.Int32,TorchSharp.LongTensor)">
             <summary>
               Gather
             </summary>
             <param name="src"></param>
             <param name="dim"></param>
             <param name="index">Indices of entries to copy.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Scatter(System.Int32,TorchSharp.LongTensor,TorchSharp.DoubleTensor)">
             <summary>
               Scatter
             </summary>
             <param name="dim"></param>
             <param name="index">Indices of entries to copy.</param>
             <param name="src"></param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.ScatterAdd(System.Int32,TorchSharp.LongTensor,TorchSharp.DoubleTensor)">
             <summary>
               ScatterAdd
             </summary>
             <param name="dim"></param>
             <param name="index">Indices of entries to copy.</param>
             <param name="src"></param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.ScatterFill(System.Int32,TorchSharp.LongTensor,System.Double)">
             <summary>
               ScatterAdd
             </summary>
             <param name="dim"></param>
             <param name="index">Indices of entries to copy.</param>
             <param name="value"></param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Copy(TorchSharp.DoubleTensor)">
             <summary>
               Copies the elements of a tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.CopyByte(TorchSharp.ByteTensor)">
             <summary>
               Copies the elements of a byte tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.CopyShort(TorchSharp.ShortTensor)">
             <summary>
               Copies the elements of a short tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.CopyInt(TorchSharp.IntTensor)">
             <summary>
               Copies the elements of a int tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.CopyLong(TorchSharp.LongTensor)">
             <summary>
               Copies the elements of a long tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.CopyFloat(TorchSharp.FloatTensor)">
             <summary>
               Copies the elements of a float tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.CopyDouble(TorchSharp.DoubleTensor)">
             <summary>
               Copies the elements of a double tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Sum(System.Int32,System.Boolean)">
             <summary>
               Computes the sum of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.CumulativeSum(System.Int32)">
             <summary>
               Computes the cumulative sum of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Prod(System.Int32,System.Boolean)">
             <summary>
               Computes the product of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.CumulativeProd(System.Int32)">
             <summary>
               Computes the cumulative product of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Max(System.Int32,System.Boolean)">
             <summary>
               Computes the max of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
             <returns>A tuple containing the values and indices of the resulting elements.</returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Min(System.Int32,System.Boolean)">
             <summary>
               Computes the min of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
             <returns>A tuple containing the values and indices of the resulting elements.</returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Mode(System.Int32,System.Boolean)">
             <summary>
               Computes the mode of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
             <returns>A tuple containing the values and indices of the resulting elements.</returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Median(System.Int32,System.Boolean)">
             <summary>
               Computes the median of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
             <returns>A tuple containing the values and indices of the resulting elements.</returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.KthValue(System.Int64,System.Int32,System.Boolean)">
             <summary>
               Computes the kth value of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="k">The value for 'k' in 'kth'.</param>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
             <returns>A tuple containing the values and indices of the kth element of each dimension.</returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Trace">
             <summary>
               Computes the trace of the tensor. 
             </summary>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Sign">
             <summary>
               Computes the sign of the tensor. 
             </summary>
            </member>
        <member name="M:TorchSharp.DoubleTensor.CrossProduct(TorchSharp.DoubleTensor)">
             <summary>
               Computes the cross product of two tensors. 
             </summary>
             <param name="other">The right-hand-side tensor.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Diagonal(System.Int32)">
             <summary>
               Gets the diagonal of the tensor. 
             </summary>
             <param name="k"></param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Eye(System.Int64,System.Int64)">
             <summary>
               Eye. 
             </summary>
             <param name="m"></param>
             <param name="n"></param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Range(System.Double,System.Double,System.Double)">
             <summary>
               Create a range spanning from xmin to xmax, with 'step' between each value.
             </summary>
             <param name="xmin">The lower bound of the range.</param>
             <param name="xmax">The upper bound of the range.</param>
             <param name="step">The value step.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.ARange(System.Double,System.Double,System.Double)">
             <summary>
               Create a range spanning from xmin to xmax, with 'step' between each value.
             </summary>
             <param name="xmin">The lower bound of the range.</param>
             <param name="xmax">The upper bound of the range.</param>
             <param name="step">The value step.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Sort(System.Int32,System.Boolean)">
             <summary>
               Sorts the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to sort along.</param>
             <param name="descending">0 if ascending, 1 if descending.</param>
             <returns>A tuple containing the values and indices of the sorted elements.</returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.TopK(System.Int64,System.Int32,System.Int32,System.Boolean)">
             <summary>
               Finds the top k of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="k">The number of elements to fetch.</param>
             <param name="dim">The dimension along which to sort and find k elements.</param>
             <param name="dir">0 if ascending, 1 if descending.</param>
             <param name="sorted">1 if the result should be sorted, 0 if they should keep their original order.</param>
             <returns>A tuple containing the values and indices of the top 'k' elements.</returns>
            </member>
        <member name="M:TorchSharp.DoubleTensor.TriL(System.Int64)">
             <summary>
               Lower triangle. 
             </summary>
             <param name="k"></param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.TriU(System.Int64)">
             <summary>
               Upper triangle. 
             </summary>
             <param name="k"></param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Concatenate(TorchSharp.DoubleTensor,System.Int32)">
             <summary>
               Concatenate tensors along the given dimesion.
             </summary>
             <param name="other">The second tensor.</param>
             <param name="dimension">The dimension along which to concatenate.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Mean(System.Int32,System.Boolean)">
             <summary>
               Compute the mean of all tensor elements along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Std(System.Int32,System.Boolean,System.Boolean)">
             <summary>
               Compute the standard deviation of all tensor elements along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="biased"></param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Var(System.Int32,System.Boolean,System.Boolean)">
             <summary>
               Compute the variance of all tensor elements along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="biased"></param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Norm(System.Double,System.Int32,System.Boolean)">
             <summary>
               Compute the norm of all tensor elements along the given dimension. 
             </summary>
             <param name="value"></param>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Renorm(System.Double,System.Int32,System.Double)">
             <summary>
               Compute the renorm of all tensor elements along the given dimension. 
             </summary>
             <param name="value"></param>
             <param name="dimension">The dimension to process along.</param>
             <param name="maxnorm"></param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Dist(TorchSharp.DoubleTensor,System.Double)">
             <summary>
               Compute the dist of all tensor elements along the given dimension. 
             </summary>
             <param name="other">The other tensor.</param>
             <param name="value"></param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.Histc(System.Int64,System.Double,System.Double)">
             <summary>
               Create a histogram of all tensor elements. 
             </summary>
             <param name="nbins">The number of bins in the output histogram.</param>
             <param name="minvalue">Only consider values equal to or greater than this.</param>
             <param name="maxvalue">Only consider values equal to or less than this.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.BHistc(System.Int64,System.Double,System.Double)">
             <summary>
               Create a histogram of all tensor elements. 
             </summary>
             <param name="nbins">The number of bins in the output histogram.</param>
             <param name="minvalue">Only consider values equal to or greater than this.</param>
             <param name="maxvalue">Only consider values equal to or less than this.</param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.MeanAll">
             <summary>
               Compute the mean of all tensor elements. 
             </summary>
            </member>
        <member name="M:TorchSharp.DoubleTensor.VarAll(System.Boolean)">
             <summary>
               Compute the variance of all tensor elements. 
             </summary>
             <param name="biased"></param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.StdAll(System.Boolean)">
             <summary>
               Compute the standard deviation of all tensor elements. 
             </summary>
             <param name="biased"></param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.NormAll(System.Double)">
             <summary>
               Compute the norm of all tensor elements. 
             </summary>
             <param name="value"></param>
            </member>
        <member name="M:TorchSharp.DoubleTensor.DirichletGrad(TorchSharp.DoubleTensor,TorchSharp.DoubleTensor)">
             <summary>
                DirichletGrad
             </summary>
             <param name="alpha"></param>
             <param name="total"></param>
            </member>
        <member name="T:TorchSharp.FloatTensor">
             <summary>
               Tensor of type Float.
             </summary>
             <remarks>
               <para>
                 Use the default constructor to create an empty tensor, or invoke one of the
                 constructors with one (1D), two (2D), three (3D), or four parameters (4D) to x
                 create a tensor for the desired number of dimensions.
               </para>
             </remarks>
            </member>
        <member name="T:TorchSharp.FloatTensor.FloatStorage">
             <summary>
                The storage class provides a mechanism to access the underlying data representation for tensors.
             </summary>
            </member>
        <member name="M:TorchSharp.FloatTensor.FloatStorage.#ctor">
             <summary>
               Initializes an empty FloatStorage instance.
             </summary>
            </member>
        <member name="M:TorchSharp.FloatTensor.FloatStorage.#ctor(System.Int64)">
             <summary>
               Initializes a FloatStorage instance with the specified size.
             </summary>        
             <param name="size">The desired number of elements in the storage</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.FloatStorage.Finalize">
             <summary>
             Finalizer
             </summary>
            </member>
        <member name="M:TorchSharp.FloatTensor.FloatStorage.Dispose">
             <summary>
               Releases the storage.
             </summary>        
            </member>
        <member name="M:TorchSharp.FloatTensor.FloatStorage.Dispose(System.Boolean)">
             <summary>
               Implements the .NET Dispose pattern.
             </summary>
            </member>
        <member name="P:TorchSharp.FloatTensor.FloatStorage.Item(System.Int64)">
             <summary>
             </summary>
            </member>
        <member name="M:TorchSharp.FloatTensor.FloatStorage.Resize(System.UInt64)">
             <summary>
               Changes the size of this storage to the new requested size.
             </summary>
             <param name="size">The desired new size.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.FloatStorage.Fill(System.Single)">
             <summary>
               Fills every element of the storage with the specified value.
             </summary>
             <param name="value">Value used for each element</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.#ctor">
             <summary>
                Creates an empty tensor.
             </summary>
            </member>
        <member name="M:TorchSharp.FloatTensor.#ctor(System.Int64)">
             <summary>
                Creates a 1D tensor of the specified size.
             </summary>    
             <param name="size0">Size for the first dimension.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.#ctor(System.Int64,System.Int64)">
             <summary>
                Creates a 2D tensor of the specified size.
             </summary>        
             <param name="size0">Size for the first dimension.</param>
             <param name="size1">Size for the second dimension.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.#ctor(System.Int64,System.Int64,System.Int64)">
             <summary>
                Creates a 3D tensor of the specified size.
             </summary>        
             <param name="size0">Size for the first dimension.</param>
             <param name="size1">Size for the second dimension.</param>
             <param name="size2">Size for the third dimension.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.#ctor(System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
                Creates a 4D tensor of the specified size.
             </summary>
             <param name="size0">Size for the first dimension.</param>
             <param name="size1">Size for the second dimension.</param>
             <param name="size2">Size for the third dimension.</param>
             <param name="size3">Size for the fourth dimension.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Finalize">
             <summary>
              Finalizer for ~FloatTensor
             </summary>
            </member>
        <member name="M:TorchSharp.FloatTensor.Dispose">
             <summary>
               Releases the tensor and its associated data.
             </summary>        
            </member>
        <member name="M:TorchSharp.FloatTensor.Dispose(System.Boolean)">
             <summary>
               Implements the .NET Dispose pattern.
             </summary>
            </member>
        <member name="M:TorchSharp.FloatTensor.NumElements">
             <summary>
              Get the number of elements in the tensor.
             </summary>
            </member>
        <member name="M:TorchSharp.FloatTensor.ZeroFill">
             <summary>
              Fills the tensor with zeros
             </summary>
            </member>
        <member name="M:TorchSharp.FloatTensor.Fill(System.Single)">
             <summary>
              Fills the tensor with the specified value
             </summary>
            </member>
        <member name="M:TorchSharp.FloatTensor.NonZero">
             <summary>
              Finds the indices of all non-zero elements.
             </summary>
            </member>
        <member name="M:TorchSharp.FloatTensor.MaskedFill(TorchSharp.ByteTensor,System.Single)">
             <summary>
              Fills the tensor with the specified value at the locations indicated by the mask.
             </summary>
             <param name="mask">A byte tensor with values 0 or 1 indicating the locations where the value should be filled.</param>
             <param name="value">The value to write at the indicated locations.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.MaskedCopy(TorchSharp.ByteTensor,TorchSharp.FloatTensor)">
             <summary>
              Copies elements from the source tensor to the locations indicated by the mask.
             </summary>
             <param name="mask">A byte tensor with values 0 or 1 indicating the locations where in the destination the value should be filled.</param>
             <param name="src">The source tensor.</param>
             <remarks>
              There must be at least as many elements in the source tensor as there are 1s in the mask.
             </remarks>
            </member>
        <member name="M:TorchSharp.FloatTensor.MaskedSelect(TorchSharp.ByteTensor,TorchSharp.FloatTensor)">
             <summary>
              Copies elements from the source tensor at the locations indicated by the mask.
             </summary>
             <param name="mask">A byte tensor with values 0 or 1 indicating the locations where in the source the value should be fetched.</param>
             <param name="src">The source tensor.</param>
             <remarks>
              There will be as many elements in the tensor as there are 1s in the mask.
              There must be at least as many elements in the source tensor as there are 1s in the mask.
             </remarks>
            </member>
        <member name="P:TorchSharp.FloatTensor.Storage">
             <summary>
              Returns the associated storage for this tensor
             </summary>
            </member>
        <member name="P:TorchSharp.FloatTensor.Dimensions">
             <summary>
              Returns the number of dimensions for this tensor
             </summary>
            </member>
        <member name="M:TorchSharp.FloatTensor.GetTensorDimension(System.Int32)">
             <summary>
              Retrieves the size of the specified dimension in the tensor.
             </summary>
            </member>
        <member name="P:TorchSharp.FloatTensor.Shape">
             <summary>
             Returns the tensor shape, this is an array whose size determines the number of dimensions on the tensor, and each element is the size of the dimension
             </summary>
             <remarks>
                 An array of size 0 is used for constants, an array of size 1 is used
                 for single-dimension arrays, where the dimension is the value of the
                 first element.   And so on.
             </remarks>
            </member>
        <member name="M:TorchSharp.FloatTensor.GetTensorStride(System.Int32)">
             <summary>
              Retrieves the stride of the specified dimension in the tensor.
             </summary>
            </member>
        <member name="P:TorchSharp.FloatTensor.Data">
             <summary>
              Returns a pointer to the unmanaged data managed by this tensor.
             </summary>
            </member>
        <member name="M:TorchSharp.FloatTensor.Clone">
             <summary>
               Returns a deep clone of the tensor
             </summary>
            </member>
        <member name="M:TorchSharp.FloatTensor.Select(System.Int32,System.Int64)">
             <summary>
               Returns a new Tensor which is a tensor slice at the given index in the dimension dim. 
             </summary>
             <remarks>
               The returned tensor has one less dimension: the dimension dim is removed. As a result, it is not possible to select() on a 1D tensor.
             </remarks>
             <param name="dim">Dimension to select</param>
             <param name="slideIndex">Beginning of the tensor slice</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Narrow(System.Int32,System.Int64,System.Int64)">
             <summary>
             Returns a new Tensor which is a narrowed version of the current one: the dimension dim is narrowed from firstIndexto firstIndex+size-1.
             </summary>
             <param name="dim">The dimension to narrow</param>
             <param name="firstIndex">Initial index to narrow</param>
             <param name="size">Number of elements</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Transpose(System.Int32,System.Int32)">
             <summary>
             Returns a tensor where dimensions dim1 and dim2 have been swapped. 
             </summary>
             <param name="dim1">First dimension</param>
             <param name="dim2">Second dimension</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Unfold(System.Int32,System.Int64,System.Int64)">
             <summary>
               Returns a tensor which contains all slices of size size in the dimension dim. Step between two slices is given by step.
             </summary>
             <param name="dim"></param>
             <param name="size"></param>
             <param name="step"></param>
            </member>
        <member name="M:TorchSharp.FloatTensor.NewWithStorage1d(System.IntPtr,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param> 
             <param name="size">Size of the first dimension.</param>     
             <param name="stride">Stride of the first dimension.</param>          
            </member>
        <member name="M:TorchSharp.FloatTensor.NewWithStorage2d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param> 
             <param name="size0">Size of the first dimension.</param>     
             <param name="stride0">Stride of the first dimension.</param>
             <param name="size1">Size of the second dimension.</param>     
             <param name="stride1">Stride of the second dimension.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.NewWithStorage3d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param> 
             <param name="size0">Size of the first dimension.</param>     
             <param name="stride0">Stride of the first dimension.</param>
             <param name="size1">Size of the second dimension.</param>     
             <param name="stride1">Stride of the second dimension.</param>
             <param name="size2">Size of the third dimension.</param>     
             <param name="stride2">Stride of the third dimension.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.NewWithStorage4d(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param> 
             <param name="size0">Size of the first dimension.</param>     
             <param name="stride0">Stride of the first dimension.</param>
             <param name="size1">Size of the second dimension.</param>     
             <param name="stride1">Stride of the second dimension.</param>
             <param name="size2">Size of the third dimension.</param>     
             <param name="stride2">Stride of the third dimension.</param>
             <param name="size3">Size of the fourth dimension.</param>     
             <param name="stride3">Stride of the fourth dimension.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Squeeze">
             <summary>
               Squeeze the tensor, i.e. remove all 1-sized dimensions.   
             </summary>
            </member>
        <member name="M:TorchSharp.FloatTensor.Squeeze1d(TorchSharp.FloatTensor,System.Int32)">
             <summary>
               Squeeze the tensor, by removing the specified dimension.   
             </summary>
             <param name="src">The source tensor which contains the data.</param>
             <param name="dimension">The dimension to remove.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Unsqueeze1d(TorchSharp.FloatTensor,System.Int32)">
             <summary>
               Unsqueeze the tensor, by inserting the specified dimension of size 1.   
             </summary>
             <param name="src">The source tensor which contains the data.</param>
             <param name="dimension">The dimension to insert.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Resize1d(System.Int64)">
             <summary>
               Resizes the tensor to be one dimensional with the specified size, the contents of the tensor after this are undetermined.
             </summary>
             <param name="size">The desired new size for the first dimension of the tensor.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Resize2d(System.Int64,System.Int64)">
             <summary>
               Resizes the tensor to be two dimensional with the specified size, the contents of the tensor after this are undetermined.
             </summary>
             <param name="size0">The desired new size for the first dimension of the tensor.</param>
             <param name="size1">The desired new size for the second dimension of the tensor.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Resize3d(System.Int64,System.Int64,System.Int64)">
             <summary>
               Resizes the tensor to be three dimensional with the specified size, the contents of the tensor after this are undetermined.
             </summary>
             <param name="size0">The desired new size for the first dimension of the tensor.</param>
             <param name="size1">The desired new size for the second dimension of the tensor.</param>
             <param name="size2">The desired new size for the third dimension of the tensor.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Resize4d(System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Resizes the tensor to be four dimensional with the specified size, the contents of the tensor after this are undetermined.
             </summary>
             <param name="size0">The desired new size for the first dimension of the tensor.</param>
             <param name="size1">The desired new size for the second dimension of the tensor.</param>
             <param name="size2">The desired new size for the third dimension of the tensor.</param>
             <param name="size3">The desired new size for the fourth dimension of the tensor.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Resize5d(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Resizes the tensor to be five dimensional with the specified size, the contents of the tensor after this are undetermined.
             </summary>
             <param name="size0">The desired new size for the first dimension of the tensor.</param>
             <param name="size1">The desired new size for the second dimension of the tensor.</param>
             <param name="size2">The desired new size for the third dimension of the tensor.</param>
             <param name="size3">The desired new size for the fourth dimension of the tensor.</param>
             <param name="size4">The desired new size for the fifth dimension of the tensor.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.ResizeAs(TorchSharp.FloatTensor)">
             <summary>
               Resizes the tensor to match the dimensions of the specified src tensor, the contents of the tensor after this are undetermined.
             </summary>
             <param name="src">The source tensor whose shape will be mirrored by this tensor.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Set(TorchSharp.FloatTensor)">
             <summary>
               The tensor will use the same storage as the provided source, so any changes to that tensor are visible on this one.   
             </summary>
             <param name="src">The source tensor which contains the data..</param>
            </member>
        <member name="P:TorchSharp.FloatTensor.Item(System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>       
             <param name="x0">Index to access.</param> 
            </member>
        <member name="P:TorchSharp.FloatTensor.Item(System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>    
             <param name="x0">Index in the first dimension to access.</param> 
             <param name="x1">Index in the second dimension to access.</param>     
            </member>
        <member name="P:TorchSharp.FloatTensor.Item(System.Int64,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="x0">Index in the first dimension to access.</param> 
             <param name="x1">Index in the second dimension to access.</param>     
             <param name="x2">Index in the third dimension to access.</param>     
            </member>
        <member name="P:TorchSharp.FloatTensor.Item(System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
               Access to element at the specified position in the tensor
             </summary>        
             <param name="x0">Index in the first dimension to access.</param> 
             <param name="x1">Index in the second dimension to access.</param>     
             <param name="x2">Index in the third dimension to access.</param>     
             <param name="x3">Index in the fourth dimension to access.</param>     
            </member>
        <member name="M:TorchSharp.FloatTensor.Random(TorchSharp.RandomGenerator)">
             <summary>
              Populates the tensor with random values using the provided random source generator.
             </summary>
             <param name="source">The random generator source</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.ClampedRandom(TorchSharp.RandomGenerator,System.Int64,System.Int64)">
             <summary>
              Populates the tensor with random values from min to max, using the provided random source generator.
             </summary>
             <param name="source">The random generator source</param>
             <param name="min">The lower limit for the values to be generated</param>
             <param name="max">The upper limit for the values to be generated</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.CappedRandom(TorchSharp.RandomGenerator,System.Int64)">
             <summary>
              Populates the tensor with random values from 0 to max, using the provided random source generator.
             </summary>
             <param name="source">The random generator source</param>
             <param name="max">The upper limit for the values to be generated</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.RandPerm(TorchSharp.RandomGenerator,System.Int64)">
             <summary>
              Populates the tensor with random values from 0 to n, using the provided random source generator.
             </summary>
             <param name="source">The random generator source</param>
             <param name="max">The upper limit for the values to be generated</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Geometric(TorchSharp.RandomGenerator,System.Double)">
             <summary>
              Populates the tensor with random values from 0 to n, using the provided random source generator.
             </summary>
             <param name="source">The random generator source</param>
             <param name="p"></param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Random(System.Int64)">
             <summary>
              Populates the tensor with random values from 0 to n, using a newly initialized Random number geneator.
             </summary>
             <param name="n">The upper limit for the values to be generated</param>        
            </member>
        <member name="M:TorchSharp.FloatTensor.Uniform(TorchSharp.RandomGenerator,System.Double,System.Double)">
             <summary>
               Fills the tensor with values according to a Bernoulli distribution.
             </summary>
             <param name="source">The random generator source</param>
             <param name="min">The lower bound for the random number range.</param>
             <param name="max">The upper bound for the random number range.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Exponential(TorchSharp.RandomGenerator,System.Double)">
             <summary>
               Fills the tensor with values according to a exponential distribution.
             </summary>
             <param name="source">The random generator source</param>
             <param name="lambda"></param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Cauchy(TorchSharp.RandomGenerator,System.Double,System.Double)">
             <summary>
               Fills the tensor with values according to a Cauchy-Lorentz distribution.
             </summary>
             <param name="source">The random generator source</param>
             <param name="median"></param>
             <param name="sigma"></param>
            </member>
        <member name="M:TorchSharp.FloatTensor.LogNormal(TorchSharp.RandomGenerator,System.Double,System.Double)">
             <summary>
               Fills the tensor with values according to a log-normal distribution.
             </summary>
             <param name="source">The random generator source</param>
             <param name="mean">The mean of the distribution.</param>
             <param name="stdv">The standard deviation of the distribution.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Normal(TorchSharp.RandomGenerator,System.Double,System.Double)">
             <summary>
               Fills the tensor with values according to a normal distribution.
             </summary>
             <param name="source">The random generator source</param>
             <param name="mean">The mean of the distribution.</param>
             <param name="stdv">The standard deviation of the distribution.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.NormalMeans(TorchSharp.RandomGenerator,TorchSharp.FloatTensor,System.Double)">
             <summary>
               Fills the tensor with values according to a normal distribution. This version uses multiple means.
             </summary>
             <param name="source">The random generator source</param>
             <param name="means">The means of the distribution.</param>
             <param name="stdv">The standard deviation of the distribution.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.NormalStdvs(TorchSharp.RandomGenerator,System.Double,TorchSharp.FloatTensor)">
             <summary>
               Fills the tensor with values according to a normal distribution. This version uses multiple standard deviations.
             </summary>
             <param name="source">The random generator source</param>
             <param name="mean">The mean of the distribution.</param>
             <param name="stdvs">The standard deviations of the distribution.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.NormalMeansStdvs(TorchSharp.RandomGenerator,TorchSharp.FloatTensor,TorchSharp.FloatTensor)">
             <summary>
               Fills the tensor with values according to a normal distribution. This version uses multiple means and standard deviations.
             </summary>
             <param name="source">The random generator source</param>
             <param name="means">The means of the distribution.</param>
             <param name="stdvs">The standards deviation of the distribution.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Multinomial(TorchSharp.RandomGenerator,TorchSharp.FloatTensor,System.Int32,System.Int32)">
             <summary>
               Fills the tensor with values according to a multinomial distribution.
             </summary>
             <param name="source">The random generator source</param>
             <param name="prob_dist">The probability for each bucket.</param>
             <param name="n_sample">The number of samples to generate.</param>
             <param name="with_replacement"></param>
            </member>
        <member name="M:TorchSharp.FloatTensor.ToString">
             <summary>
               Get a string representation of the tensor.
             </summary>
            </member>
        <member name="M:TorchSharp.FloatTensor.Add(TorchSharp.FloatTensor,System.Single,TorchSharp.FloatTensor)">
             <summary>
               Performs the Add operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Add operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Add(System.Single)">
             <summary>
               Performs the Add operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Add(PytorchSharp.FloatTensor, Float, PytorchSharp.Float)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.FloatTensor.Sub(TorchSharp.FloatTensor,System.Single,TorchSharp.FloatTensor)">
             <summary>
               Performs the Sub operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Sub operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Sub(System.Single)">
             <summary>
               Performs the Sub operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Sub(PytorchSharp.FloatTensor, Float, PytorchSharp.Float)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.FloatTensor.Mul(TorchSharp.FloatTensor,System.Single,TorchSharp.FloatTensor)">
             <summary>
               Performs the Mul operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Mul operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Mul(System.Single)">
             <summary>
               Performs the Mul operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Mul(PytorchSharp.FloatTensor, Float, PytorchSharp.Float)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.FloatTensor.Div(TorchSharp.FloatTensor,System.Single,TorchSharp.FloatTensor)">
             <summary>
               Performs the Div operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Div operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Div(System.Single)">
             <summary>
               Performs the Div operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Div(PytorchSharp.FloatTensor, Float, PytorchSharp.Float)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.FloatTensor.LShift(TorchSharp.FloatTensor,System.Single,TorchSharp.FloatTensor)">
             <summary>
               Performs the LShift operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the LShift operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.LShift(System.Single)">
             <summary>
               Performs the LShift operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.LShift(PytorchSharp.FloatTensor, Float, PytorchSharp.Float)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.FloatTensor.RShift(TorchSharp.FloatTensor,System.Single,TorchSharp.FloatTensor)">
             <summary>
               Performs the RShift operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the RShift operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.RShift(System.Single)">
             <summary>
               Performs the RShift operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.RShift(PytorchSharp.FloatTensor, Float, PytorchSharp.Float)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.FloatTensor.Fmod(TorchSharp.FloatTensor,System.Single,TorchSharp.FloatTensor)">
             <summary>
               Performs the Fmod operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Fmod operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Fmod(System.Single)">
             <summary>
               Performs the Fmod operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Fmod(PytorchSharp.FloatTensor, Float, PytorchSharp.Float)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.FloatTensor.Remainder(TorchSharp.FloatTensor,System.Single,TorchSharp.FloatTensor)">
             <summary>
               Performs the Remainder operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the Remainder operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Remainder(System.Single)">
             <summary>
               Performs the Remainder operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.Remainder(PytorchSharp.FloatTensor, Float, PytorchSharp.Float)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.FloatTensor.BitAnd(TorchSharp.FloatTensor,System.Single,TorchSharp.FloatTensor)">
             <summary>
               Performs the BitAnd operation on each element of the source with the
               provided scalar.   The result tensor specified as the last parameters
               is resized to match the source.
             </summary>
             <remarks>
                For each element in the <see paramref="source" /> performs the BitAnd operation
                with <see paramref="value" />.   The result is stored in the <see paramref="result" />
                tensor.
             </remarks>
             <param name="source">Source tensor on which the operation will take place.</param>
             <param name="value">The scalar value that the operation uses.</param>
             <param name="result">The tensor where the result will be placed</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.BitAnd(System.Single)">
             <summary>
               Performs the BitAnd operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
             <remarks>
               If you want to avoid the allocation of a new tensor, you can use the 
               alternative method <see cref="M:PytorchSharp.BitAnd(PytorchSharp.FloatTensor, Float, PytorchSharp.Float)" />.
             </remarks>
            </member>
        <member name="M:TorchSharp.FloatTensor.CAdd(System.Single,TorchSharp.FloatTensor)">
             <summary>
               Performs the CAdd operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
               where the result is t[idx] + value * src[idx]
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.CSub(System.Single,TorchSharp.FloatTensor)">
             <summary>
               Performs the CSub operation on each element of the tensor with the
               <see paramref="value" /> and returns a new tensor with the result.
               where the result is t[idx] + value * src[idx]
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Sigmoid">
             <summary>
               Returns a new tensor with the Sigmoid of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Log">
             <summary>
               Returns a new tensor with the Log of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Lgamma">
             <summary>
               Returns a new tensor with the Lgamma of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Digamma">
             <summary>
               Returns a new tensor with the Digamma of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Trigamma">
             <summary>
               Returns a new tensor with the Trigamma of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Polygamma">
             <summary>
               Returns a new tensor with the Polygamma of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Log10">
             <summary>
               Returns a new tensor with the Log10 of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Log1p">
             <summary>
               Returns a new tensor with the Log1p of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Log2">
             <summary>
               Returns a new tensor with the Log2 of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Exp">
             <summary>
               Returns a new tensor with the Exp of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Expm1">
             <summary>
               Returns a new tensor with the Expm1 of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Cos">
             <summary>
               Returns a new tensor with the Cos of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Acos">
             <summary>
               Returns a new tensor with the Acos of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Cosh">
             <summary>
               Returns a new tensor with the Cosh of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Sin">
             <summary>
               Returns a new tensor with the Sin of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Asin">
             <summary>
               Returns a new tensor with the Asin of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Sinh">
             <summary>
               Returns a new tensor with the Sinh of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Tan">
             <summary>
               Returns a new tensor with the Tan of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Atan">
             <summary>
               Returns a new tensor with the Atan of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Atan2">
             <summary>
               Returns a new tensor with the Atan2 of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Tanh">
             <summary>
               Returns a new tensor with the Tanh of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Erf">
             <summary>
               Returns a new tensor with the Erf of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Erfc">
             <summary>
               Returns a new tensor with the Erfc of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Erfinv">
             <summary>
               Returns a new tensor with the Erfinv of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Sqrt">
             <summary>
               Returns a new tensor with the Sqrt of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Rsqrt">
             <summary>
               Returns a new tensor with the Rsqrt of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Ceil">
             <summary>
               Returns a new tensor with the Ceil of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Floor">
             <summary>
               Returns a new tensor with the Floor of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Round">
             <summary>
               Returns a new tensor with the Round of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Abs">
             <summary>
               Returns a new tensor with the Abs of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Trunc">
             <summary>
               Returns a new tensor with the Trunc of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Frac">
             <summary>
               Returns a new tensor with the Frac of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.cinv">
             <summary>
               Returns a new tensor with the cinv of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.neg">
             <summary>
               Returns a new tensor with the neg of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.ZerosLike">
             <summary>
               Returns a new tensor with the ZerosLike of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.OnesLike">
             <summary>
               Returns a new tensor with the OnesLike of the elements of <see paramref="src" />
             </summary>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Pow(System.Single)">
             <summary>
               Returns a new tensor with <see paramref="this" /> raised to the power of <see paramref="y" />.
             </summary>
             <param name="y">The exponent.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.TPow(System.Single)">
             <summary>
               Returns a new tensor with <see paramref="x" /> raised to the power of <see paramref="this" />.
             </summary>
             <param name="x">The base.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Dot(TorchSharp.FloatTensor)">
             <summary>
               Returns the tensor product between this tensor and the provided one
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               The dot product
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Match(TorchSharp.FloatTensor,System.Single)">
             <summary>
               Match
             </summary>
             <param name="m2"></param>
             <param name="gain"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.CMul(TorchSharp.FloatTensor)">
             <summary>
               Performs an CMul of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.CPow(TorchSharp.FloatTensor)">
             <summary>
               Performs an CPow of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.CDiv(TorchSharp.FloatTensor)">
             <summary>
               Performs an CDiv of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.CLShift(TorchSharp.FloatTensor)">
             <summary>
               Performs an CLShift of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.CFMod(TorchSharp.FloatTensor)">
             <summary>
               Performs an CFMod of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.CRemainder(TorchSharp.FloatTensor)">
             <summary>
               Performs an CRemainder of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.CBitAnd(TorchSharp.FloatTensor)">
             <summary>
               Performs an CBitAnd of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.CBitOr(TorchSharp.FloatTensor)">
             <summary>
               Performs an CBitOr of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.CBitXor(TorchSharp.FloatTensor)">
             <summary>
               Performs an CBitXor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.CMax(TorchSharp.FloatTensor)">
             <summary>
               Performs an CMax of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.CMin(TorchSharp.FloatTensor)">
             <summary>
               Performs an CMin of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.LtTensor(TorchSharp.FloatTensor)">
             <summary>
               Performs an LtTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.LeTensor(TorchSharp.FloatTensor)">
             <summary>
               Performs an LeTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.GtTensor(TorchSharp.FloatTensor)">
             <summary>
               Performs an GtTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.GeTensor(TorchSharp.FloatTensor)">
             <summary>
               Performs an GeTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.EqTensor(TorchSharp.FloatTensor)">
             <summary>
               Performs an EqTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.NeTensor(TorchSharp.FloatTensor)">
             <summary>
               Performs an NeTensor of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.LtTensorT(TorchSharp.FloatTensor)">
             <summary>
               Performs an LtTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.LeTensorT(TorchSharp.FloatTensor)">
             <summary>
               Performs an LeTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.GtTensorT(TorchSharp.FloatTensor)">
             <summary>
               Performs an GtTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.GeTensorT(TorchSharp.FloatTensor)">
             <summary>
               Performs an GeTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.EqTensorT(TorchSharp.FloatTensor)">
             <summary>
               Performs an EqTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.NeTensorT(TorchSharp.FloatTensor)">
             <summary>
               Performs an NeTensorT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.CMaxValue(System.Single)">
             <summary>
               Performs an CMaxValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.CMinValue(System.Single)">
             <summary>
               Performs an CMinValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.LtValue(System.Single)">
             <summary>
               Performs an LtValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.LeValue(System.Single)">
             <summary>
               Performs an LeValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.GtValue(System.Single)">
             <summary>
               Performs an GtValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.GeValue(System.Single)">
             <summary>
               Performs an GeValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.EqValue(System.Single)">
             <summary>
               Performs an EqValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.NeValue(System.Single)">
             <summary>
               Performs an NeValue of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.LtValueT(System.Single)">
             <summary>
               Performs an LtValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.LeValueT(System.Single)">
             <summary>
               Performs an LeValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.GtValueT(System.Single)">
             <summary>
               Performs an GtValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.GeValueT(System.Single)">
             <summary>
               Performs an GeValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.EqValueT(System.Single)">
             <summary>
               Performs an EqValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.NeValueT(System.Single)">
             <summary>
               Performs an NeValueT of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="src">The right-hand-side operand.</param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.LERP(TorchSharp.FloatTensor,System.Single)">
             <summary>
               LERP
             </summary>
             <param name="other">The right-hand-side operand.</param>
             <param name="weight"></param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Equal(TorchSharp.FloatTensor)">
             <summary>
               Compare the tensor with another for complete equality.
             </summary>
             <param name="other">The right-hand-side operand.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.AddScaled(System.Single,System.Single)">
             <summary>
               Performs an AddScaled of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="value1"></param>
             <param name="value2"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.SubScaled(System.Single,System.Single)">
             <summary>
               Performs an SubScaled of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="value1"></param>
             <param name="value2"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Clamp(System.Single,System.Single)">
             <summary>
               Performs an Clamp of the tensor with the provided 
               <see paramref="src" /> tensor and returns a new tensor with the result.
             </summary>
             <param name="value1"></param>
             <param name="value2"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.AddCMul(System.Single,TorchSharp.FloatTensor,TorchSharp.FloatTensor)">
             <summary>
               Performs AddCMul of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="value"></param>
             <param name="src1"></param>
             <param name="src2"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.AddCDiv(System.Single,TorchSharp.FloatTensor,TorchSharp.FloatTensor)">
             <summary>
               Performs AddCDiv of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="value"></param>
             <param name="src1"></param>
             <param name="src2"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.AddMV(System.Single,System.Single,TorchSharp.FloatTensor,TorchSharp.FloatTensor)">
             <summary>
               Performs AddMV of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="beta">Multiplier for this tensor (β).</param>
             <param name="alpha">Multiplier for matxvec (α)</param>
             <param name="mat">Matrix to be multiplied</param>
             <param name="vec">Vector to be multiplied</param>
             <remarks>
             β tensor+α (mat@vec)
             </remarks>
             <returns>
               β tensor+α (mat@vec)
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.AddMM(System.Single,System.Single,TorchSharp.FloatTensor,TorchSharp.FloatTensor)">
             <summary>
               Performs AddMM of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="beta">Multiplier for this tensor (β).</param>
             <param name="alpha">Multiplier for mat1xmat2 (α)</param>
             <param name="mat1">First matrix to  be multiplied</param>
             <param name="mat2">Second matrix to  be multiplied</param>
             <remarks>
             β mat+α (mat1i@mat2i)
             </remarks>
             <returns>
               β mat+α (mat1i@mat2i)
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.AddBMM(System.Single,System.Single,TorchSharp.FloatTensor,TorchSharp.FloatTensor)">
             <summary>
               Performs AddBMM of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="beta">Multiplier for this tensor (β).</param>
             <param name="alpha">Multiplier for batch1xbatch2 (α)</param>
             <param name="batch1">the first batch of matrices to be multiplied</param>
             <param name="batch2">the second batch of matrices to be multiplied</param>
             <remarks>
             β mat+α (∑i=0bbatch1i@batch2i)
             </remarks>
             <returns>
               β mat+α (∑i=0bbatch1i@batch2i)
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.AddR(System.Single,System.Single,TorchSharp.FloatTensor,TorchSharp.FloatTensor)">
             <summary>
               Performs AddR of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="beta">Multiplier for this tensor (β).</param>
             <param name="alpha">Multiplier for vec1xvec2 (α)</param>
             <param name="vec1">the first vector of the outer product</param>
             <param name="vec2">the second vector of the outer product</param>
             <remarks>
             β mat+α (vec1⊗vec2)
             </remarks>
             <returns>
               β mat+α (vec1⊗vec2)
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.BAddBMM(System.Single,System.Single,TorchSharp.FloatTensor,TorchSharp.FloatTensor)">
             <summary>
               Performs BAddBMM of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="beta">Multiplier for this tensor (β).</param>
             <param name="alpha">Multiplier for batch1xbatch2 (α)</param>
             <param name="batch1">the first batch of matrices to be multiplied</param>
             <param name="batch2">the second batch of matrices to be multiplied</param>
             <remarks>
             β mati+α (batch1i@batch2i)
             </remarks>
             <returns>
               β mati+α (batch1i@batch2i)
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.MinAll">
             <summary>
               Returns the minimum value of the elements in the tensor.
             </summary>
             <returns>
               The minimum value of the tensor.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.MaxAll">
             <summary>
               Returns the maximum value of the elements in the tensor.
             </summary>
             <returns>
               The maximum value of the tensor.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.MedianAll">
             <summary>
               Returns the median of the elements in the tensor.
             </summary>
             <returns>
               The median of the tensor.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.SumAll">
             <summary>
               Returns the sum of the elements in the tensor.
             </summary>
             <returns>
               The sum of the tensor.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.ProdAll">
             <summary>
               Returns the product of the elements in the tensor.
             </summary>
             <returns>
               The product of the tensor.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Linspace(System.Single,System.Single,System.Int64)">
             <summary>
               Performs Linspace of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="a"></param>
             <param name="b"></param>
             <param name="n"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Logspace(System.Single,System.Single,System.Int64)">
             <summary>
               Performs Logspace of the tensor with the provided 
               <see paramref="src1" /> and <see paramref="src1" /> tensors and returns a new tensor with the result.
             </summary>
             <param name="a"></param>
             <param name="b"></param>
             <param name="n"></param>
             <returns>
               This returns a new tensor with the same shape as the tensor this operates on.
             </returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.IndexSelect(System.Int32,TorchSharp.LongTensor)">
             <summary>
               Returns a new Tensor which indexes the original Tensor along dimension dim
               using the entries in index.  The returned Tensor has the same number of dimensions as the 
               original Tensor. The returned Tensor does not use the same storage as the original Tensor.
             </summary>
             <param name="dim">Dimension to select</param>
             <param name="index">Entries to extract</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.IndexCopy(System.Int32,TorchSharp.LongTensor,TorchSharp.FloatTensor)">
             <summary>
               Copies the elements of tensor into the original tensor by selecting the indices in the order 
               given in index. The shape of tensor must exactly match the elements indexed or an error will be thrown.
             </summary>
             <param name="dim">Dimension to select for the copy</param>
             <param name="index">Entries to copy</param>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.IndexAdd(System.Int32,TorchSharp.LongTensor,TorchSharp.FloatTensor)">
             <summary>
               Adds the elements of tensor into the original tensor by selecting the indices in the order 
               given in index. The shape of tensor must exactly match the elements indexed or an error will be thrown.
             </summary>
             <param name="dim">Dimension to select for the add</param>
             <param name="index">Entries to copy</param>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.IndexFill(System.Int32,TorchSharp.LongTensor,System.Single)">
             <summary>
               Uses the given value to overwrite the original tensor by selecting the indices in the order 
               given in index. The shape of tensor must exactly match the elements indexed or an error will be thrown.
             </summary>
             <param name="dim">Dimension to select for the fill</param>
             <param name="index">Entries to copy</param>
             <param name="value">The value to write.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Take(TorchSharp.FloatTensor,TorchSharp.LongTensor)">
             <summary>
               Take
             </summary>        
             <param name="src"></param>
             <param name="index">Indices of entries to copy.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Put(TorchSharp.LongTensor,TorchSharp.FloatTensor,System.Boolean)">
             <summary>
               Put
             </summary>
             <param name="index">Indices of entries to copy.</param>
             <param name="src"></param>
             <param name="accumulate"></param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Gather(TorchSharp.FloatTensor,System.Int32,TorchSharp.LongTensor)">
             <summary>
               Gather
             </summary>
             <param name="src"></param>
             <param name="dim"></param>
             <param name="index">Indices of entries to copy.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Scatter(System.Int32,TorchSharp.LongTensor,TorchSharp.FloatTensor)">
             <summary>
               Scatter
             </summary>
             <param name="dim"></param>
             <param name="index">Indices of entries to copy.</param>
             <param name="src"></param>
            </member>
        <member name="M:TorchSharp.FloatTensor.ScatterAdd(System.Int32,TorchSharp.LongTensor,TorchSharp.FloatTensor)">
             <summary>
               ScatterAdd
             </summary>
             <param name="dim"></param>
             <param name="index">Indices of entries to copy.</param>
             <param name="src"></param>
            </member>
        <member name="M:TorchSharp.FloatTensor.ScatterFill(System.Int32,TorchSharp.LongTensor,System.Single)">
             <summary>
               ScatterAdd
             </summary>
             <param name="dim"></param>
             <param name="index">Indices of entries to copy.</param>
             <param name="value"></param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Copy(TorchSharp.FloatTensor)">
             <summary>
               Copies the elements of a tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.CopyByte(TorchSharp.ByteTensor)">
             <summary>
               Copies the elements of a byte tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.CopyShort(TorchSharp.ShortTensor)">
             <summary>
               Copies the elements of a short tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.CopyInt(TorchSharp.IntTensor)">
             <summary>
               Copies the elements of a int tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.CopyLong(TorchSharp.LongTensor)">
             <summary>
               Copies the elements of a long tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.CopyFloat(TorchSharp.FloatTensor)">
             <summary>
               Copies the elements of a float tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.CopyDouble(TorchSharp.DoubleTensor)">
             <summary>
               Copies the elements of a double tensor into the original tensor. 
               The shape of the tensors must exactly match or an error will be thrown.
             </summary>
             <param name="src">Tensor to copy the data from.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Sum(System.Int32,System.Boolean)">
             <summary>
               Computes the sum of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.CumulativeSum(System.Int32)">
             <summary>
               Computes the cumulative sum of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Prod(System.Int32,System.Boolean)">
             <summary>
               Computes the product of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.CumulativeProd(System.Int32)">
             <summary>
               Computes the cumulative product of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Max(System.Int32,System.Boolean)">
             <summary>
               Computes the max of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
             <returns>A tuple containing the values and indices of the resulting elements.</returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Min(System.Int32,System.Boolean)">
             <summary>
               Computes the min of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
             <returns>A tuple containing the values and indices of the resulting elements.</returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Mode(System.Int32,System.Boolean)">
             <summary>
               Computes the mode of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
             <returns>A tuple containing the values and indices of the resulting elements.</returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Median(System.Int32,System.Boolean)">
             <summary>
               Computes the median of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
             <returns>A tuple containing the values and indices of the resulting elements.</returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.KthValue(System.Int64,System.Int32,System.Boolean)">
             <summary>
               Computes the kth value of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="k">The value for 'k' in 'kth'.</param>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
             <returns>A tuple containing the values and indices of the kth element of each dimension.</returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.Trace">
             <summary>
               Computes the trace of the tensor. 
             </summary>
            </member>
        <member name="M:TorchSharp.FloatTensor.Sign">
             <summary>
               Computes the sign of the tensor. 
             </summary>
            </member>
        <member name="M:TorchSharp.FloatTensor.CrossProduct(TorchSharp.FloatTensor)">
             <summary>
               Computes the cross product of two tensors. 
             </summary>
             <param name="other">The right-hand-side tensor.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Diagonal(System.Int32)">
             <summary>
               Gets the diagonal of the tensor. 
             </summary>
             <param name="k"></param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Eye(System.Int64,System.Int64)">
             <summary>
               Eye. 
             </summary>
             <param name="m"></param>
             <param name="n"></param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Range(System.Double,System.Double,System.Double)">
             <summary>
               Create a range spanning from xmin to xmax, with 'step' between each value.
             </summary>
             <param name="xmin">The lower bound of the range.</param>
             <param name="xmax">The upper bound of the range.</param>
             <param name="step">The value step.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.ARange(System.Double,System.Double,System.Double)">
             <summary>
               Create a range spanning from xmin to xmax, with 'step' between each value.
             </summary>
             <param name="xmin">The lower bound of the range.</param>
             <param name="xmax">The upper bound of the range.</param>
             <param name="step">The value step.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Sort(System.Int32,System.Boolean)">
             <summary>
               Sorts the elements of the tensor along the given dimension. 
             </summary>
             <param name="dimension">The dimension to sort along.</param>
             <param name="descending">0 if ascending, 1 if descending.</param>
             <returns>A tuple containing the values and indices of the sorted elements.</returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.TopK(System.Int64,System.Int32,System.Int32,System.Boolean)">
             <summary>
               Finds the top k of all the elements of the tensor along the given dimension. 
             </summary>
             <param name="k">The number of elements to fetch.</param>
             <param name="dim">The dimension along which to sort and find k elements.</param>
             <param name="dir">0 if ascending, 1 if descending.</param>
             <param name="sorted">1 if the result should be sorted, 0 if they should keep their original order.</param>
             <returns>A tuple containing the values and indices of the top 'k' elements.</returns>
            </member>
        <member name="M:TorchSharp.FloatTensor.TriL(System.Int64)">
             <summary>
               Lower triangle. 
             </summary>
             <param name="k"></param>
            </member>
        <member name="M:TorchSharp.FloatTensor.TriU(System.Int64)">
             <summary>
               Upper triangle. 
             </summary>
             <param name="k"></param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Concatenate(TorchSharp.FloatTensor,System.Int32)">
             <summary>
               Concatenate tensors along the given dimesion.
             </summary>
             <param name="other">The second tensor.</param>
             <param name="dimension">The dimension along which to concatenate.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Mean(System.Int32,System.Boolean)">
             <summary>
               Compute the mean of all tensor elements along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Std(System.Int32,System.Boolean,System.Boolean)">
             <summary>
               Compute the standard deviation of all tensor elements along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="biased"></param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Var(System.Int32,System.Boolean,System.Boolean)">
             <summary>
               Compute the variance of all tensor elements along the given dimension. 
             </summary>
             <param name="dimension">The dimension to process along.</param>
             <param name="biased"></param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Norm(System.Single,System.Int32,System.Boolean)">
             <summary>
               Compute the norm of all tensor elements along the given dimension. 
             </summary>
             <param name="value"></param>
             <param name="dimension">The dimension to process along.</param>
             <param name="keepdim">true if the reduction dimension should be kept, false otherwise.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Renorm(System.Single,System.Int32,System.Single)">
             <summary>
               Compute the renorm of all tensor elements along the given dimension. 
             </summary>
             <param name="value"></param>
             <param name="dimension">The dimension to process along.</param>
             <param name="maxnorm"></param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Dist(TorchSharp.FloatTensor,System.Single)">
             <summary>
               Compute the dist of all tensor elements along the given dimension. 
             </summary>
             <param name="other">The other tensor.</param>
             <param name="value"></param>
            </member>
        <member name="M:TorchSharp.FloatTensor.Histc(System.Int64,System.Single,System.Single)">
             <summary>
               Create a histogram of all tensor elements. 
             </summary>
             <param name="nbins">The number of bins in the output histogram.</param>
             <param name="minvalue">Only consider values equal to or greater than this.</param>
             <param name="maxvalue">Only consider values equal to or less than this.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.BHistc(System.Int64,System.Single,System.Single)">
             <summary>
               Create a histogram of all tensor elements. 
             </summary>
             <param name="nbins">The number of bins in the output histogram.</param>
             <param name="minvalue">Only consider values equal to or greater than this.</param>
             <param name="maxvalue">Only consider values equal to or less than this.</param>
            </member>
        <member name="M:TorchSharp.FloatTensor.MeanAll">
             <summary>
               Compute the mean of all tensor elements. 
             </summary>
            </member>
        <member name="M:TorchSharp.FloatTensor.VarAll(System.Boolean)">
             <summary>
               Compute the variance of all tensor elements. 
             </summary>
             <param name="biased"></param>
            </member>
        <member name="M:TorchSharp.FloatTensor.StdAll(System.Boolean)">
             <summary>
               Compute the standard deviation of all tensor elements. 
             </summary>
             <param name="biased"></param>
            </member>
        <member name="M:TorchSharp.FloatTensor.NormAll(System.Single)">
             <summary>
               Compute the norm of all tensor elements. 
             </summary>
             <param name="value"></param>
            </member>
        <member name="M:TorchSharp.FloatTensor.DirichletGrad(TorchSharp.FloatTensor,TorchSharp.FloatTensor)">
             <summary>
                DirichletGrad
             </summary>
             <param name="alpha"></param>
             <param name="total"></param>
            </member>
        <member name="T:TorchSharp.RandomGenerator">
             <summary>
             Random class
             </summary>
             <remarks>
             Behind the scenes this is the THGenerator API and THRandom combined into
             one as THRandom are just convenience methods on top of THGenerator.
             </remarks>
            </member>
        <member name="M:TorchSharp.RandomGenerator.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:TorchSharp.RandomGenerator" /> class.
             </summary>
            </member>
        <member name="P:TorchSharp.RandomGenerator.IsValid">
             <summary>
             Gets a value indicating whether this <see cref="T:TorchSharp.RandomGenerator" /> is valid.
             </summary>
             <value><c>true</c> if is valid; otherwise, <c>false</c>.</value>
            </member>
        <member name="M:TorchSharp.RandomGenerator.Dispose(System.Boolean)">
             <summary>
             Dispose the specified disposing.
             </summary>
             <param name="disposing">If set to <c>true</c> disposing.</param>
            </member>
        <member name="M:TorchSharp.RandomGenerator.Finalize">
             <summary>
             Releases unmanaged resources and performs other cleanup operations before the
             <see cref="T:TorchSharp.RandomGenerator" /> is reclaimed by garbage collection.
             </summary>
            </member>
        <member name="M:TorchSharp.RandomGenerator.Dispose">
             <summary>
             Releases all resource used by the <see cref="T:TorchSharp.RandomGenerator" /> object.
             </summary>
             <remarks>Call Dispose when you are finished using the <see cref="T:TorchSharp.RandomGenerator" />. This
             method leaves the <see cref="T:TorchSharp.RandomGenerator" /> in an unusable state. After
             calling this method, you must release all references to the <see cref="T:TorchSharp.RandomGenerator" />
             so the garbage collector can reclaim the memory that the <see cref="T:TorchSharp.RandomGenerator" /> was occupying.</remarks>
            </member>
        <member name="M:TorchSharp.RandomGenerator.InitRandomSeed">
             <summary>
             Initializes the random number generator from /dev/urandom or in Windows with the current time.
             </summary>
             <returns>The random seed.</returns>
            </member>
        <member name="M:TorchSharp.RandomGenerator.InitWithSeed(System.UInt64)">
             <summary>
             Initializes the random number generator with the given seed.
             </summary>
             <param name="seed">Seed.</param>
            </member>
        <member name="P:TorchSharp.RandomGenerator.InitialSeed">
             <summary>
              Returns the starting seed used.
             </summary>
             <value>The initial seed.</value>
            </member>
        <member name="M:TorchSharp.RandomGenerator.NextUInt32">
             <summary>
              Generates a uniform 32 bits integer. 
             </summary>
             <returns>UInt32 random value.</returns>
            </member>
        <member name="M:TorchSharp.RandomGenerator.NextUInt64">
             <summary>
              Generates a uniform 64 bits integer. 
             </summary>
             <returns>UInt64 random value.</returns>
            </member>
        <member name="M:TorchSharp.RandomGenerator.NextDouble">
             <summary>
              Generates a uniform random double on [0,1).
             </summary>
             <returns>Generates a uniform random double on [0,1).</returns>
            </member>
        <member name="M:TorchSharp.RandomGenerator.NextDouble(System.Double,System.Double)">
             <summary>
              Generates a uniform random double on [a,b).
             </summary>
             <returns>Generates a uniform random double on [a, b).</returns>
            </member>
        <member name="M:TorchSharp.RandomGenerator.NextFloat(System.Single,System.Single)">
             <summary>
              Generates a uniform random float on [a,b).
             </summary>
             <returns>Generates a uniform random float on [a, b).</returns>
            </member>
        <member name="M:TorchSharp.RandomGenerator.NextNormalDouble(System.Double,System.Double)">
             <summary>
              Generates a random number from a normal distribution.
             </summary>
             <param name="mean">Mean for the distribution</param>
             <param name="stdev">Stanard deviation for the distribution, &gt; 0 </param>
             <returns>Generates a number for the normal distribution.</returns>
            </member>
        <member name="M:TorchSharp.RandomGenerator.NextExponentialDouble(System.Double)">
             <summary>
              Generates a random number from an exponential distribution.
             </summary>
             <param name="lambda">Must be a positive number</param>
             <remarks>
             The density is $p(x) = lambda * exp(-lambda * x)$, where lambda is a positive number.
             </remarks>
            </member>
        <member name="M:TorchSharp.RandomGenerator.NextCauchyDouble(System.Double,System.Double)">
             <summary>
              Returns a random number from a Cauchy distribution.
             </summary>
             <param name="median"></param>
             <param name="sigma"></param>
             <remarks>
             The Cauchy density is $p(x) = sigma/(pi*(sigma^2 + (x-median)^2))$
             </remarks>
            </member>
        <member name="M:TorchSharp.RandomGenerator.NextLogNormalDouble(System.Double,System.Double)">
             <summary>
              Generates a random number from a log-normal distribution.
             </summary>
             <param name="mean">&gt; 0 is the mean of the log-normal distribution</param>
             <param name="stddev">is its standard deviation.</param>
            </member>
        <member name="M:TorchSharp.RandomGenerator.NextGeometricDouble(System.Double,System.Double)">
             <summary>
              Generates a random number from a geometric distribution.
             </summary>
             <remarks>
             It returns an integer i, where p(i) = (1-p) * p^(i-1).
             p must satisfy $0 &lt; p &lt; 1
             </remarks>
            </member>
        <member name="M:TorchSharp.RandomGenerator.NextBernoulliDouble(System.Double,System.Double)">
             <summary>
              Returns true with double probability $p$ and false with probability 1-p (p &gt; 0).
             </summary>
            </member>
        <member name="M:TorchSharp.RandomGenerator.NextBernoulliDouble(System.Double,System.Single)">
             <summary>
              Returns true with double probability $p$ and false with probability 1-p (p &gt; 0).
             </summary>
            </member>
    </members>
</doc>
