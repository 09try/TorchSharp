<#@ Template Language="C#" #>
<#@ Assembly Name="System.Core" #>
<#@ Output Extension=".generated.cs" #>
<#@ Include File="Types.ttinclude" #>

using System;
using System.Runtime.InteropServices;

namespace TorchSharp {
<#
foreach (var type in TorchTypeDef.Types) {
#>

    public partial class <#=type.Name#>Tensor : IDisposable {

        // *** Level 1

        /// <summary>
        /// Swap x and y.
        /// </summary>
        /// <remarks>
        /// Corresponds to the following TH declaration:
        /// <code>
        /// TH_API void THBlas_(swap)(
        ///     int64_t n, scalar_t *x, int64_t incx, scalar_t *y, int64_t incy);
        /// </code>
        /// </remarks>
        [DllImport ("caffe2")]
        extern static void TH<#=type.Name#>Blas_swap(
            long n,
            <#=type.Ptr#> x,
            long incx,
            <#=type.Ptr#> y,
            long incy);

        /// <summary>
        /// Evaluate <c>x = a*x</c>.
        /// </summary>
        /// <remarks>
        /// Corresponds to the following TH declaration:
        /// <code>
        /// TH_API void THBlas_(scal)(
        ///     int64_t n, scalar_t a, scalar_t *x, int64_t incx);
        /// </code>
        /// </remarks>
        [DllImport ("caffe2")]
        extern static void TH<#=type.Name#>Blas_scal(
            long n,
            <#=type.Storage#> a,
            <#=type.Ptr#> x,
            long incx);

        /// <summary>
        /// Copy x into y.
        /// </summary>
        /// <remarks>
        /// Corresponds to the following TH declaration:
        /// <code>
        /// TH_API void THBlas_(copy)(
        ///     int64_t n, scalar_t *x, int64_t incx, scalar_t *y, int64_t incy);
        /// </code>
        /// </remarks>
        [DllImport ("caffe2")]
        extern static void TH<#=type.Name#>Blas_copy(
            long n,
            <#=type.Ptr#> x,
            long incx,
            <#=type.Ptr#> y,
            long incy);

        /// <summary>
        /// Evaluate <c>y = a*x + y</c>.
        /// </summary>
        /// <remarks>
        /// Corresponds to the following TH declaration:
        /// <code>
        /// TH_API void THBlas_(axpy)(
        ///     int64_t n, scalar_t a, scalar_t *x, int64_t incx, scalar_t *y, int64_t incy);
        /// </code>
        /// </remarks>
        [DllImport ("caffe2")]
        extern static void TH<#=type.Name#>Blas_axpy(
            long n,
            <#=type.Storage#> a,
            <#=type.Ptr#> x,
            long incx,
            <#=type.Ptr#> y,
            long incy);

        /// <summary>
        /// Evaluate the dot product.
        /// </summary>
        /// <remarks>
        /// Corresponds to the following TH declaration:
        /// <code>
        /// TH_API scalar_t THBlas_(dot)(
        ///     int64_t n, scalar_t *x, int64_t incx, scalar_t *y, int64_t incy);
        /// </code>
        /// </remarks>
        [DllImport ("caffe2")]
        extern static <#=type.Storage#> TH<#=type.Name#>Blas_dot(
            long n,
            <#=type.Ptr#> x,
            long incx,
            <#=type.Ptr#> y,
            long incy);

        // *** Level 2

        /// <summary>
        /// Matrix-vector multiplication.
        /// </summary>
        /// <remarks>
        /// Corresponds to the following TH declaration:
        /// <code>
        /// TH_API void THBlas_(gemv)(
        ///     char trans, int64_t m, int64_t n, scalar_t alpha,
        ///     scalar_t *a, int64_t lda, scalar_t *x, int64_t incx,
        ///     scalar_t beta, scalar_t *y, int64_t incy);
        /// </code>
        /// </remarks>
        [DllImport ("caffe2")]
        extern static void TH<#=type.Name#>Blas_gemv(
            byte trans,
            long m,
            long n,
            <#=type.Storage#> alpha,
            <#=type.Ptr#> a,
            long lda,
            <#=type.Ptr#> x,
            long incx,
            <#=type.Storage#> beta,
            <#=type.Ptr#> y,
            long incy);

        /// <summary>
        /// Rank 1 operation <c>A := alpha*x*y' + A</c>
        /// </summary>
        /// <remarks>
        /// Corresponds to the following TH declaration:
        /// <code>
        /// TH_API void THBlas_(ger)(
        ///     int64_t m, int64_t n, scalar_t alpha, scalar_t *x, int64_t incx,
        ///     scalar_t *y, int64_t incy, scalar_t *a, int64_t lda);
        /// </code>
        /// </remarks>
        [DllImport ("caffe2")]
        extern static void TH<#=type.Name#>Blas_ger(
            long m,
            long n,
            <#=type.Storage#> alpha,
            <#=type.Ptr#> x,
            long incx,
            <#=type.Ptr#> y,
            long incy,
            <#=type.Ptr#> a,
            long lda);

        // *** Level 3

        /// <summary>
        /// Matrix-matrix multiplication.
        /// </summary>
        /// <remarks>
        /// Corresponds to the following TH declaration:
        /// <code>
        /// TH_API void THBlas_(gemm)(
        ///     char transa, char transb, int64_t m, int64_t n, int64_t k,
        ///     scalar_t alpha, scalar_t *a, int64_t lda, scalar_t *b, int64_t ldb,
        ///     scalar_t beta, scalar_t *c, int64_t ldc);
        /// </code>
        /// </remarks>
        [DllImport ("caffe2")]
        extern static void TH<#=type.Name#>Blas_gemm(
            byte transa,
            byte transb,
            long m,
            long n,
            long k,
            <#=type.Storage#> alpha,
            <#=type.Ptr#> a,
            long lda,
            <#=type.Ptr#> b,
            long ldb,
            <#=type.Storage#> beta,
            <#=type.Ptr#> c,
            long ldc);
    } // class <#=type.Name#>Tensor
<# } #>
} // namespace TorchSharp
