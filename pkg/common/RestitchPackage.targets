<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">


<!-- Some massive files > 1GB are delivered in fragments across multiple nuget packages. -->
<!-- Here we hack them back together on first build using the package install -->
  <UsingTask
    TaskName="FileRestitch"
    TaskFactory="RoslynCodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
    <ParameterGroup>
      <RestitcherPackage ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System"/>
      <Using Namespace="System.IO"/>
      <Code Type="Fragment" Language="cs">
<![CDATA[
            if (Directory.Exists(RestitcherPackage))
            {
                //System.Console.WriteLine("Searching for primary files in {0}", RestitcherPackage);
                foreach (var p in Directory.EnumerateFiles(RestitcherPackage, "*", SearchOption.AllDirectories))
                {

                    var primaryFile = Path.GetFullPath(p);
                    //Console.WriteLine("Found primary file at {0}", primaryFile);

                    // See if there are fragments in the parallel nuget packages. If the primary is 
                    //        some-package-primary\runtimes\....\a.so 
                    // then the expected fragments are
                    //        some-package-fragment1\fragments\....\a.so 
                    //        some-package-fragment2\fragments\....\a.so 
                    //        some-package-fragment3\fragments\....\a.so 
                    var fragmentFile1 = primaryFile.Replace("-primary", "-fragment1").Replace("runtimes", "fragments") + ".fragment1";
                    var fragmentFile2 = primaryFile.Replace("-primary", "-fragment2").Replace("runtimes", "fragments") + ".fragment2";
                    var fragmentFile3 = primaryFile.Replace("-primary", "-fragment3").Replace("runtimes", "fragments") + ".fragment3";

                    if (File.Exists(fragmentFile1))
                    {
                        Console.WriteLine("Found fragment file at {0}", fragmentFile1);
                        Console.WriteLine("Found fragment file at {0}", fragmentFile2);
                        Console.WriteLine("Found fragment file at {0}", fragmentFile3);
                        var primaryBytes = File.ReadAllBytes(primaryFile);
                        var fragmentBytes1 = File.ReadAllBytes(fragmentFile1);
                        var fragmentBytes2 = (File.Exists(fragmentFile2) ? File.ReadAllBytes(fragmentFile2) : new byte[0]);
                        var fragmentBytes3 = (File.Exists(fragmentFile3) ? File.ReadAllBytes(fragmentFile3) : new byte[0]);
                        var outputBytes = new byte[primaryBytes.Length + fragmentBytes1.Length + fragmentBytes2.Length + fragmentBytes3.Length];

                        Array.Copy(primaryBytes, 0, outputBytes, 0, primaryBytes.Length);
                        Array.Copy(fragmentBytes1, 0, outputBytes, primaryBytes.Length, fragmentBytes1.Length);
                        Array.Copy(fragmentBytes2, 0, outputBytes, primaryBytes.Length + fragmentBytes1.Length, fragmentBytes2.Length);
                        Array.Copy(fragmentBytes3, 0, outputBytes, primaryBytes.Length + fragmentBytes1.Length + fragmentBytes2.Length, fragmentBytes3.Length);

                        var tmpFile = Path.GetTempFileName();
                        Console.WriteLine("Writing restored primary file at {0}", tmpFile);
                        File.WriteAllBytes(tmpFile, outputBytes);
                        Console.WriteLine("Deleting {0}", primaryFile);
                        File.Delete(primaryFile);
                        Console.WriteLine("Moving {0} --> {1}", tmpFile, primaryFile);
                        File.Move(tmpFile, primaryFile);

                        Console.WriteLine("Deleting {0}", fragmentFile1);
                        File.Delete(fragmentFile1);  // free up space and prevent us doing this again 

                        Console.WriteLine("Deleting {0}", fragmentFile2);
                        if (File.Exists(fragmentFile2))
                            File.Delete(fragmentFile2);  // free up space and prevent us doing this again 

                        Console.WriteLine("Deleting {0}", fragmentFile3);
                        if (File.Exists(fragmentFile3))
                            File.Delete(fragmentFile3);  // free up space and prevent us doing this again 
                    }
                }
            }
]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="FileRestitch"
    Outputs="%(RestitcherPackage.Identity)\.restiched"
    AfterTargets="ResolveReferences"
    BeforeTargets="PrepareForBuild">
   <!-- <Message Text="Checking for restitch files under %(RestitcherPackage.Identity)" /> -->
    <FileRestitch RestitcherPackage="%(RestitcherPackage.Identity)" />
  </Target>


</Project>